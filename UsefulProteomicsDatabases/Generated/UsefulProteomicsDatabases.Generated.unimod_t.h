#pragma once

#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace UsefulProteomicsDatabases { namespace Generated { class elem_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class mod_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class aa_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class brick_t; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace UsefulProteomicsDatabases {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.unimod.org/xmlns/schema/unimod_2")][System.Xml.Serialization.XmlRootAttribute("unimod", Namespace = "http://www.unimod.org/xmlns/schema/unimod_2", IsNullable = false)] public partial class unimod_t
        class unimod_t {

        private:
            std::vector<elem_t*> elementsField;

            std::vector<mod_t*> modificationsField;

            std::vector<aa_t*> amino_acidsField;

            std::vector<brick_t*> mod_bricksField;

            unsigned short majorVersionField = 0;

            unsigned short minorVersionField = 0;

        public:
            unimod_t();

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("elem", IsNullable = false)] public elem_t[] elements
            std::vector<elem_t*> getelements() const;
            void setelements(const std::vector<elem_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("mod", IsNullable = false)] public mod_t[] modifications
            std::vector<mod_t*> getmodifications() const;
            void setmodifications(const std::vector<mod_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("aa", IsNullable = false)] public aa_t[] amino_acids
            std::vector<aa_t*> getamino_acids() const;
            void setamino_acids(const std::vector<aa_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("brick", IsNullable = false)] public brick_t[] mod_bricks
            std::vector<brick_t*> getmod_bricks() const;
            void setmod_bricks(const std::vector<brick_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public ushort majorVersion
            unsigned short getmajorVersion() const;
            void setmajorVersion(unsigned short value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public ushort minorVersion
            unsigned short getminorVersion() const;
            void setminorVersion(unsigned short value);
        };
    }
}
