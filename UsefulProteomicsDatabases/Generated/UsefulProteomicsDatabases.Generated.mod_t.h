#pragma once

#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace UsefulProteomicsDatabases { namespace Generated { class specificity_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class composition_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class xref_t; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace UsefulProteomicsDatabases
{
    namespace Generated
    {
        /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

        /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

            /// <remarks/>

        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.unimod.org/xmlns/schema/unimod_2")] public partial class mod_t
        class mod_t
        {

        private:
            std::vector<specificity_t*> specificityField;

            composition_t *deltaField;

            std::vector<composition_t*> ignoreField;

            std::vector<std::string> alt_nameField;

            std::vector<xref_t*> xrefField;

            std::string misc_notesField;

            std::string titleField;

            std::string full_nameField;

            std::string username_of_posterField;

            std::string group_of_posterField;

            std::string date_time_postedField;

            std::string date_time_modifiedField;

            bool approvedField = false;

            bool approvedFieldSpecified = false;

            std::string ex_code_nameField;

            long long record_idField = 0;

            bool record_idFieldSpecified = false;

            /// <remarks/>
        public:
            virtual ~mod_t()
            {
                delete deltaField;
            }

//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("specificity")] public specificity_t[] specificity
            std::vector<specificity_t*> getspecificity() const;
            void setspecificity(const std::vector<specificity_t*> &value);

            /// <remarks/>
            composition_t *getdelta() const;
            void setdelta(composition_t *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("Ignore")] public composition_t[] Ignore
            std::vector<composition_t*> getIgnore() const;
            void setIgnore(const std::vector<composition_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("alt_name")] public string[] alt_name
            std::vector<std::string> getalt_name() const;
            void setalt_name(const std::vector<std::string> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("xref")] public xref_t[] xref
            std::vector<xref_t*> getxref() const;
            void setxref(const std::vector<xref_t*> &value);

            /// <remarks/>
            std::string getmisc_notes() const;
            void setmisc_notes(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string title
            std::string gettitle() const;
            void settitle(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string full_name
            std::string getfull_name() const;
            void setfull_name(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string username_of_poster
            std::string getusername_of_poster() const;
            void setusername_of_poster(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string group_of_poster
            std::string getgroup_of_poster() const;
            void setgroup_of_poster(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string date_time_posted
            std::string getdate_time_posted() const;
            void setdate_time_posted(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string date_time_modified
            std::string getdate_time_modified() const;
            void setdate_time_modified(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public bool approved
            bool getapproved() const;
            void setapproved(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool approvedSpecified
            bool getapprovedSpecified() const;
            void setapprovedSpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string ex_code_name
            std::string getex_code_name() const;
            void setex_code_name(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public long record_id
            long long getrecord_id() const;
            void setrecord_id(long long value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool record_idSpecified
            bool getrecord_idSpecified() const;
            void setrecord_idSpecified(bool value);
        };
    }
}
