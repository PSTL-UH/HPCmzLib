#pragma once

#include "unimod_2.h"
#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace UsefulProteomicsDatabases { namespace Generated { class NeutralLoss_t; } }
namespace UsefulProteomicsDatabases { namespace Generated { class PepNeutralLoss_t; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace UsefulProteomicsDatabases
{
    namespace Generated
    {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.unimod.org/xmlns/schema/unimod_2")] public partial class specificity_t
        class specificity_t
        {

        private:
            std::vector<NeutralLoss_t*> neutralLossField;

            std::vector<PepNeutralLoss_t*> pepNeutralLossField;

            std::string misc_notesField;

            bool hiddenField = false;

            std::string siteField;

            position_t positionField = static_cast<position_t>(0);

            classification_t classificationField = static_cast<classification_t>(0);

            std::string spec_groupField;

        public:
            specificity_t();

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("NeutralLoss")] public NeutralLoss_t[] NeutralLoss
            std::vector<NeutralLoss_t*> getNeutralLoss() const;
            void setNeutralLoss(const std::vector<NeutralLoss_t*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("PepNeutralLoss")] public PepNeutralLoss_t[] PepNeutralLoss
            std::vector<PepNeutralLoss_t*> getPepNeutralLoss() const;
            void setPepNeutralLoss(const std::vector<PepNeutralLoss_t*> &value);

            /// <remarks/>
            std::string getmisc_notes() const;
            void setmisc_notes(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()][System.ComponentModel.DefaultValueAttribute(false)] public bool hidden
            bool gethidden() const;
            void sethidden(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string site
            std::string getsite() const;
            void setsite(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public position_t position
            position_t getposition() const;
            void setposition(position_t value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public classification_t classification
            classification_t getclassification() const;
            void setclassification(classification_t value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")][System.ComponentModel.DefaultValueAttribute("1")] public string spec_group
            std::string getspec_group() const;
            void setspec_group(const std::string &value);
        };
    }
}
