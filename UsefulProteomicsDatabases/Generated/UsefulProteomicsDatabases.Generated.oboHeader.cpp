#include "UsefulProteomicsDatabases.Generated.oboHeader.h"
#include "UsefulProteomicsDatabases.Generated.oboHeaderSubsetdef.h"
#include "UsefulProteomicsDatabases.Generated.oboHeaderSynonymtypedef.h"
#include "UsefulProteomicsDatabases.Generated.oboHeaderRemark.h"

namespace UsefulProteomicsDatabases {
    namespace Generated {

        std::wstring oboHeader::getformatversion() const {
            return this->formatversionField;
        }

        void oboHeader::setformatversion(const std::wstring &value) {
            this->formatversionField = value;
        }

        std::wstring oboHeader::getdate() const {
            return this->dateField;
        }

        void oboHeader::setdate(const std::wstring &value) {
            this->dateField = value;
        }

        std::wstring oboHeader::getsavedby() const {
            return this->savedbyField;
        }

        void oboHeader::setsavedby(const std::wstring &value) {
            this->savedbyField = value;
        }

        std::wstring oboHeader::getautogeneratedby() const {
            return this->autogeneratedbyField;
        }

        void oboHeader::setautogeneratedby(const std::wstring &value) {
            this->autogeneratedbyField = value;
        }

        std::wstring oboHeader::getdefaultnamespace() const {
            return this->defaultnamespaceField;
        }

        void oboHeader::setdefaultnamespace(const std::wstring &value) {
            this->defaultnamespaceField = value;
        }

        std::vector<oboHeaderSubsetdef*> oboHeader::getsubsetdef() const {
            return this->subsetdefField;
        }

        void oboHeader::setsubsetdef(const std::vector<oboHeaderSubsetdef*> &value) {
            this->subsetdefField = value;
        }

        std::vector<oboHeaderSynonymtypedef*> oboHeader::getsynonymtypedef() const {
            return this->synonymtypedefField;
        }

        void oboHeader::setsynonymtypedef(const std::vector<oboHeaderSynonymtypedef*> &value) {
            this->synonymtypedefField = value;
        }

        std::vector<oboHeaderRemark*> oboHeader::getremark() const {
            return this->remarkField;
        }

        void oboHeader::setremark(const std::vector<oboHeaderRemark*> &value) {
            this->remarkField = value;
        }
    }
}
