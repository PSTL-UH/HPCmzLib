#pragma once

#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace UsefulProteomicsDatabases { namespace Generated { class oboHeaderSubsetdef; } }
namespace UsefulProteomicsDatabases { namespace Generated { class oboHeaderSynonymtypedef; } }
namespace UsefulProteomicsDatabases { namespace Generated { class oboHeaderRemark; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace UsefulProteomicsDatabases {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)] public partial class oboHeader
        class oboHeader {

        private:
            std::wstring formatversionField;

            std::wstring dateField;

            std::wstring savedbyField;

            std::wstring autogeneratedbyField;

            std::wstring defaultnamespaceField;

            std::vector<oboHeaderSubsetdef*> subsetdefField;

            std::vector<oboHeaderSynonymtypedef*> synonymtypedefField;

            std::vector<oboHeaderRemark*> remarkField;

            /// <remarks/>
        public:
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("format-version", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string formatversion
            std::wstring getformatversion() const;
            void setformatversion(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string date
            std::wstring getdate() const;
            void setdate(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("saved-by", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string savedby
            std::wstring getsavedby() const;
            void setsavedby(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("auto-generated-by", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string autogeneratedby
            std::wstring getautogeneratedby() const;
            void setautogeneratedby(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("default-namespace", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string defaultnamespace
            std::wstring getdefaultnamespace() const;
            void setdefaultnamespace(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("subsetdef", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public oboHeaderSubsetdef[] subsetdef
            std::vector<oboHeaderSubsetdef*> getsubsetdef() const;
            void setsubsetdef(const std::vector<oboHeaderSubsetdef*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("synonymtypedef", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public oboHeaderSynonymtypedef[] synonymtypedef
            std::vector<oboHeaderSynonymtypedef*> getsynonymtypedef() const;
            void setsynonymtypedef(const std::vector<oboHeaderSynonymtypedef*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("remark", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] public oboHeaderRemark[] remark
            std::vector<oboHeaderRemark*> getremark() const;
            void setremark(const std::vector<oboHeaderRemark*> &value);
        };
    }
}
