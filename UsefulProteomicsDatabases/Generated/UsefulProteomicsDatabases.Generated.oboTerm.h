#pragma once

#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace UsefulProteomicsDatabases { namespace Generated { class def; } }
namespace UsefulProteomicsDatabases { namespace Generated { class oboTermSynonym; } }
//namespace UsefulProteomicsDatabases { namespace Generated { class oboTermXref_analog; } }
namespace UsefulProteomicsDatabases { namespace Generated { class oboTermIs_a; } }
namespace UsefulProteomicsDatabases { namespace Generated { class oboTermRelationship; } }

#include "UsefulProteomicsDatabases.Generated.oboTermXref_analog.h"

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace UsefulProteomicsDatabases {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)] public partial class oboTerm
        class oboTerm {

        private:
            std::wstring idField;

            std::wstring nameField;

            std::wstring is_obsoleteField;

            std::wstring commentField;

            std::wstring subsetField;

            std::wstring namespaceField;

            std::wstring is_rootField;

            std::vector<UsefulProteomicsDatabases::Generated::def*> defField;

            std::vector<oboTermSynonym*> synonymField;

            std::vector<oboTermXref_analog*> xref_analogField;

            std::vector<oboTermIs_a*> is_aField;

            std::vector<oboTermRelationship*> relationshipField;

            /// <remarks/>
        public:
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string id
            std::wstring getid() const;
            void setid(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string name
            std::wstring getname() const;
            void setname(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string is_obsolete
            std::wstring getis_obsolete() const;
            void setis_obsolete(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string comment
            std::wstring getcomment() const;
            void setcomment(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string subset
            std::wstring getsubset() const;
            void setsubset(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string namespace
            std::wstring getnamespace_Renamed() const;
            void setnamespace_Renamed(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public string is_root
            std::wstring getis_root() const;
            void setis_root(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("def")] public def[] def
            std::vector<UsefulProteomicsDatabases::Generated::def*> getdef() const;
            void setdef(const std::vector<UsefulProteomicsDatabases::Generated::def*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("synonym", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public oboTermSynonym[] synonym
            std::vector<oboTermSynonym*> getsynonym() const;
            void setsynonym(const std::vector<oboTermSynonym*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("xref_analog", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public oboTermXref_analog[] xref_analog
            std::vector<oboTermXref_analog*> getxref_analog() const;
            void setxref_analog(const std::vector<oboTermXref_analog*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("is_a", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] public oboTermIs_a[] is_a
            std::vector<oboTermIs_a*> getis_a() const;
            void setis_a(const std::vector<oboTermIs_a*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("relationship", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] public oboTermRelationship[] relationship
            std::vector<oboTermRelationship*> getrelationship() const;
            void setrelationship(const std::vector<oboTermRelationship*> &value);
        };
    }
}
