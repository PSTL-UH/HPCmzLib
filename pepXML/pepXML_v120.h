// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PEP_XML_V120_FIXED_DOUBLE_H
#define PEP_XML_V120_FIXED_DOUBLE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace pepXML
{
  class engineType;
  class activationMethodType;
  class model_dis_type;
  class massType;
  class aa_symbolType;
  class term_symbolType;
  class positiveInt;
  class nameValueType;
  class inputFileType;
  class rocErrorDataType;
  class mixtureModelType;
  class modInfoDataType;
  class subInfoDataType;
  class altProteinDataType;
  class msms_pipeline_analysis;
  class peptideprophet_summary;
  class interprophet_summary;
  class ptmprophet_summary;
  class asapratio_summary;
  class xpressratio_summary;
  class ptmprophet_result;
  class peptideprophet_result;
  class interprophet_result;
  class asapratio_result;
  class asapratio_peptide_data;
  class asapratio_contribution;
  class asapratio_lc_lightpeak;
  class asapratio_lc_heavypeak;
  class database_refresh_timestamp;
  class xpressratio_timestamp;
  class asapratio_timestamp;
  class xpressratio_result;
  class interact_summary;
  class libra_result;
  class libra_summary;
  class roc_data_point;
  class error_point;
  class point;
  class mod_aminoacid_mass;
  class analysis_summary;
  class dataset_derivation;
  class msms_run_summary;
  class distribution_point;
  class mixture_model;
  class mod_aminoacid_probability;
  class search_score_summary;
  class intensity;
  class fragment_masses;
  class isotopic_contributions;
  class data_filter;
  class sample_enzyme;
  class cross_linker;
  class search_summary;
  class analysis_timestamp;
  class spectrum_query;
  class mixturemodel_distribution;
  class mixturemodel;
  class contributing_channel;
  class specificity;
  class name;
  class fidelity;
  class isotope_labeled;
  class search_database;
  class enzymatic_search_constraint;
  class sequence_search_constraint;
  class aminoacid_modification;
  class terminal_modification;
  class search_result;
  class posmodel_distribution;
  class negmodel_distribution;
  class point1;
  class affected_channel;
  class sense;
  class cut;
  class no_cut;
  class type;
  class search_hit;
  class xlink;
  class analysis_result;
  class xlink_type;
  class is_rejected;
  class linked_peptide;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace pepXML
{
  class engineType: public ::xml_schema::string
  {
    public:
    enum value
    {
      SEQUEST,
      MASCOT,
      Comet,
      SpectraST,
      PROBID,
      OMSSA,
      YABSE,
      MS_GFDB,
      MS_GF_,
      MyriMatch,
      X__Tandem__k_score_,
      X__Tandem,
      InsPecT,
      ProteinPilot,
      ProteinLynx,
      Spectrum_Mill,
      greylag,
      Phenyx,
      Proteios,
      Crux,
      Tide,
      Kojak
    };

    engineType ();

    engineType (value v);

    engineType (const char* v);

    engineType (const ::std::string& v);

    engineType (const ::xml_schema::string& v);

    engineType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    engineType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    engineType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    engineType (const engineType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual engineType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    engineType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_engineType_convert ();
    }

    protected:
    value
    _xsd_engineType_convert () const;

    public:
    static const char* const _xsd_engineType_literals_[22];
    static const value _xsd_engineType_indexes_[22];
  };

  class activationMethodType: public ::xml_schema::string
  {
    public:
    enum value
    {
      ETD,
      ECD,
      CID,
      ETD_CID,
      HCD,
      PQD,
      IRMPD
    };

    activationMethodType ();

    activationMethodType (value v);

    activationMethodType (const char* v);

    activationMethodType (const ::std::string& v);

    activationMethodType (const ::xml_schema::string& v);

    activationMethodType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    activationMethodType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    activationMethodType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    activationMethodType (const activationMethodType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual activationMethodType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    activationMethodType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_activationMethodType_convert ();
    }

    protected:
    value
    _xsd_activationMethodType_convert () const;

    public:
    static const char* const _xsd_activationMethodType_literals_[7];
    static const value _xsd_activationMethodType_indexes_[7];
  };

  class model_dis_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      discrete,
      gaussian,
      extremevalue,
      gamma,
      evd,
      non_parametric
    };

    model_dis_type ();

    model_dis_type (value v);

    model_dis_type (const char* v);

    model_dis_type (const ::std::string& v);

    model_dis_type (const ::xml_schema::string& v);

    model_dis_type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    model_dis_type (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    model_dis_type (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    model_dis_type (const model_dis_type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual model_dis_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    model_dis_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_model_dis_type_convert ();
    }

    protected:
    value
    _xsd_model_dis_type_convert () const;

    public:
    static const char* const _xsd_model_dis_type_literals_[6];
    static const value _xsd_model_dis_type_indexes_[6];
  };

  class massType: public ::xml_schema::string
  {
    public:
    enum value
    {
      monoisotopic,
      average
    };

    massType ();

    massType (value v);

    massType (const char* v);

    massType (const ::std::string& v);

    massType (const ::xml_schema::string& v);

    massType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    massType (const massType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual massType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    massType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_massType_convert ();
    }

    protected:
    value
    _xsd_massType_convert () const;

    public:
    static const char* const _xsd_massType_literals_[2];
    static const value _xsd_massType_indexes_[2];
  };

  class aa_symbolType: public ::xml_schema::string
  {
    public:
    enum value
    {
      cxx_1,
      cxx_2,
      cxx_3,
      cxx_4,
      cxx_5,
      cxx_6,
      cxx_7,
      cxx_8,
      cxx_9,
      cxx_,
      cxx_10,
      cxx_11,
      cxx_12,
      cxx_13,
      cxx__,
      cxx_14,
      cxx_15,
      cxx_16,
      cxx_17
    };

    aa_symbolType ();

    aa_symbolType (value v);

    aa_symbolType (const char* v);

    aa_symbolType (const ::std::string& v);

    aa_symbolType (const ::xml_schema::string& v);

    aa_symbolType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    aa_symbolType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    aa_symbolType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    aa_symbolType (const aa_symbolType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual aa_symbolType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    aa_symbolType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_aa_symbolType_convert ();
    }

    protected:
    value
    _xsd_aa_symbolType_convert () const;

    public:
    static const char* const _xsd_aa_symbolType_literals_[19];
    static const value _xsd_aa_symbolType_indexes_[19];
  };

  class term_symbolType: public ::xml_schema::string
  {
    public:
    enum value
    {
      cxx_,
      cxx_1,
      cxx_2,
      cxx_3
    };

    term_symbolType ();

    term_symbolType (value v);

    term_symbolType (const char* v);

    term_symbolType (const ::std::string& v);

    term_symbolType (const ::xml_schema::string& v);

    term_symbolType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    term_symbolType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    term_symbolType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    term_symbolType (const term_symbolType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual term_symbolType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    term_symbolType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_term_symbolType_convert ();
    }

    protected:
    value
    _xsd_term_symbolType_convert () const;

    public:
    static const char* const _xsd_term_symbolType_literals_[4];
    static const value _xsd_term_symbolType_indexes_[4];
  };

  class positiveInt: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    positiveInt ();

    positiveInt (const ::xml_schema::unsigned_int&);

    positiveInt (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    positiveInt (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    positiveInt (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    positiveInt (const positiveInt& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual positiveInt*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positiveInt ();
  };

  class nameValueType: public ::xml_schema::simple_type
  {
    public:
    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // value
    //
    typedef ::xml_schema::simple_type value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::unique_ptr< value_type > p);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    nameValueType ();

    nameValueType (const name_type&,
                   const value_type&);

    nameValueType (const ::xml_schema::simple_type&,
                   const name_type&,
                   const value_type&);

    nameValueType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    nameValueType (const nameValueType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual nameValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    nameValueType&
    operator= (const nameValueType& x);

    virtual 
    ~nameValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
    type_optional type_;
  };

  class inputFileType: public ::xml_schema::string
  {
    public:
    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // directory
    //
    typedef ::xml_schema::string directory_type;
    typedef ::xsd::cxx::tree::optional< directory_type > directory_optional;
    typedef ::xsd::cxx::tree::traits< directory_type, char > directory_traits;

    const directory_optional&
    directory () const;

    directory_optional&
    directory ();

    void
    directory (const directory_type& x);

    void
    directory (const directory_optional& x);

    void
    directory (::std::unique_ptr< directory_type > p);

    // Constructors.
    //
    inputFileType ();

    inputFileType (const name_type&);

    inputFileType (const char*,
                   const name_type&);

    inputFileType (const ::std::string&,
                   const name_type&);

    inputFileType (const ::xml_schema::string&,
                   const name_type&);

    inputFileType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    inputFileType (const inputFileType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual inputFileType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    inputFileType&
    operator= (const inputFileType& x);

    virtual 
    ~inputFileType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    directory_optional directory_;
  };

  class rocErrorDataType: public ::xml_schema::type
  {
    public:
    // roc_data_point
    //
    typedef ::pepXML::roc_data_point roc_data_point_type;
    typedef ::xsd::cxx::tree::sequence< roc_data_point_type > roc_data_point_sequence;
    typedef roc_data_point_sequence::iterator roc_data_point_iterator;
    typedef roc_data_point_sequence::const_iterator roc_data_point_const_iterator;
    typedef ::xsd::cxx::tree::traits< roc_data_point_type, char > roc_data_point_traits;

    const roc_data_point_sequence&
    roc_data_point () const;

    roc_data_point_sequence&
    roc_data_point ();

    void
    roc_data_point (const roc_data_point_sequence& s);

    // error_point
    //
    typedef ::pepXML::error_point error_point_type;
    typedef ::xsd::cxx::tree::sequence< error_point_type > error_point_sequence;
    typedef error_point_sequence::iterator error_point_iterator;
    typedef error_point_sequence::const_iterator error_point_const_iterator;
    typedef ::xsd::cxx::tree::traits< error_point_type, char > error_point_traits;

    const error_point_sequence&
    error_point () const;

    error_point_sequence&
    error_point ();

    void
    error_point (const error_point_sequence& s);

    // charge
    //
    typedef ::xml_schema::string charge_type;
    typedef ::xsd::cxx::tree::traits< charge_type, char > charge_traits;

    const charge_type&
    charge () const;

    charge_type&
    charge ();

    void
    charge (const charge_type& x);

    void
    charge (::std::unique_ptr< charge_type > p);

    // charge_est_correct
    //
    typedef ::xml_schema::double_ charge_est_correct_type;
    typedef ::xsd::cxx::tree::optional< charge_est_correct_type > charge_est_correct_optional;
    typedef ::xsd::cxx::tree::traits< charge_est_correct_type, char, ::xsd::cxx::tree::schema_type::double_ > charge_est_correct_traits;

    const charge_est_correct_optional&
    charge_est_correct () const;

    charge_est_correct_optional&
    charge_est_correct ();

    void
    charge_est_correct (const charge_est_correct_type& x);

    void
    charge_est_correct (const charge_est_correct_optional& x);

    // Constructors.
    //
    rocErrorDataType ();

    rocErrorDataType (const charge_type&);

    rocErrorDataType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    rocErrorDataType (const rocErrorDataType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual rocErrorDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    rocErrorDataType&
    operator= (const rocErrorDataType& x);

    virtual 
    ~rocErrorDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    roc_data_point_sequence roc_data_point_;
    error_point_sequence error_point_;
    ::xsd::cxx::tree::one< charge_type > charge_;
    charge_est_correct_optional charge_est_correct_;
  };

  class mixtureModelType: public ::xml_schema::type
  {
    public:
    // point
    //
    typedef ::pepXML::point point_type;
    typedef ::xsd::cxx::tree::sequence< point_type > point_sequence;
    typedef point_sequence::iterator point_iterator;
    typedef point_sequence::const_iterator point_const_iterator;
    typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

    const point_sequence&
    point () const;

    point_sequence&
    point ();

    void
    point (const point_sequence& s);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // pos_bandwidth
    //
    typedef ::xml_schema::double_ pos_bandwidth_type;
    typedef ::xsd::cxx::tree::traits< pos_bandwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_bandwidth_traits;

    const pos_bandwidth_type&
    pos_bandwidth () const;

    pos_bandwidth_type&
    pos_bandwidth ();

    void
    pos_bandwidth (const pos_bandwidth_type& x);

    // neg_bandwidth
    //
    typedef ::xml_schema::double_ neg_bandwidth_type;
    typedef ::xsd::cxx::tree::traits< neg_bandwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > neg_bandwidth_traits;

    const neg_bandwidth_type&
    neg_bandwidth () const;

    neg_bandwidth_type&
    neg_bandwidth ();

    void
    neg_bandwidth (const neg_bandwidth_type& x);

    // Constructors.
    //
    mixtureModelType ();

    mixtureModelType (const name_type&,
                      const pos_bandwidth_type&,
                      const neg_bandwidth_type&);

    mixtureModelType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    mixtureModelType (const mixtureModelType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual mixtureModelType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mixtureModelType&
    operator= (const mixtureModelType& x);

    virtual 
    ~mixtureModelType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    point_sequence point_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< pos_bandwidth_type > pos_bandwidth_;
    ::xsd::cxx::tree::one< neg_bandwidth_type > neg_bandwidth_;
  };

  class modInfoDataType: public ::xml_schema::type
  {
    public:
    // aminoacid_substitution
    //
    typedef ::pepXML::subInfoDataType aminoacid_substitution_type;
    typedef ::xsd::cxx::tree::sequence< aminoacid_substitution_type > aminoacid_substitution_sequence;
    typedef aminoacid_substitution_sequence::iterator aminoacid_substitution_iterator;
    typedef aminoacid_substitution_sequence::const_iterator aminoacid_substitution_const_iterator;
    typedef ::xsd::cxx::tree::traits< aminoacid_substitution_type, char > aminoacid_substitution_traits;

    const aminoacid_substitution_sequence&
    aminoacid_substitution () const;

    aminoacid_substitution_sequence&
    aminoacid_substitution ();

    void
    aminoacid_substitution (const aminoacid_substitution_sequence& s);

    // mod_aminoacid_mass
    //
    typedef ::pepXML::mod_aminoacid_mass mod_aminoacid_mass_type;
    typedef ::xsd::cxx::tree::sequence< mod_aminoacid_mass_type > mod_aminoacid_mass_sequence;
    typedef mod_aminoacid_mass_sequence::iterator mod_aminoacid_mass_iterator;
    typedef mod_aminoacid_mass_sequence::const_iterator mod_aminoacid_mass_const_iterator;
    typedef ::xsd::cxx::tree::traits< mod_aminoacid_mass_type, char > mod_aminoacid_mass_traits;

    const mod_aminoacid_mass_sequence&
    mod_aminoacid_mass () const;

    mod_aminoacid_mass_sequence&
    mod_aminoacid_mass ();

    void
    mod_aminoacid_mass (const mod_aminoacid_mass_sequence& s);

    // mod_nterm_mass
    //
    typedef ::xml_schema::double_ mod_nterm_mass_type;
    typedef ::xsd::cxx::tree::optional< mod_nterm_mass_type > mod_nterm_mass_optional;
    typedef ::xsd::cxx::tree::traits< mod_nterm_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mod_nterm_mass_traits;

    const mod_nterm_mass_optional&
    mod_nterm_mass () const;

    mod_nterm_mass_optional&
    mod_nterm_mass ();

    void
    mod_nterm_mass (const mod_nterm_mass_type& x);

    void
    mod_nterm_mass (const mod_nterm_mass_optional& x);

    // mod_cterm_mass
    //
    typedef ::xml_schema::double_ mod_cterm_mass_type;
    typedef ::xsd::cxx::tree::optional< mod_cterm_mass_type > mod_cterm_mass_optional;
    typedef ::xsd::cxx::tree::traits< mod_cterm_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mod_cterm_mass_traits;

    const mod_cterm_mass_optional&
    mod_cterm_mass () const;

    mod_cterm_mass_optional&
    mod_cterm_mass ();

    void
    mod_cterm_mass (const mod_cterm_mass_type& x);

    void
    mod_cterm_mass (const mod_cterm_mass_optional& x);

    // modified_peptide
    //
    typedef ::xml_schema::string modified_peptide_type;
    typedef ::xsd::cxx::tree::optional< modified_peptide_type > modified_peptide_optional;
    typedef ::xsd::cxx::tree::traits< modified_peptide_type, char > modified_peptide_traits;

    const modified_peptide_optional&
    modified_peptide () const;

    modified_peptide_optional&
    modified_peptide ();

    void
    modified_peptide (const modified_peptide_type& x);

    void
    modified_peptide (const modified_peptide_optional& x);

    void
    modified_peptide (::std::unique_ptr< modified_peptide_type > p);

    // Constructors.
    //
    modInfoDataType ();

    modInfoDataType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    modInfoDataType (const modInfoDataType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual modInfoDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    modInfoDataType&
    operator= (const modInfoDataType& x);

    virtual 
    ~modInfoDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    aminoacid_substitution_sequence aminoacid_substitution_;
    mod_aminoacid_mass_sequence mod_aminoacid_mass_;
    mod_nterm_mass_optional mod_nterm_mass_;
    mod_cterm_mass_optional mod_cterm_mass_;
    modified_peptide_optional modified_peptide_;
  };

  class subInfoDataType: public ::xml_schema::type
  {
    public:
    // position
    //
    typedef ::xml_schema::non_negative_integer position_type;
    typedef ::xsd::cxx::tree::optional< position_type > position_optional;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_optional&
    position () const;

    position_optional&
    position ();

    void
    position (const position_type& x);

    void
    position (const position_optional& x);

    // orig_aa
    //
    typedef ::xml_schema::string orig_aa_type;
    typedef ::xsd::cxx::tree::optional< orig_aa_type > orig_aa_optional;
    typedef ::xsd::cxx::tree::traits< orig_aa_type, char > orig_aa_traits;

    const orig_aa_optional&
    orig_aa () const;

    orig_aa_optional&
    orig_aa ();

    void
    orig_aa (const orig_aa_type& x);

    void
    orig_aa (const orig_aa_optional& x);

    void
    orig_aa (::std::unique_ptr< orig_aa_type > p);

    // num_tol_term
    //
    typedef ::xml_schema::non_negative_integer num_tol_term_type;
    typedef ::xsd::cxx::tree::optional< num_tol_term_type > num_tol_term_optional;
    typedef ::xsd::cxx::tree::traits< num_tol_term_type, char > num_tol_term_traits;

    const num_tol_term_optional&
    num_tol_term () const;

    num_tol_term_optional&
    num_tol_term ();

    void
    num_tol_term (const num_tol_term_type& x);

    void
    num_tol_term (const num_tol_term_optional& x);

    // peptide_prev_aa
    //
    typedef ::xml_schema::string peptide_prev_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_prev_aa_type > peptide_prev_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_prev_aa_type, char > peptide_prev_aa_traits;

    const peptide_prev_aa_optional&
    peptide_prev_aa () const;

    peptide_prev_aa_optional&
    peptide_prev_aa ();

    void
    peptide_prev_aa (const peptide_prev_aa_type& x);

    void
    peptide_prev_aa (const peptide_prev_aa_optional& x);

    void
    peptide_prev_aa (::std::unique_ptr< peptide_prev_aa_type > p);

    // peptide_next_aa
    //
    typedef ::xml_schema::string peptide_next_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_next_aa_type > peptide_next_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_next_aa_type, char > peptide_next_aa_traits;

    const peptide_next_aa_optional&
    peptide_next_aa () const;

    peptide_next_aa_optional&
    peptide_next_aa ();

    void
    peptide_next_aa (const peptide_next_aa_type& x);

    void
    peptide_next_aa (const peptide_next_aa_optional& x);

    void
    peptide_next_aa (::std::unique_ptr< peptide_next_aa_type > p);

    // Constructors.
    //
    subInfoDataType ();

    subInfoDataType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    subInfoDataType (const subInfoDataType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual subInfoDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    subInfoDataType&
    operator= (const subInfoDataType& x);

    virtual 
    ~subInfoDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    position_optional position_;
    orig_aa_optional orig_aa_;
    num_tol_term_optional num_tol_term_;
    peptide_prev_aa_optional peptide_prev_aa_;
    peptide_next_aa_optional peptide_next_aa_;
  };

  class altProteinDataType: public ::xml_schema::type
  {
    public:
    // aminoacid_substitution
    //
    typedef ::pepXML::subInfoDataType aminoacid_substitution_type;
    typedef ::xsd::cxx::tree::sequence< aminoacid_substitution_type > aminoacid_substitution_sequence;
    typedef aminoacid_substitution_sequence::iterator aminoacid_substitution_iterator;
    typedef aminoacid_substitution_sequence::const_iterator aminoacid_substitution_const_iterator;
    typedef ::xsd::cxx::tree::traits< aminoacid_substitution_type, char > aminoacid_substitution_traits;

    const aminoacid_substitution_sequence&
    aminoacid_substitution () const;

    aminoacid_substitution_sequence&
    aminoacid_substitution ();

    void
    aminoacid_substitution (const aminoacid_substitution_sequence& s);

    // protein
    //
    typedef ::xml_schema::string protein_type;
    typedef ::xsd::cxx::tree::traits< protein_type, char > protein_traits;

    const protein_type&
    protein () const;

    protein_type&
    protein ();

    void
    protein (const protein_type& x);

    void
    protein (::std::unique_ptr< protein_type > p);

    // protein_descr
    //
    typedef ::xml_schema::string protein_descr_type;
    typedef ::xsd::cxx::tree::optional< protein_descr_type > protein_descr_optional;
    typedef ::xsd::cxx::tree::traits< protein_descr_type, char > protein_descr_traits;

    const protein_descr_optional&
    protein_descr () const;

    protein_descr_optional&
    protein_descr ();

    void
    protein_descr (const protein_descr_type& x);

    void
    protein_descr (const protein_descr_optional& x);

    void
    protein_descr (::std::unique_ptr< protein_descr_type > p);

    // num_tol_term
    //
    typedef ::xml_schema::non_negative_integer num_tol_term_type;
    typedef ::xsd::cxx::tree::optional< num_tol_term_type > num_tol_term_optional;
    typedef ::xsd::cxx::tree::traits< num_tol_term_type, char > num_tol_term_traits;

    const num_tol_term_optional&
    num_tol_term () const;

    num_tol_term_optional&
    num_tol_term ();

    void
    num_tol_term (const num_tol_term_type& x);

    void
    num_tol_term (const num_tol_term_optional& x);

    // protein_mw
    //
    typedef ::xml_schema::double_ protein_mw_type;
    typedef ::xsd::cxx::tree::optional< protein_mw_type > protein_mw_optional;
    typedef ::xsd::cxx::tree::traits< protein_mw_type, char, ::xsd::cxx::tree::schema_type::double_ > protein_mw_traits;

    const protein_mw_optional&
    protein_mw () const;

    protein_mw_optional&
    protein_mw ();

    void
    protein_mw (const protein_mw_type& x);

    void
    protein_mw (const protein_mw_optional& x);

    // peptide_prev_aa
    //
    typedef ::xml_schema::string peptide_prev_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_prev_aa_type > peptide_prev_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_prev_aa_type, char > peptide_prev_aa_traits;

    const peptide_prev_aa_optional&
    peptide_prev_aa () const;

    peptide_prev_aa_optional&
    peptide_prev_aa ();

    void
    peptide_prev_aa (const peptide_prev_aa_type& x);

    void
    peptide_prev_aa (const peptide_prev_aa_optional& x);

    void
    peptide_prev_aa (::std::unique_ptr< peptide_prev_aa_type > p);

    // peptide_next_aa
    //
    typedef ::xml_schema::string peptide_next_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_next_aa_type > peptide_next_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_next_aa_type, char > peptide_next_aa_traits;

    const peptide_next_aa_optional&
    peptide_next_aa () const;

    peptide_next_aa_optional&
    peptide_next_aa ();

    void
    peptide_next_aa (const peptide_next_aa_type& x);

    void
    peptide_next_aa (const peptide_next_aa_optional& x);

    void
    peptide_next_aa (::std::unique_ptr< peptide_next_aa_type > p);

    // Constructors.
    //
    altProteinDataType ();

    altProteinDataType (const protein_type&);

    altProteinDataType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    altProteinDataType (const altProteinDataType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual altProteinDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    altProteinDataType&
    operator= (const altProteinDataType& x);

    virtual 
    ~altProteinDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    aminoacid_substitution_sequence aminoacid_substitution_;
    ::xsd::cxx::tree::one< protein_type > protein_;
    protein_descr_optional protein_descr_;
    num_tol_term_optional num_tol_term_;
    protein_mw_optional protein_mw_;
    peptide_prev_aa_optional peptide_prev_aa_;
    peptide_next_aa_optional peptide_next_aa_;
  };

  class msms_pipeline_analysis: public ::xml_schema::type
  {
    public:
    // analysis_summary
    //
    typedef ::pepXML::analysis_summary analysis_summary_type;
    typedef ::xsd::cxx::tree::sequence< analysis_summary_type > analysis_summary_sequence;
    typedef analysis_summary_sequence::iterator analysis_summary_iterator;
    typedef analysis_summary_sequence::const_iterator analysis_summary_const_iterator;
    typedef ::xsd::cxx::tree::traits< analysis_summary_type, char > analysis_summary_traits;

    const analysis_summary_sequence&
    analysis_summary () const;

    analysis_summary_sequence&
    analysis_summary ();

    void
    analysis_summary (const analysis_summary_sequence& s);

    // dataset_derivation
    //
    typedef ::pepXML::dataset_derivation dataset_derivation_type;
    typedef ::xsd::cxx::tree::optional< dataset_derivation_type > dataset_derivation_optional;
    typedef ::xsd::cxx::tree::traits< dataset_derivation_type, char > dataset_derivation_traits;

    const dataset_derivation_optional&
    dataset_derivation () const;

    dataset_derivation_optional&
    dataset_derivation ();

    void
    dataset_derivation (const dataset_derivation_type& x);

    void
    dataset_derivation (const dataset_derivation_optional& x);

    void
    dataset_derivation (::std::unique_ptr< dataset_derivation_type > p);

    // msms_run_summary
    //
    typedef ::pepXML::msms_run_summary msms_run_summary_type;
    typedef ::xsd::cxx::tree::sequence< msms_run_summary_type > msms_run_summary_sequence;
    typedef msms_run_summary_sequence::iterator msms_run_summary_iterator;
    typedef msms_run_summary_sequence::const_iterator msms_run_summary_const_iterator;
    typedef ::xsd::cxx::tree::traits< msms_run_summary_type, char > msms_run_summary_traits;

    const msms_run_summary_sequence&
    msms_run_summary () const;

    msms_run_summary_sequence&
    msms_run_summary ();

    void
    msms_run_summary (const msms_run_summary_sequence& s);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // date
    //
    typedef ::xml_schema::date_time date_type;
    typedef ::xsd::cxx::tree::traits< date_type, char > date_traits;

    const date_type&
    date () const;

    date_type&
    date ();

    void
    date (const date_type& x);

    void
    date (::std::unique_ptr< date_type > p);

    // summary_xml
    //
    typedef ::xml_schema::string summary_xml_type;
    typedef ::xsd::cxx::tree::traits< summary_xml_type, char > summary_xml_traits;

    const summary_xml_type&
    summary_xml () const;

    summary_xml_type&
    summary_xml ();

    void
    summary_xml (const summary_xml_type& x);

    void
    summary_xml (::std::unique_ptr< summary_xml_type > p);

    // Constructors.
    //
    msms_pipeline_analysis ();

    msms_pipeline_analysis (const date_type&,
                            const summary_xml_type&);

    msms_pipeline_analysis (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    msms_pipeline_analysis (const msms_pipeline_analysis& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual msms_pipeline_analysis*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    msms_pipeline_analysis&
    operator= (const msms_pipeline_analysis& x);

    virtual 
    ~msms_pipeline_analysis ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    analysis_summary_sequence analysis_summary_;
    dataset_derivation_optional dataset_derivation_;
    msms_run_summary_sequence msms_run_summary_;
    name_optional name_;
    ::xsd::cxx::tree::one< date_type > date_;
    ::xsd::cxx::tree::one< summary_xml_type > summary_xml_;
  };

  class peptideprophet_summary: public ::xml_schema::type
  {
    public:
    // inputfile
    //
    typedef ::pepXML::inputFileType inputfile_type;
    typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
    typedef inputfile_sequence::iterator inputfile_iterator;
    typedef inputfile_sequence::const_iterator inputfile_const_iterator;
    typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

    const inputfile_sequence&
    inputfile () const;

    inputfile_sequence&
    inputfile ();

    void
    inputfile (const inputfile_sequence& s);

    // roc_error_data
    //
    typedef ::pepXML::rocErrorDataType roc_error_data_type;
    typedef ::xsd::cxx::tree::sequence< roc_error_data_type > roc_error_data_sequence;
    typedef roc_error_data_sequence::iterator roc_error_data_iterator;
    typedef roc_error_data_sequence::const_iterator roc_error_data_const_iterator;
    typedef ::xsd::cxx::tree::traits< roc_error_data_type, char > roc_error_data_traits;

    const roc_error_data_sequence&
    roc_error_data () const;

    roc_error_data_sequence&
    roc_error_data ();

    void
    roc_error_data (const roc_error_data_sequence& s);

    // distribution_point
    //
    typedef ::pepXML::distribution_point distribution_point_type;
    typedef ::xsd::cxx::tree::sequence< distribution_point_type > distribution_point_sequence;
    typedef distribution_point_sequence::iterator distribution_point_iterator;
    typedef distribution_point_sequence::const_iterator distribution_point_const_iterator;
    typedef ::xsd::cxx::tree::traits< distribution_point_type, char > distribution_point_traits;

    const distribution_point_sequence&
    distribution_point () const;

    distribution_point_sequence&
    distribution_point ();

    void
    distribution_point (const distribution_point_sequence& s);

    // mixture_model
    //
    typedef ::pepXML::mixture_model mixture_model_type;
    typedef ::xsd::cxx::tree::sequence< mixture_model_type > mixture_model_sequence;
    typedef mixture_model_sequence::iterator mixture_model_iterator;
    typedef mixture_model_sequence::const_iterator mixture_model_const_iterator;
    typedef ::xsd::cxx::tree::traits< mixture_model_type, char > mixture_model_traits;

    const mixture_model_sequence&
    mixture_model () const;

    mixture_model_sequence&
    mixture_model ();

    void
    mixture_model (const mixture_model_sequence& s);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    // author
    //
    typedef ::xml_schema::string author_type;
    typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

    const author_type&
    author () const;

    author_type&
    author ();

    void
    author (const author_type& x);

    void
    author (::std::unique_ptr< author_type > p);

    // min_prob
    //
    typedef ::xml_schema::double_ min_prob_type;
    typedef ::xsd::cxx::tree::traits< min_prob_type, char, ::xsd::cxx::tree::schema_type::double_ > min_prob_traits;

    const min_prob_type&
    min_prob () const;

    min_prob_type&
    min_prob ();

    void
    min_prob (const min_prob_type& x);

    // options
    //
    typedef ::xml_schema::string options_type;
    typedef ::xsd::cxx::tree::optional< options_type > options_optional;
    typedef ::xsd::cxx::tree::traits< options_type, char > options_traits;

    const options_optional&
    options () const;

    options_optional&
    options ();

    void
    options (const options_type& x);

    void
    options (const options_optional& x);

    void
    options (::std::unique_ptr< options_type > p);

    // est_tot_num_correct
    //
    typedef ::xml_schema::double_ est_tot_num_correct_type;
    typedef ::xsd::cxx::tree::optional< est_tot_num_correct_type > est_tot_num_correct_optional;
    typedef ::xsd::cxx::tree::traits< est_tot_num_correct_type, char, ::xsd::cxx::tree::schema_type::double_ > est_tot_num_correct_traits;

    const est_tot_num_correct_optional&
    est_tot_num_correct () const;

    est_tot_num_correct_optional&
    est_tot_num_correct ();

    void
    est_tot_num_correct (const est_tot_num_correct_type& x);

    void
    est_tot_num_correct (const est_tot_num_correct_optional& x);

    // Constructors.
    //
    peptideprophet_summary ();

    peptideprophet_summary (const version_type&,
                            const author_type&,
                            const min_prob_type&);

    peptideprophet_summary (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    peptideprophet_summary (const peptideprophet_summary& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual peptideprophet_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    peptideprophet_summary&
    operator= (const peptideprophet_summary& x);

    virtual 
    ~peptideprophet_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    inputfile_sequence inputfile_;
    roc_error_data_sequence roc_error_data_;
    distribution_point_sequence distribution_point_;
    mixture_model_sequence mixture_model_;
    ::xsd::cxx::tree::one< version_type > version_;
    ::xsd::cxx::tree::one< author_type > author_;
    ::xsd::cxx::tree::one< min_prob_type > min_prob_;
    options_optional options_;
    est_tot_num_correct_optional est_tot_num_correct_;
  };

  class interprophet_summary: public ::xml_schema::type
  {
    public:
    // inputfile
    //
    typedef ::pepXML::inputFileType inputfile_type;
    typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
    typedef inputfile_sequence::iterator inputfile_iterator;
    typedef inputfile_sequence::const_iterator inputfile_const_iterator;
    typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

    const inputfile_sequence&
    inputfile () const;

    inputfile_sequence&
    inputfile ();

    void
    inputfile (const inputfile_sequence& s);

    // roc_error_data
    //
    typedef ::pepXML::rocErrorDataType roc_error_data_type;
    typedef ::xsd::cxx::tree::sequence< roc_error_data_type > roc_error_data_sequence;
    typedef roc_error_data_sequence::iterator roc_error_data_iterator;
    typedef roc_error_data_sequence::const_iterator roc_error_data_const_iterator;
    typedef ::xsd::cxx::tree::traits< roc_error_data_type, char > roc_error_data_traits;

    const roc_error_data_sequence&
    roc_error_data () const;

    roc_error_data_sequence&
    roc_error_data ();

    void
    roc_error_data (const roc_error_data_sequence& s);

    // mixturemodel
    //
    typedef ::pepXML::mixtureModelType mixturemodel_type;
    typedef ::xsd::cxx::tree::sequence< mixturemodel_type > mixturemodel_sequence;
    typedef mixturemodel_sequence::iterator mixturemodel_iterator;
    typedef mixturemodel_sequence::const_iterator mixturemodel_const_iterator;
    typedef ::xsd::cxx::tree::traits< mixturemodel_type, char > mixturemodel_traits;

    const mixturemodel_sequence&
    mixturemodel () const;

    mixturemodel_sequence&
    mixturemodel ();

    void
    mixturemodel (const mixturemodel_sequence& s);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    // options
    //
    typedef ::xml_schema::string options_type;
    typedef ::xsd::cxx::tree::optional< options_type > options_optional;
    typedef ::xsd::cxx::tree::traits< options_type, char > options_traits;

    const options_optional&
    options () const;

    options_optional&
    options ();

    void
    options (const options_type& x);

    void
    options (const options_optional& x);

    void
    options (::std::unique_ptr< options_type > p);

    // est_tot_num_correct_psm
    //
    typedef ::xml_schema::double_ est_tot_num_correct_psm_type;
    typedef ::xsd::cxx::tree::optional< est_tot_num_correct_psm_type > est_tot_num_correct_psm_optional;
    typedef ::xsd::cxx::tree::traits< est_tot_num_correct_psm_type, char, ::xsd::cxx::tree::schema_type::double_ > est_tot_num_correct_psm_traits;

    const est_tot_num_correct_psm_optional&
    est_tot_num_correct_psm () const;

    est_tot_num_correct_psm_optional&
    est_tot_num_correct_psm ();

    void
    est_tot_num_correct_psm (const est_tot_num_correct_psm_type& x);

    void
    est_tot_num_correct_psm (const est_tot_num_correct_psm_optional& x);

    // est_tot_num_correct_pep
    //
    typedef ::xml_schema::double_ est_tot_num_correct_pep_type;
    typedef ::xsd::cxx::tree::optional< est_tot_num_correct_pep_type > est_tot_num_correct_pep_optional;
    typedef ::xsd::cxx::tree::traits< est_tot_num_correct_pep_type, char, ::xsd::cxx::tree::schema_type::double_ > est_tot_num_correct_pep_traits;

    const est_tot_num_correct_pep_optional&
    est_tot_num_correct_pep () const;

    est_tot_num_correct_pep_optional&
    est_tot_num_correct_pep ();

    void
    est_tot_num_correct_pep (const est_tot_num_correct_pep_type& x);

    void
    est_tot_num_correct_pep (const est_tot_num_correct_pep_optional& x);

    // Constructors.
    //
    interprophet_summary ();

    interprophet_summary (const version_type&);

    interprophet_summary (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    interprophet_summary (const interprophet_summary& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual interprophet_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    interprophet_summary&
    operator= (const interprophet_summary& x);

    virtual 
    ~interprophet_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    inputfile_sequence inputfile_;
    roc_error_data_sequence roc_error_data_;
    mixturemodel_sequence mixturemodel_;
    ::xsd::cxx::tree::one< version_type > version_;
    options_optional options_;
    est_tot_num_correct_psm_optional est_tot_num_correct_psm_;
    est_tot_num_correct_pep_optional est_tot_num_correct_pep_;
  };

  class ptmprophet_summary: public ::xml_schema::type
  {
    public:
    // inputfile
    //
    typedef ::pepXML::inputFileType inputfile_type;
    typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
    typedef inputfile_sequence::iterator inputfile_iterator;
    typedef inputfile_sequence::const_iterator inputfile_const_iterator;
    typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

    const inputfile_sequence&
    inputfile () const;

    inputfile_sequence&
    inputfile ();

    void
    inputfile (const inputfile_sequence& s);

    // mixturemodel
    //
    typedef ::pepXML::mixtureModelType mixturemodel_type;
    typedef ::xsd::cxx::tree::sequence< mixturemodel_type > mixturemodel_sequence;
    typedef mixturemodel_sequence::iterator mixturemodel_iterator;
    typedef mixturemodel_sequence::const_iterator mixturemodel_const_iterator;
    typedef ::xsd::cxx::tree::traits< mixturemodel_type, char > mixturemodel_traits;

    const mixturemodel_sequence&
    mixturemodel () const;

    mixturemodel_sequence&
    mixturemodel ();

    void
    mixturemodel (const mixturemodel_sequence& s);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    // options
    //
    typedef ::xml_schema::string options_type;
    typedef ::xsd::cxx::tree::optional< options_type > options_optional;
    typedef ::xsd::cxx::tree::traits< options_type, char > options_traits;

    const options_optional&
    options () const;

    options_optional&
    options ();

    void
    options (const options_type& x);

    void
    options (const options_optional& x);

    void
    options (::std::unique_ptr< options_type > p);

    // Constructors.
    //
    ptmprophet_summary ();

    ptmprophet_summary (const version_type&);

    ptmprophet_summary (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    ptmprophet_summary (const ptmprophet_summary& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual ptmprophet_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ptmprophet_summary&
    operator= (const ptmprophet_summary& x);

    virtual 
    ~ptmprophet_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    inputfile_sequence inputfile_;
    mixturemodel_sequence mixturemodel_;
    ::xsd::cxx::tree::one< version_type > version_;
    options_optional options_;
  };

  class asapratio_summary: public ::xml_schema::type
  {
    public:
    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    // author
    //
    typedef ::xml_schema::string author_type;
    typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

    const author_type&
    author () const;

    author_type&
    author ();

    void
    author (const author_type& x);

    void
    author (::std::unique_ptr< author_type > p);

    // elution
    //
    typedef ::xml_schema::integer elution_type;
    typedef ::xsd::cxx::tree::traits< elution_type, char > elution_traits;

    const elution_type&
    elution () const;

    elution_type&
    elution ();

    void
    elution (const elution_type& x);

    // labeled_residues
    //
    typedef ::xml_schema::string labeled_residues_type;
    typedef ::xsd::cxx::tree::traits< labeled_residues_type, char > labeled_residues_traits;

    const labeled_residues_type&
    labeled_residues () const;

    labeled_residues_type&
    labeled_residues ();

    void
    labeled_residues (const labeled_residues_type& x);

    void
    labeled_residues (::std::unique_ptr< labeled_residues_type > p);

    // area_flag
    //
    typedef ::xml_schema::non_negative_integer area_flag_type;
    typedef ::xsd::cxx::tree::traits< area_flag_type, char > area_flag_traits;

    const area_flag_type&
    area_flag () const;

    area_flag_type&
    area_flag ();

    void
    area_flag (const area_flag_type& x);

    // static_quant
    //
    typedef ::xml_schema::string static_quant_type;
    typedef ::xsd::cxx::tree::traits< static_quant_type, char > static_quant_traits;

    const static_quant_type&
    static_quant () const;

    static_quant_type&
    static_quant ();

    void
    static_quant (const static_quant_type& x);

    void
    static_quant (::std::unique_ptr< static_quant_type > p);

    // specified_residue_masses
    //
    typedef ::xml_schema::string specified_residue_masses_type;
    typedef ::xsd::cxx::tree::optional< specified_residue_masses_type > specified_residue_masses_optional;
    typedef ::xsd::cxx::tree::traits< specified_residue_masses_type, char > specified_residue_masses_traits;

    const specified_residue_masses_optional&
    specified_residue_masses () const;

    specified_residue_masses_optional&
    specified_residue_masses ();

    void
    specified_residue_masses (const specified_residue_masses_type& x);

    void
    specified_residue_masses (const specified_residue_masses_optional& x);

    void
    specified_residue_masses (::std::unique_ptr< specified_residue_masses_type > p);

    // Constructors.
    //
    asapratio_summary ();

    asapratio_summary (const version_type&,
                       const author_type&,
                       const elution_type&,
                       const labeled_residues_type&,
                       const area_flag_type&,
                       const static_quant_type&);

    asapratio_summary (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    asapratio_summary (const asapratio_summary& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual asapratio_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_summary&
    operator= (const asapratio_summary& x);

    virtual 
    ~asapratio_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< version_type > version_;
    ::xsd::cxx::tree::one< author_type > author_;
    ::xsd::cxx::tree::one< elution_type > elution_;
    ::xsd::cxx::tree::one< labeled_residues_type > labeled_residues_;
    ::xsd::cxx::tree::one< area_flag_type > area_flag_;
    ::xsd::cxx::tree::one< static_quant_type > static_quant_;
    specified_residue_masses_optional specified_residue_masses_;
  };

  class xpressratio_summary: public ::xml_schema::type
  {
    public:
    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    // author
    //
    typedef ::xml_schema::string author_type;
    typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

    const author_type&
    author () const;

    author_type&
    author ();

    void
    author (const author_type& x);

    void
    author (::std::unique_ptr< author_type > p);

    // same_scan_range
    //
    typedef ::xml_schema::string same_scan_range_type;
    typedef ::xsd::cxx::tree::traits< same_scan_range_type, char > same_scan_range_traits;

    const same_scan_range_type&
    same_scan_range () const;

    same_scan_range_type&
    same_scan_range ();

    void
    same_scan_range (const same_scan_range_type& x);

    void
    same_scan_range (::std::unique_ptr< same_scan_range_type > p);

    // labeled_residues
    //
    typedef ::xml_schema::string labeled_residues_type;
    typedef ::xsd::cxx::tree::traits< labeled_residues_type, char > labeled_residues_traits;

    const labeled_residues_type&
    labeled_residues () const;

    labeled_residues_type&
    labeled_residues ();

    void
    labeled_residues (const labeled_residues_type& x);

    void
    labeled_residues (::std::unique_ptr< labeled_residues_type > p);

    // xpress_light
    //
    typedef ::xml_schema::unsigned_int xpress_light_type;
    typedef ::xsd::cxx::tree::traits< xpress_light_type, char > xpress_light_traits;

    const xpress_light_type&
    xpress_light () const;

    xpress_light_type&
    xpress_light ();

    void
    xpress_light (const xpress_light_type& x);

    // massdiff
    //
    typedef ::xml_schema::double_ massdiff_type;
    typedef ::xsd::cxx::tree::traits< massdiff_type, char, ::xsd::cxx::tree::schema_type::double_ > massdiff_traits;

    const massdiff_type&
    massdiff () const;

    massdiff_type&
    massdiff ();

    void
    massdiff (const massdiff_type& x);

    // masstol
    //
    typedef ::xml_schema::double_ masstol_type;
    typedef ::xsd::cxx::tree::traits< masstol_type, char, ::xsd::cxx::tree::schema_type::double_ > masstol_traits;

    const masstol_type&
    masstol () const;

    masstol_type&
    masstol ();

    void
    masstol (const masstol_type& x);

    // ppmtol
    //
    typedef ::xml_schema::double_ ppmtol_type;
    typedef ::xsd::cxx::tree::traits< ppmtol_type, char, ::xsd::cxx::tree::schema_type::double_ > ppmtol_traits;

    const ppmtol_type&
    ppmtol () const;

    ppmtol_type&
    ppmtol ();

    void
    ppmtol (const ppmtol_type& x);

    // min_num_chromatogram_points
    //
    typedef ::xml_schema::integer min_num_chromatogram_points_type;
    typedef ::xsd::cxx::tree::traits< min_num_chromatogram_points_type, char > min_num_chromatogram_points_traits;

    const min_num_chromatogram_points_type&
    min_num_chromatogram_points () const;

    min_num_chromatogram_points_type&
    min_num_chromatogram_points ();

    void
    min_num_chromatogram_points (const min_num_chromatogram_points_type& x);

    // min_num_isotope_peaks
    //
    typedef ::xml_schema::integer min_num_isotope_peaks_type;
    typedef ::xsd::cxx::tree::traits< min_num_isotope_peaks_type, char > min_num_isotope_peaks_traits;

    const min_num_isotope_peaks_type&
    min_num_isotope_peaks () const;

    min_num_isotope_peaks_type&
    min_num_isotope_peaks ();

    void
    min_num_isotope_peaks (const min_num_isotope_peaks_type& x);

    // Constructors.
    //
    xpressratio_summary ();

    xpressratio_summary (const version_type&,
                         const author_type&,
                         const same_scan_range_type&,
                         const labeled_residues_type&,
                         const xpress_light_type&,
                         const massdiff_type&,
                         const masstol_type&,
                         const ppmtol_type&,
                         const min_num_chromatogram_points_type&,
                         const min_num_isotope_peaks_type&);

    xpressratio_summary (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    xpressratio_summary (const xpressratio_summary& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual xpressratio_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    xpressratio_summary&
    operator= (const xpressratio_summary& x);

    virtual 
    ~xpressratio_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< version_type > version_;
    ::xsd::cxx::tree::one< author_type > author_;
    ::xsd::cxx::tree::one< same_scan_range_type > same_scan_range_;
    ::xsd::cxx::tree::one< labeled_residues_type > labeled_residues_;
    ::xsd::cxx::tree::one< xpress_light_type > xpress_light_;
    ::xsd::cxx::tree::one< massdiff_type > massdiff_;
    ::xsd::cxx::tree::one< masstol_type > masstol_;
    ::xsd::cxx::tree::one< ppmtol_type > ppmtol_;
    ::xsd::cxx::tree::one< min_num_chromatogram_points_type > min_num_chromatogram_points_;
    ::xsd::cxx::tree::one< min_num_isotope_peaks_type > min_num_isotope_peaks_;
  };

  class ptmprophet_result: public ::xml_schema::type
  {
    public:
    // mod_aminoacid_probability
    //
    typedef ::pepXML::mod_aminoacid_probability mod_aminoacid_probability_type;
    typedef ::xsd::cxx::tree::sequence< mod_aminoacid_probability_type > mod_aminoacid_probability_sequence;
    typedef mod_aminoacid_probability_sequence::iterator mod_aminoacid_probability_iterator;
    typedef mod_aminoacid_probability_sequence::const_iterator mod_aminoacid_probability_const_iterator;
    typedef ::xsd::cxx::tree::traits< mod_aminoacid_probability_type, char > mod_aminoacid_probability_traits;

    const mod_aminoacid_probability_sequence&
    mod_aminoacid_probability () const;

    mod_aminoacid_probability_sequence&
    mod_aminoacid_probability ();

    void
    mod_aminoacid_probability (const mod_aminoacid_probability_sequence& s);

    // prior
    //
    typedef ::xml_schema::double_ prior_type;
    typedef ::xsd::cxx::tree::traits< prior_type, char, ::xsd::cxx::tree::schema_type::double_ > prior_traits;

    const prior_type&
    prior () const;

    prior_type&
    prior ();

    void
    prior (const prior_type& x);

    // ptm
    //
    typedef ::xml_schema::string ptm_type;
    typedef ::xsd::cxx::tree::traits< ptm_type, char > ptm_traits;

    const ptm_type&
    ptm () const;

    ptm_type&
    ptm ();

    void
    ptm (const ptm_type& x);

    void
    ptm (::std::unique_ptr< ptm_type > p);

    // ptm_peptide
    //
    typedef ::xml_schema::string ptm_peptide_type;
    typedef ::xsd::cxx::tree::traits< ptm_peptide_type, char > ptm_peptide_traits;

    const ptm_peptide_type&
    ptm_peptide () const;

    ptm_peptide_type&
    ptm_peptide ();

    void
    ptm_peptide (const ptm_peptide_type& x);

    void
    ptm_peptide (::std::unique_ptr< ptm_peptide_type > p);

    // Constructors.
    //
    ptmprophet_result ();

    ptmprophet_result (const prior_type&,
                       const ptm_type&,
                       const ptm_peptide_type&);

    ptmprophet_result (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    ptmprophet_result (const ptmprophet_result& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual ptmprophet_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ptmprophet_result&
    operator= (const ptmprophet_result& x);

    virtual 
    ~ptmprophet_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    mod_aminoacid_probability_sequence mod_aminoacid_probability_;
    ::xsd::cxx::tree::one< prior_type > prior_;
    ::xsd::cxx::tree::one< ptm_type > ptm_;
    ::xsd::cxx::tree::one< ptm_peptide_type > ptm_peptide_;
  };

  class peptideprophet_result: public ::xml_schema::type
  {
    public:
    // search_score_summary
    //
    typedef ::pepXML::search_score_summary search_score_summary_type;
    typedef ::xsd::cxx::tree::optional< search_score_summary_type > search_score_summary_optional;
    typedef ::xsd::cxx::tree::traits< search_score_summary_type, char > search_score_summary_traits;

    const search_score_summary_optional&
    search_score_summary () const;

    search_score_summary_optional&
    search_score_summary ();

    void
    search_score_summary (const search_score_summary_type& x);

    void
    search_score_summary (const search_score_summary_optional& x);

    void
    search_score_summary (::std::unique_ptr< search_score_summary_type > p);

    // probability
    //
    typedef ::xml_schema::double_ probability_type;
    typedef ::xsd::cxx::tree::traits< probability_type, char, ::xsd::cxx::tree::schema_type::double_ > probability_traits;

    const probability_type&
    probability () const;

    probability_type&
    probability ();

    void
    probability (const probability_type& x);

    // all_ntt_prob
    //
    typedef ::xml_schema::string all_ntt_prob_type;
    typedef ::xsd::cxx::tree::optional< all_ntt_prob_type > all_ntt_prob_optional;
    typedef ::xsd::cxx::tree::traits< all_ntt_prob_type, char > all_ntt_prob_traits;

    const all_ntt_prob_optional&
    all_ntt_prob () const;

    all_ntt_prob_optional&
    all_ntt_prob ();

    void
    all_ntt_prob (const all_ntt_prob_type& x);

    void
    all_ntt_prob (const all_ntt_prob_optional& x);

    void
    all_ntt_prob (::std::unique_ptr< all_ntt_prob_type > p);

    // analysis
    //
    typedef ::xml_schema::string analysis_type;
    typedef ::xsd::cxx::tree::optional< analysis_type > analysis_optional;
    typedef ::xsd::cxx::tree::traits< analysis_type, char > analysis_traits;

    const analysis_optional&
    analysis () const;

    analysis_optional&
    analysis ();

    void
    analysis (const analysis_type& x);

    void
    analysis (const analysis_optional& x);

    void
    analysis (::std::unique_ptr< analysis_type > p);

    // Constructors.
    //
    peptideprophet_result ();

    peptideprophet_result (const probability_type&);

    peptideprophet_result (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    peptideprophet_result (const peptideprophet_result& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual peptideprophet_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    peptideprophet_result&
    operator= (const peptideprophet_result& x);

    virtual 
    ~peptideprophet_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    search_score_summary_optional search_score_summary_;
    ::xsd::cxx::tree::one< probability_type > probability_;
    all_ntt_prob_optional all_ntt_prob_;
    analysis_optional analysis_;
  };

  class interprophet_result: public ::xml_schema::type
  {
    public:
    // search_score_summary
    //
    typedef ::pepXML::search_score_summary search_score_summary_type;
    typedef ::xsd::cxx::tree::optional< search_score_summary_type > search_score_summary_optional;
    typedef ::xsd::cxx::tree::traits< search_score_summary_type, char > search_score_summary_traits;

    const search_score_summary_optional&
    search_score_summary () const;

    search_score_summary_optional&
    search_score_summary ();

    void
    search_score_summary (const search_score_summary_type& x);

    void
    search_score_summary (const search_score_summary_optional& x);

    void
    search_score_summary (::std::unique_ptr< search_score_summary_type > p);

    // probability
    //
    typedef ::xml_schema::double_ probability_type;
    typedef ::xsd::cxx::tree::traits< probability_type, char, ::xsd::cxx::tree::schema_type::double_ > probability_traits;

    const probability_type&
    probability () const;

    probability_type&
    probability ();

    void
    probability (const probability_type& x);

    // all_ntt_prob
    //
    typedef ::xml_schema::string all_ntt_prob_type;
    typedef ::xsd::cxx::tree::optional< all_ntt_prob_type > all_ntt_prob_optional;
    typedef ::xsd::cxx::tree::traits< all_ntt_prob_type, char > all_ntt_prob_traits;

    const all_ntt_prob_optional&
    all_ntt_prob () const;

    all_ntt_prob_optional&
    all_ntt_prob ();

    void
    all_ntt_prob (const all_ntt_prob_type& x);

    void
    all_ntt_prob (const all_ntt_prob_optional& x);

    void
    all_ntt_prob (::std::unique_ptr< all_ntt_prob_type > p);

    // Constructors.
    //
    interprophet_result ();

    interprophet_result (const probability_type&);

    interprophet_result (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    interprophet_result (const interprophet_result& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual interprophet_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    interprophet_result&
    operator= (const interprophet_result& x);

    virtual 
    ~interprophet_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    search_score_summary_optional search_score_summary_;
    ::xsd::cxx::tree::one< probability_type > probability_;
    all_ntt_prob_optional all_ntt_prob_;
  };

  class asapratio_result: public ::xml_schema::type
  {
    public:
    // asapratio_peptide_data
    //
    typedef ::pepXML::asapratio_peptide_data asapratio_peptide_data_type;
    typedef ::xsd::cxx::tree::traits< asapratio_peptide_data_type, char > asapratio_peptide_data_traits;

    const asapratio_peptide_data_type&
    asapratio_peptide_data () const;

    asapratio_peptide_data_type&
    asapratio_peptide_data ();

    void
    asapratio_peptide_data (const asapratio_peptide_data_type& x);

    void
    asapratio_peptide_data (::std::unique_ptr< asapratio_peptide_data_type > p);

    // mean
    //
    typedef ::xml_schema::double_ mean_type;
    typedef ::xsd::cxx::tree::traits< mean_type, char, ::xsd::cxx::tree::schema_type::double_ > mean_traits;

    const mean_type&
    mean () const;

    mean_type&
    mean ();

    void
    mean (const mean_type& x);

    // error
    //
    typedef ::xml_schema::double_ error_type;
    typedef ::xsd::cxx::tree::traits< error_type, char, ::xsd::cxx::tree::schema_type::double_ > error_traits;

    const error_type&
    error () const;

    error_type&
    error ();

    void
    error (const error_type& x);

    // heavy2light_mean
    //
    typedef ::xml_schema::double_ heavy2light_mean_type;
    typedef ::xsd::cxx::tree::traits< heavy2light_mean_type, char, ::xsd::cxx::tree::schema_type::double_ > heavy2light_mean_traits;

    const heavy2light_mean_type&
    heavy2light_mean () const;

    heavy2light_mean_type&
    heavy2light_mean ();

    void
    heavy2light_mean (const heavy2light_mean_type& x);

    // heavy2light_error
    //
    typedef ::xml_schema::double_ heavy2light_error_type;
    typedef ::xsd::cxx::tree::traits< heavy2light_error_type, char, ::xsd::cxx::tree::schema_type::double_ > heavy2light_error_traits;

    const heavy2light_error_type&
    heavy2light_error () const;

    heavy2light_error_type&
    heavy2light_error ();

    void
    heavy2light_error (const heavy2light_error_type& x);

    // Constructors.
    //
    asapratio_result ();

    asapratio_result (const asapratio_peptide_data_type&,
                      const mean_type&,
                      const error_type&,
                      const heavy2light_mean_type&,
                      const heavy2light_error_type&);

    asapratio_result (::std::unique_ptr< asapratio_peptide_data_type >,
                      const mean_type&,
                      const error_type&,
                      const heavy2light_mean_type&,
                      const heavy2light_error_type&);

    asapratio_result (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    asapratio_result (const asapratio_result& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual asapratio_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_result&
    operator= (const asapratio_result& x);

    virtual 
    ~asapratio_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< asapratio_peptide_data_type > asapratio_peptide_data_;
    ::xsd::cxx::tree::one< mean_type > mean_;
    ::xsd::cxx::tree::one< error_type > error_;
    ::xsd::cxx::tree::one< heavy2light_mean_type > heavy2light_mean_;
    ::xsd::cxx::tree::one< heavy2light_error_type > heavy2light_error_;
  };

  class asapratio_peptide_data: public ::xml_schema::type
  {
    public:
    // asapratio_contribution
    //
    typedef ::pepXML::asapratio_contribution asapratio_contribution_type;
    typedef ::xsd::cxx::tree::sequence< asapratio_contribution_type > asapratio_contribution_sequence;
    typedef asapratio_contribution_sequence::iterator asapratio_contribution_iterator;
    typedef asapratio_contribution_sequence::const_iterator asapratio_contribution_const_iterator;
    typedef ::xsd::cxx::tree::traits< asapratio_contribution_type, char > asapratio_contribution_traits;

    const asapratio_contribution_sequence&
    asapratio_contribution () const;

    asapratio_contribution_sequence&
    asapratio_contribution ();

    void
    asapratio_contribution (const asapratio_contribution_sequence& s);

    // status
    //
    typedef ::xml_schema::byte status_type;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_type&
    status () const;

    status_type&
    status ();

    void
    status (const status_type& x);

    // cidIndex
    //
    typedef ::xml_schema::int_ cidIndex_type;
    typedef ::xsd::cxx::tree::traits< cidIndex_type, char > cidIndex_traits;

    const cidIndex_type&
    cidIndex () const;

    cidIndex_type&
    cidIndex ();

    void
    cidIndex (const cidIndex_type& x);

    // light_mass
    //
    typedef ::xml_schema::double_ light_mass_type;
    typedef ::xsd::cxx::tree::traits< light_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > light_mass_traits;

    const light_mass_type&
    light_mass () const;

    light_mass_type&
    light_mass ();

    void
    light_mass (const light_mass_type& x);

    // heavy_mass
    //
    typedef ::xml_schema::double_ heavy_mass_type;
    typedef ::xsd::cxx::tree::traits< heavy_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > heavy_mass_traits;

    const heavy_mass_type&
    heavy_mass () const;

    heavy_mass_type&
    heavy_mass ();

    void
    heavy_mass (const heavy_mass_type& x);

    // area_flag
    //
    typedef ::xml_schema::unsigned_int area_flag_type;
    typedef ::xsd::cxx::tree::traits< area_flag_type, char > area_flag_traits;

    const area_flag_type&
    area_flag () const;

    area_flag_type&
    area_flag ();

    void
    area_flag (const area_flag_type& x);

    // Constructors.
    //
    asapratio_peptide_data ();

    asapratio_peptide_data (const status_type&,
                            const cidIndex_type&,
                            const light_mass_type&,
                            const heavy_mass_type&,
                            const area_flag_type&);

    asapratio_peptide_data (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    asapratio_peptide_data (const asapratio_peptide_data& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual asapratio_peptide_data*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_peptide_data&
    operator= (const asapratio_peptide_data& x);

    virtual 
    ~asapratio_peptide_data ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    asapratio_contribution_sequence asapratio_contribution_;
    ::xsd::cxx::tree::one< status_type > status_;
    ::xsd::cxx::tree::one< cidIndex_type > cidIndex_;
    ::xsd::cxx::tree::one< light_mass_type > light_mass_;
    ::xsd::cxx::tree::one< heavy_mass_type > heavy_mass_;
    ::xsd::cxx::tree::one< area_flag_type > area_flag_;
  };

  class asapratio_contribution: public ::xml_schema::type
  {
    public:
    // asapratio_lc_lightpeak
    //
    typedef ::pepXML::asapratio_lc_lightpeak asapratio_lc_lightpeak_type;
    typedef ::xsd::cxx::tree::traits< asapratio_lc_lightpeak_type, char > asapratio_lc_lightpeak_traits;

    const asapratio_lc_lightpeak_type&
    asapratio_lc_lightpeak () const;

    asapratio_lc_lightpeak_type&
    asapratio_lc_lightpeak ();

    void
    asapratio_lc_lightpeak (const asapratio_lc_lightpeak_type& x);

    void
    asapratio_lc_lightpeak (::std::unique_ptr< asapratio_lc_lightpeak_type > p);

    // asapratio_lc_heavypeak
    //
    typedef ::pepXML::asapratio_lc_heavypeak asapratio_lc_heavypeak_type;
    typedef ::xsd::cxx::tree::traits< asapratio_lc_heavypeak_type, char > asapratio_lc_heavypeak_traits;

    const asapratio_lc_heavypeak_type&
    asapratio_lc_heavypeak () const;

    asapratio_lc_heavypeak_type&
    asapratio_lc_heavypeak ();

    void
    asapratio_lc_heavypeak (const asapratio_lc_heavypeak_type& x);

    void
    asapratio_lc_heavypeak (::std::unique_ptr< asapratio_lc_heavypeak_type > p);

    // ratio
    //
    typedef ::xml_schema::double_ ratio_type;
    typedef ::xsd::cxx::tree::traits< ratio_type, char, ::xsd::cxx::tree::schema_type::double_ > ratio_traits;

    const ratio_type&
    ratio () const;

    ratio_type&
    ratio ();

    void
    ratio (const ratio_type& x);

    // error
    //
    typedef ::xml_schema::double_ error_type;
    typedef ::xsd::cxx::tree::traits< error_type, char, ::xsd::cxx::tree::schema_type::double_ > error_traits;

    const error_type&
    error () const;

    error_type&
    error ();

    void
    error (const error_type& x);

    // charge
    //
    typedef ::xml_schema::non_negative_integer charge_type;
    typedef ::xsd::cxx::tree::traits< charge_type, char > charge_traits;

    const charge_type&
    charge () const;

    charge_type&
    charge ();

    void
    charge (const charge_type& x);

    // use
    //
    typedef ::xml_schema::unsigned_byte use_type;
    typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

    const use_type&
    use () const;

    use_type&
    use ();

    void
    use (const use_type& x);

    // Constructors.
    //
    asapratio_contribution ();

    asapratio_contribution (const asapratio_lc_lightpeak_type&,
                            const asapratio_lc_heavypeak_type&,
                            const ratio_type&,
                            const error_type&,
                            const charge_type&,
                            const use_type&);

    asapratio_contribution (::std::unique_ptr< asapratio_lc_lightpeak_type >,
                            ::std::unique_ptr< asapratio_lc_heavypeak_type >,
                            const ratio_type&,
                            const error_type&,
                            const charge_type&,
                            const use_type&);

    asapratio_contribution (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    asapratio_contribution (const asapratio_contribution& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual asapratio_contribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_contribution&
    operator= (const asapratio_contribution& x);

    virtual 
    ~asapratio_contribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< asapratio_lc_lightpeak_type > asapratio_lc_lightpeak_;
    ::xsd::cxx::tree::one< asapratio_lc_heavypeak_type > asapratio_lc_heavypeak_;
    ::xsd::cxx::tree::one< ratio_type > ratio_;
    ::xsd::cxx::tree::one< error_type > error_;
    ::xsd::cxx::tree::one< charge_type > charge_;
    ::xsd::cxx::tree::one< use_type > use_;
  };

  class asapratio_lc_lightpeak: public ::xml_schema::type
  {
    public:
    // status
    //
    typedef ::xml_schema::byte status_type;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_type&
    status () const;

    status_type&
    status ();

    void
    status (const status_type& x);

    // left_valley
    //
    typedef ::xml_schema::int_ left_valley_type;
    typedef ::xsd::cxx::tree::traits< left_valley_type, char > left_valley_traits;

    const left_valley_type&
    left_valley () const;

    left_valley_type&
    left_valley ();

    void
    left_valley (const left_valley_type& x);

    // right_valley
    //
    typedef ::xml_schema::int_ right_valley_type;
    typedef ::xsd::cxx::tree::traits< right_valley_type, char > right_valley_traits;

    const right_valley_type&
    right_valley () const;

    right_valley_type&
    right_valley ();

    void
    right_valley (const right_valley_type& x);

    // background
    //
    typedef ::xml_schema::double_ background_type;
    typedef ::xsd::cxx::tree::traits< background_type, char, ::xsd::cxx::tree::schema_type::double_ > background_traits;

    const background_type&
    background () const;

    background_type&
    background ();

    void
    background (const background_type& x);

    // area
    //
    typedef ::xml_schema::double_ area_type;
    typedef ::xsd::cxx::tree::traits< area_type, char, ::xsd::cxx::tree::schema_type::double_ > area_traits;

    const area_type&
    area () const;

    area_type&
    area ();

    void
    area (const area_type& x);

    // area_error
    //
    typedef ::xml_schema::double_ area_error_type;
    typedef ::xsd::cxx::tree::traits< area_error_type, char, ::xsd::cxx::tree::schema_type::double_ > area_error_traits;

    const area_error_type&
    area_error () const;

    area_error_type&
    area_error ();

    void
    area_error (const area_error_type& x);

    // time
    //
    typedef ::xml_schema::double_ time_type;
    typedef ::xsd::cxx::tree::traits< time_type, char, ::xsd::cxx::tree::schema_type::double_ > time_traits;

    const time_type&
    time () const;

    time_type&
    time ();

    void
    time (const time_type& x);

    // time_width
    //
    typedef ::xml_schema::double_ time_width_type;
    typedef ::xsd::cxx::tree::traits< time_width_type, char, ::xsd::cxx::tree::schema_type::double_ > time_width_traits;

    const time_width_type&
    time_width () const;

    time_width_type&
    time_width ();

    void
    time_width (const time_width_type& x);

    // is_heavy
    //
    typedef ::xml_schema::string is_heavy_type;
    typedef ::xsd::cxx::tree::traits< is_heavy_type, char > is_heavy_traits;

    const is_heavy_type&
    is_heavy () const;

    is_heavy_type&
    is_heavy ();

    void
    is_heavy (const is_heavy_type& x);

    void
    is_heavy (::std::unique_ptr< is_heavy_type > p);

    // Constructors.
    //
    asapratio_lc_lightpeak ();

    asapratio_lc_lightpeak (const status_type&,
                            const left_valley_type&,
                            const right_valley_type&,
                            const background_type&,
                            const area_type&,
                            const area_error_type&,
                            const time_type&,
                            const time_width_type&,
                            const is_heavy_type&);

    asapratio_lc_lightpeak (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    asapratio_lc_lightpeak (const asapratio_lc_lightpeak& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual asapratio_lc_lightpeak*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_lc_lightpeak&
    operator= (const asapratio_lc_lightpeak& x);

    virtual 
    ~asapratio_lc_lightpeak ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< status_type > status_;
    ::xsd::cxx::tree::one< left_valley_type > left_valley_;
    ::xsd::cxx::tree::one< right_valley_type > right_valley_;
    ::xsd::cxx::tree::one< background_type > background_;
    ::xsd::cxx::tree::one< area_type > area_;
    ::xsd::cxx::tree::one< area_error_type > area_error_;
    ::xsd::cxx::tree::one< time_type > time_;
    ::xsd::cxx::tree::one< time_width_type > time_width_;
    ::xsd::cxx::tree::one< is_heavy_type > is_heavy_;
  };

  class asapratio_lc_heavypeak: public ::xml_schema::type
  {
    public:
    // status
    //
    typedef ::xml_schema::byte status_type;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_type&
    status () const;

    status_type&
    status ();

    void
    status (const status_type& x);

    // left_valley
    //
    typedef ::xml_schema::int_ left_valley_type;
    typedef ::xsd::cxx::tree::traits< left_valley_type, char > left_valley_traits;

    const left_valley_type&
    left_valley () const;

    left_valley_type&
    left_valley ();

    void
    left_valley (const left_valley_type& x);

    // right_valley
    //
    typedef ::xml_schema::int_ right_valley_type;
    typedef ::xsd::cxx::tree::traits< right_valley_type, char > right_valley_traits;

    const right_valley_type&
    right_valley () const;

    right_valley_type&
    right_valley ();

    void
    right_valley (const right_valley_type& x);

    // background
    //
    typedef ::xml_schema::double_ background_type;
    typedef ::xsd::cxx::tree::traits< background_type, char, ::xsd::cxx::tree::schema_type::double_ > background_traits;

    const background_type&
    background () const;

    background_type&
    background ();

    void
    background (const background_type& x);

    // area
    //
    typedef ::xml_schema::double_ area_type;
    typedef ::xsd::cxx::tree::traits< area_type, char, ::xsd::cxx::tree::schema_type::double_ > area_traits;

    const area_type&
    area () const;

    area_type&
    area ();

    void
    area (const area_type& x);

    // area_error
    //
    typedef ::xml_schema::double_ area_error_type;
    typedef ::xsd::cxx::tree::traits< area_error_type, char, ::xsd::cxx::tree::schema_type::double_ > area_error_traits;

    const area_error_type&
    area_error () const;

    area_error_type&
    area_error ();

    void
    area_error (const area_error_type& x);

    // time
    //
    typedef ::xml_schema::double_ time_type;
    typedef ::xsd::cxx::tree::traits< time_type, char, ::xsd::cxx::tree::schema_type::double_ > time_traits;

    const time_type&
    time () const;

    time_type&
    time ();

    void
    time (const time_type& x);

    // time_width
    //
    typedef ::xml_schema::double_ time_width_type;
    typedef ::xsd::cxx::tree::traits< time_width_type, char, ::xsd::cxx::tree::schema_type::double_ > time_width_traits;

    const time_width_type&
    time_width () const;

    time_width_type&
    time_width ();

    void
    time_width (const time_width_type& x);

    // is_heavy
    //
    typedef ::xml_schema::string is_heavy_type;
    typedef ::xsd::cxx::tree::traits< is_heavy_type, char > is_heavy_traits;

    const is_heavy_type&
    is_heavy () const;

    is_heavy_type&
    is_heavy ();

    void
    is_heavy (const is_heavy_type& x);

    void
    is_heavy (::std::unique_ptr< is_heavy_type > p);

    // Constructors.
    //
    asapratio_lc_heavypeak ();

    asapratio_lc_heavypeak (const status_type&,
                            const left_valley_type&,
                            const right_valley_type&,
                            const background_type&,
                            const area_type&,
                            const area_error_type&,
                            const time_type&,
                            const time_width_type&,
                            const is_heavy_type&);

    asapratio_lc_heavypeak (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    asapratio_lc_heavypeak (const asapratio_lc_heavypeak& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual asapratio_lc_heavypeak*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_lc_heavypeak&
    operator= (const asapratio_lc_heavypeak& x);

    virtual 
    ~asapratio_lc_heavypeak ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< status_type > status_;
    ::xsd::cxx::tree::one< left_valley_type > left_valley_;
    ::xsd::cxx::tree::one< right_valley_type > right_valley_;
    ::xsd::cxx::tree::one< background_type > background_;
    ::xsd::cxx::tree::one< area_type > area_;
    ::xsd::cxx::tree::one< area_error_type > area_error_;
    ::xsd::cxx::tree::one< time_type > time_;
    ::xsd::cxx::tree::one< time_width_type > time_width_;
    ::xsd::cxx::tree::one< is_heavy_type > is_heavy_;
  };

  class database_refresh_timestamp: public ::xml_schema::type
  {
    public:
    // database
    //
    typedef ::xml_schema::string database_type;
    typedef ::xsd::cxx::tree::traits< database_type, char > database_traits;

    const database_type&
    database () const;

    database_type&
    database ();

    void
    database (const database_type& x);

    void
    database (::std::unique_ptr< database_type > p);

    // min_num_enz_term
    //
    typedef ::xml_schema::non_negative_integer min_num_enz_term_type;
    typedef ::xsd::cxx::tree::optional< min_num_enz_term_type > min_num_enz_term_optional;
    typedef ::xsd::cxx::tree::traits< min_num_enz_term_type, char > min_num_enz_term_traits;

    const min_num_enz_term_optional&
    min_num_enz_term () const;

    min_num_enz_term_optional&
    min_num_enz_term ();

    void
    min_num_enz_term (const min_num_enz_term_type& x);

    void
    min_num_enz_term (const min_num_enz_term_optional& x);

    // Constructors.
    //
    database_refresh_timestamp ();

    database_refresh_timestamp (const database_type&);

    database_refresh_timestamp (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    database_refresh_timestamp (const database_refresh_timestamp& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual database_refresh_timestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    database_refresh_timestamp&
    operator= (const database_refresh_timestamp& x);

    virtual 
    ~database_refresh_timestamp ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< database_type > database_;
    min_num_enz_term_optional min_num_enz_term_;
  };

  class xpressratio_timestamp: public ::xml_schema::type
  {
    public:
    // xpress_light
    //
    typedef ::xml_schema::integer xpress_light_type;
    typedef ::xsd::cxx::tree::traits< xpress_light_type, char > xpress_light_traits;

    const xpress_light_type&
    xpress_light () const;

    xpress_light_type&
    xpress_light ();

    void
    xpress_light (const xpress_light_type& x);

    // Constructors.
    //
    xpressratio_timestamp ();

    xpressratio_timestamp (const xpress_light_type&);

    xpressratio_timestamp (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    xpressratio_timestamp (const xpressratio_timestamp& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual xpressratio_timestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    xpressratio_timestamp&
    operator= (const xpressratio_timestamp& x);

    virtual 
    ~xpressratio_timestamp ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< xpress_light_type > xpress_light_;
  };

  class asapratio_timestamp: public ::xml_schema::type
  {
    public:
    // quant_label_masses
    //
    typedef ::xml_schema::string quant_label_masses_type;
    typedef ::xsd::cxx::tree::optional< quant_label_masses_type > quant_label_masses_optional;
    typedef ::xsd::cxx::tree::traits< quant_label_masses_type, char > quant_label_masses_traits;

    const quant_label_masses_optional&
    quant_label_masses () const;

    quant_label_masses_optional&
    quant_label_masses ();

    void
    quant_label_masses (const quant_label_masses_type& x);

    void
    quant_label_masses (const quant_label_masses_optional& x);

    void
    quant_label_masses (::std::unique_ptr< quant_label_masses_type > p);

    // static_quant_label
    //
    typedef ::xml_schema::string static_quant_label_type;
    typedef ::xsd::cxx::tree::optional< static_quant_label_type > static_quant_label_optional;
    typedef ::xsd::cxx::tree::traits< static_quant_label_type, char > static_quant_label_traits;

    const static_quant_label_optional&
    static_quant_label () const;

    static_quant_label_optional&
    static_quant_label ();

    void
    static_quant_label (const static_quant_label_type& x);

    void
    static_quant_label (const static_quant_label_optional& x);

    void
    static_quant_label (::std::unique_ptr< static_quant_label_type > p);

    // Constructors.
    //
    asapratio_timestamp ();

    asapratio_timestamp (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    asapratio_timestamp (const asapratio_timestamp& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual asapratio_timestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    asapratio_timestamp&
    operator= (const asapratio_timestamp& x);

    virtual 
    ~asapratio_timestamp ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quant_label_masses_optional quant_label_masses_;
    static_quant_label_optional static_quant_label_;
  };

  class xpressratio_result: public ::xml_schema::type
  {
    public:
    // light_firstscan
    //
    typedef ::xml_schema::unsigned_int light_firstscan_type;
    typedef ::xsd::cxx::tree::traits< light_firstscan_type, char > light_firstscan_traits;

    const light_firstscan_type&
    light_firstscan () const;

    light_firstscan_type&
    light_firstscan ();

    void
    light_firstscan (const light_firstscan_type& x);

    // light_lastscan
    //
    typedef ::xml_schema::unsigned_int light_lastscan_type;
    typedef ::xsd::cxx::tree::traits< light_lastscan_type, char > light_lastscan_traits;

    const light_lastscan_type&
    light_lastscan () const;

    light_lastscan_type&
    light_lastscan ();

    void
    light_lastscan (const light_lastscan_type& x);

    // light_mass
    //
    typedef ::xml_schema::double_ light_mass_type;
    typedef ::xsd::cxx::tree::traits< light_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > light_mass_traits;

    const light_mass_type&
    light_mass () const;

    light_mass_type&
    light_mass ();

    void
    light_mass (const light_mass_type& x);

    // heavy_firstscan
    //
    typedef ::xml_schema::unsigned_int heavy_firstscan_type;
    typedef ::xsd::cxx::tree::traits< heavy_firstscan_type, char > heavy_firstscan_traits;

    const heavy_firstscan_type&
    heavy_firstscan () const;

    heavy_firstscan_type&
    heavy_firstscan ();

    void
    heavy_firstscan (const heavy_firstscan_type& x);

    // heavy_lastscan
    //
    typedef ::xml_schema::unsigned_int heavy_lastscan_type;
    typedef ::xsd::cxx::tree::traits< heavy_lastscan_type, char > heavy_lastscan_traits;

    const heavy_lastscan_type&
    heavy_lastscan () const;

    heavy_lastscan_type&
    heavy_lastscan ();

    void
    heavy_lastscan (const heavy_lastscan_type& x);

    // heavy_mass
    //
    typedef ::xml_schema::double_ heavy_mass_type;
    typedef ::xsd::cxx::tree::traits< heavy_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > heavy_mass_traits;

    const heavy_mass_type&
    heavy_mass () const;

    heavy_mass_type&
    heavy_mass ();

    void
    heavy_mass (const heavy_mass_type& x);

    // mass_tol
    //
    typedef ::xml_schema::double_ mass_tol_type;
    typedef ::xsd::cxx::tree::traits< mass_tol_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_tol_traits;

    const mass_tol_type&
    mass_tol () const;

    mass_tol_type&
    mass_tol ();

    void
    mass_tol (const mass_tol_type& x);

    // ratio
    //
    typedef ::xml_schema::string ratio_type;
    typedef ::xsd::cxx::tree::traits< ratio_type, char > ratio_traits;

    const ratio_type&
    ratio () const;

    ratio_type&
    ratio ();

    void
    ratio (const ratio_type& x);

    void
    ratio (::std::unique_ptr< ratio_type > p);

    // heavy2light_ratio
    //
    typedef ::xml_schema::string heavy2light_ratio_type;
    typedef ::xsd::cxx::tree::traits< heavy2light_ratio_type, char > heavy2light_ratio_traits;

    const heavy2light_ratio_type&
    heavy2light_ratio () const;

    heavy2light_ratio_type&
    heavy2light_ratio ();

    void
    heavy2light_ratio (const heavy2light_ratio_type& x);

    void
    heavy2light_ratio (::std::unique_ptr< heavy2light_ratio_type > p);

    // light_area
    //
    typedef ::xml_schema::double_ light_area_type;
    typedef ::xsd::cxx::tree::traits< light_area_type, char, ::xsd::cxx::tree::schema_type::double_ > light_area_traits;

    const light_area_type&
    light_area () const;

    light_area_type&
    light_area ();

    void
    light_area (const light_area_type& x);

    // heavy_area
    //
    typedef ::xml_schema::double_ heavy_area_type;
    typedef ::xsd::cxx::tree::traits< heavy_area_type, char, ::xsd::cxx::tree::schema_type::double_ > heavy_area_traits;

    const heavy_area_type&
    heavy_area () const;

    heavy_area_type&
    heavy_area ();

    void
    heavy_area (const heavy_area_type& x);

    // decimal_ratio
    //
    typedef ::xml_schema::decimal decimal_ratio_type;
    typedef ::xsd::cxx::tree::traits< decimal_ratio_type, char, ::xsd::cxx::tree::schema_type::decimal > decimal_ratio_traits;

    const decimal_ratio_type&
    decimal_ratio () const;

    decimal_ratio_type&
    decimal_ratio ();

    void
    decimal_ratio (const decimal_ratio_type& x);

    // Constructors.
    //
    xpressratio_result ();

    xpressratio_result (const light_firstscan_type&,
                        const light_lastscan_type&,
                        const light_mass_type&,
                        const heavy_firstscan_type&,
                        const heavy_lastscan_type&,
                        const heavy_mass_type&,
                        const mass_tol_type&,
                        const ratio_type&,
                        const heavy2light_ratio_type&,
                        const light_area_type&,
                        const heavy_area_type&,
                        const decimal_ratio_type&);

    xpressratio_result (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    xpressratio_result (const xpressratio_result& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual xpressratio_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    xpressratio_result&
    operator= (const xpressratio_result& x);

    virtual 
    ~xpressratio_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< light_firstscan_type > light_firstscan_;
    ::xsd::cxx::tree::one< light_lastscan_type > light_lastscan_;
    ::xsd::cxx::tree::one< light_mass_type > light_mass_;
    ::xsd::cxx::tree::one< heavy_firstscan_type > heavy_firstscan_;
    ::xsd::cxx::tree::one< heavy_lastscan_type > heavy_lastscan_;
    ::xsd::cxx::tree::one< heavy_mass_type > heavy_mass_;
    ::xsd::cxx::tree::one< mass_tol_type > mass_tol_;
    ::xsd::cxx::tree::one< ratio_type > ratio_;
    ::xsd::cxx::tree::one< heavy2light_ratio_type > heavy2light_ratio_;
    ::xsd::cxx::tree::one< light_area_type > light_area_;
    ::xsd::cxx::tree::one< heavy_area_type > heavy_area_;
    ::xsd::cxx::tree::one< decimal_ratio_type > decimal_ratio_;
  };

  class interact_summary: public ::xml_schema::type
  {
    public:
    // inputfile
    //
    typedef ::pepXML::inputFileType inputfile_type;
    typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
    typedef inputfile_sequence::iterator inputfile_iterator;
    typedef inputfile_sequence::const_iterator inputfile_const_iterator;
    typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

    const inputfile_sequence&
    inputfile () const;

    inputfile_sequence&
    inputfile ();

    void
    inputfile (const inputfile_sequence& s);

    // filename
    //
    typedef ::xml_schema::string filename_type;
    typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

    const filename_type&
    filename () const;

    filename_type&
    filename ();

    void
    filename (const filename_type& x);

    void
    filename (::std::unique_ptr< filename_type > p);

    // directory
    //
    typedef ::xml_schema::string directory_type;
    typedef ::xsd::cxx::tree::traits< directory_type, char > directory_traits;

    const directory_type&
    directory () const;

    directory_type&
    directory ();

    void
    directory (const directory_type& x);

    void
    directory (::std::unique_ptr< directory_type > p);

    // Constructors.
    //
    interact_summary ();

    interact_summary (const filename_type&,
                      const directory_type&);

    interact_summary (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    interact_summary (const interact_summary& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual interact_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    interact_summary&
    operator= (const interact_summary& x);

    virtual 
    ~interact_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    inputfile_sequence inputfile_;
    ::xsd::cxx::tree::one< filename_type > filename_;
    ::xsd::cxx::tree::one< directory_type > directory_;
  };

  class libra_result: public ::xml_schema::type
  {
    public:
    // intensity
    //
    typedef ::pepXML::intensity intensity_type;
    typedef ::xsd::cxx::tree::sequence< intensity_type > intensity_sequence;
    typedef intensity_sequence::iterator intensity_iterator;
    typedef intensity_sequence::const_iterator intensity_const_iterator;
    typedef ::xsd::cxx::tree::traits< intensity_type, char > intensity_traits;

    const intensity_sequence&
    intensity () const;

    intensity_sequence&
    intensity ();

    void
    intensity (const intensity_sequence& s);

    // is_rejected
    //
    typedef ::xml_schema::boolean is_rejected_type;
    typedef ::xsd::cxx::tree::traits< is_rejected_type, char > is_rejected_traits;

    const is_rejected_type&
    is_rejected () const;

    is_rejected_type&
    is_rejected ();

    void
    is_rejected (const is_rejected_type& x);

    static is_rejected_type
    is_rejected_default_value ();

    // Constructors.
    //
    libra_result ();

    libra_result (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    libra_result (const libra_result& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual libra_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    libra_result&
    operator= (const libra_result& x);

    virtual 
    ~libra_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    intensity_sequence intensity_;
    ::xsd::cxx::tree::one< is_rejected_type > is_rejected_;
  };

  class libra_summary: public ::xml_schema::type
  {
    public:
    // fragment_masses
    //
    typedef ::pepXML::fragment_masses fragment_masses_type;
    typedef ::xsd::cxx::tree::sequence< fragment_masses_type > fragment_masses_sequence;
    typedef fragment_masses_sequence::iterator fragment_masses_iterator;
    typedef fragment_masses_sequence::const_iterator fragment_masses_const_iterator;
    typedef ::xsd::cxx::tree::traits< fragment_masses_type, char > fragment_masses_traits;

    const fragment_masses_sequence&
    fragment_masses () const;

    fragment_masses_sequence&
    fragment_masses ();

    void
    fragment_masses (const fragment_masses_sequence& s);

    // isotopic_contributions
    //
    typedef ::pepXML::isotopic_contributions isotopic_contributions_type;
    typedef ::xsd::cxx::tree::optional< isotopic_contributions_type > isotopic_contributions_optional;
    typedef ::xsd::cxx::tree::traits< isotopic_contributions_type, char > isotopic_contributions_traits;

    const isotopic_contributions_optional&
    isotopic_contributions () const;

    isotopic_contributions_optional&
    isotopic_contributions ();

    void
    isotopic_contributions (const isotopic_contributions_type& x);

    void
    isotopic_contributions (const isotopic_contributions_optional& x);

    void
    isotopic_contributions (::std::unique_ptr< isotopic_contributions_type > p);

    // mass_tolerance
    //
    typedef ::xml_schema::double_ mass_tolerance_type;
    typedef ::xsd::cxx::tree::traits< mass_tolerance_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_tolerance_traits;

    const mass_tolerance_type&
    mass_tolerance () const;

    mass_tolerance_type&
    mass_tolerance ();

    void
    mass_tolerance (const mass_tolerance_type& x);

    // centroiding_preference
    //
    typedef ::xml_schema::int_ centroiding_preference_type;
    typedef ::xsd::cxx::tree::traits< centroiding_preference_type, char > centroiding_preference_traits;

    const centroiding_preference_type&
    centroiding_preference () const;

    centroiding_preference_type&
    centroiding_preference ();

    void
    centroiding_preference (const centroiding_preference_type& x);

    // normalization
    //
    typedef ::xml_schema::int_ normalization_type;
    typedef ::xsd::cxx::tree::traits< normalization_type, char > normalization_traits;

    const normalization_type&
    normalization () const;

    normalization_type&
    normalization ();

    void
    normalization (const normalization_type& x);

    // output_type
    //
    typedef ::xml_schema::int_ output_type_type;
    typedef ::xsd::cxx::tree::traits< output_type_type, char > output_type_traits;

    const output_type_type&
    output_type () const;

    output_type_type&
    output_type ();

    void
    output_type (const output_type_type& x);

    // channel_code
    //
    typedef ::xml_schema::string channel_code_type;
    typedef ::xsd::cxx::tree::optional< channel_code_type > channel_code_optional;
    typedef ::xsd::cxx::tree::traits< channel_code_type, char > channel_code_traits;

    const channel_code_optional&
    channel_code () const;

    channel_code_optional&
    channel_code ();

    void
    channel_code (const channel_code_type& x);

    void
    channel_code (const channel_code_optional& x);

    void
    channel_code (::std::unique_ptr< channel_code_type > p);

    // Constructors.
    //
    libra_summary ();

    libra_summary (const mass_tolerance_type&,
                   const centroiding_preference_type&,
                   const normalization_type&,
                   const output_type_type&);

    libra_summary (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    libra_summary (const libra_summary& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual libra_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    libra_summary&
    operator= (const libra_summary& x);

    virtual 
    ~libra_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    fragment_masses_sequence fragment_masses_;
    isotopic_contributions_optional isotopic_contributions_;
    ::xsd::cxx::tree::one< mass_tolerance_type > mass_tolerance_;
    ::xsd::cxx::tree::one< centroiding_preference_type > centroiding_preference_;
    ::xsd::cxx::tree::one< normalization_type > normalization_;
    ::xsd::cxx::tree::one< output_type_type > output_type_;
    channel_code_optional channel_code_;
  };

  class roc_data_point: public ::xml_schema::type
  {
    public:
    // min_prob
    //
    typedef ::xml_schema::double_ min_prob_type;
    typedef ::xsd::cxx::tree::traits< min_prob_type, char, ::xsd::cxx::tree::schema_type::double_ > min_prob_traits;

    const min_prob_type&
    min_prob () const;

    min_prob_type&
    min_prob ();

    void
    min_prob (const min_prob_type& x);

    // sensitivity
    //
    typedef ::xml_schema::double_ sensitivity_type;
    typedef ::xsd::cxx::tree::traits< sensitivity_type, char, ::xsd::cxx::tree::schema_type::double_ > sensitivity_traits;

    const sensitivity_type&
    sensitivity () const;

    sensitivity_type&
    sensitivity ();

    void
    sensitivity (const sensitivity_type& x);

    // error
    //
    typedef ::xml_schema::double_ error_type;
    typedef ::xsd::cxx::tree::traits< error_type, char, ::xsd::cxx::tree::schema_type::double_ > error_traits;

    const error_type&
    error () const;

    error_type&
    error ();

    void
    error (const error_type& x);

    // num_corr
    //
    typedef ::xml_schema::unsigned_int num_corr_type;
    typedef ::xsd::cxx::tree::traits< num_corr_type, char > num_corr_traits;

    const num_corr_type&
    num_corr () const;

    num_corr_type&
    num_corr ();

    void
    num_corr (const num_corr_type& x);

    // num_incorr
    //
    typedef ::xml_schema::unsigned_int num_incorr_type;
    typedef ::xsd::cxx::tree::traits< num_incorr_type, char > num_incorr_traits;

    const num_incorr_type&
    num_incorr () const;

    num_incorr_type&
    num_incorr ();

    void
    num_incorr (const num_incorr_type& x);

    // Constructors.
    //
    roc_data_point ();

    roc_data_point (const min_prob_type&,
                    const sensitivity_type&,
                    const error_type&,
                    const num_corr_type&,
                    const num_incorr_type&);

    roc_data_point (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    roc_data_point (const roc_data_point& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual roc_data_point*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    roc_data_point&
    operator= (const roc_data_point& x);

    virtual 
    ~roc_data_point ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< min_prob_type > min_prob_;
    ::xsd::cxx::tree::one< sensitivity_type > sensitivity_;
    ::xsd::cxx::tree::one< error_type > error_;
    ::xsd::cxx::tree::one< num_corr_type > num_corr_;
    ::xsd::cxx::tree::one< num_incorr_type > num_incorr_;
  };

  class error_point: public ::xml_schema::type
  {
    public:
    // error
    //
    typedef ::xml_schema::double_ error_type;
    typedef ::xsd::cxx::tree::traits< error_type, char, ::xsd::cxx::tree::schema_type::double_ > error_traits;

    const error_type&
    error () const;

    error_type&
    error ();

    void
    error (const error_type& x);

    // min_prob
    //
    typedef ::xml_schema::double_ min_prob_type;
    typedef ::xsd::cxx::tree::traits< min_prob_type, char, ::xsd::cxx::tree::schema_type::double_ > min_prob_traits;

    const min_prob_type&
    min_prob () const;

    min_prob_type&
    min_prob ();

    void
    min_prob (const min_prob_type& x);

    // num_corr
    //
    typedef ::xml_schema::unsigned_int num_corr_type;
    typedef ::xsd::cxx::tree::traits< num_corr_type, char > num_corr_traits;

    const num_corr_type&
    num_corr () const;

    num_corr_type&
    num_corr ();

    void
    num_corr (const num_corr_type& x);

    // num_incorr
    //
    typedef ::xml_schema::unsigned_int num_incorr_type;
    typedef ::xsd::cxx::tree::traits< num_incorr_type, char > num_incorr_traits;

    const num_incorr_type&
    num_incorr () const;

    num_incorr_type&
    num_incorr ();

    void
    num_incorr (const num_incorr_type& x);

    // Constructors.
    //
    error_point ();

    error_point (const error_type&,
                 const min_prob_type&,
                 const num_corr_type&,
                 const num_incorr_type&);

    error_point (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    error_point (const error_point& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual error_point*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    error_point&
    operator= (const error_point& x);

    virtual 
    ~error_point ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< error_type > error_;
    ::xsd::cxx::tree::one< min_prob_type > min_prob_;
    ::xsd::cxx::tree::one< num_corr_type > num_corr_;
    ::xsd::cxx::tree::one< num_incorr_type > num_incorr_;
  };

  class point: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    // pos_dens
    //
    typedef ::xml_schema::double_ pos_dens_type;
    typedef ::xsd::cxx::tree::optional< pos_dens_type > pos_dens_optional;
    typedef ::xsd::cxx::tree::traits< pos_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_dens_traits;

    const pos_dens_optional&
    pos_dens () const;

    pos_dens_optional&
    pos_dens ();

    void
    pos_dens (const pos_dens_type& x);

    void
    pos_dens (const pos_dens_optional& x);

    // neg_dens
    //
    typedef ::xml_schema::double_ neg_dens_type;
    typedef ::xsd::cxx::tree::optional< neg_dens_type > neg_dens_optional;
    typedef ::xsd::cxx::tree::traits< neg_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > neg_dens_traits;

    const neg_dens_optional&
    neg_dens () const;

    neg_dens_optional&
    neg_dens ();

    void
    neg_dens (const neg_dens_type& x);

    void
    neg_dens (const neg_dens_optional& x);

    // neg_obs_dens
    //
    typedef ::xml_schema::double_ neg_obs_dens_type;
    typedef ::xsd::cxx::tree::optional< neg_obs_dens_type > neg_obs_dens_optional;
    typedef ::xsd::cxx::tree::traits< neg_obs_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > neg_obs_dens_traits;

    const neg_obs_dens_optional&
    neg_obs_dens () const;

    neg_obs_dens_optional&
    neg_obs_dens ();

    void
    neg_obs_dens (const neg_obs_dens_type& x);

    void
    neg_obs_dens (const neg_obs_dens_optional& x);

    // pos_obs_dens
    //
    typedef ::xml_schema::double_ pos_obs_dens_type;
    typedef ::xsd::cxx::tree::optional< pos_obs_dens_type > pos_obs_dens_optional;
    typedef ::xsd::cxx::tree::traits< pos_obs_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_obs_dens_traits;

    const pos_obs_dens_optional&
    pos_obs_dens () const;

    pos_obs_dens_optional&
    pos_obs_dens ();

    void
    pos_obs_dens (const pos_obs_dens_type& x);

    void
    pos_obs_dens (const pos_obs_dens_optional& x);

    // Constructors.
    //
    point ();

    point (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    point (const point& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual point*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    point&
    operator= (const point& x);

    virtual 
    ~point ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    value_optional value_;
    pos_dens_optional pos_dens_;
    neg_dens_optional neg_dens_;
    neg_obs_dens_optional neg_obs_dens_;
    pos_obs_dens_optional pos_obs_dens_;
  };

  class mod_aminoacid_mass: public ::xml_schema::type
  {
    public:
    // position
    //
    typedef ::xml_schema::non_negative_integer position_type;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_type&
    position () const;

    position_type&
    position ();

    void
    position (const position_type& x);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // source
    //
    typedef ::xml_schema::string source_type;
    typedef ::xsd::cxx::tree::optional< source_type > source_optional;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_optional&
    source () const;

    source_optional&
    source ();

    void
    source (const source_type& x);

    void
    source (const source_optional& x);

    void
    source (::std::unique_ptr< source_type > p);

    // Constructors.
    //
    mod_aminoacid_mass ();

    mod_aminoacid_mass (const position_type&,
                        const mass_type&);

    mod_aminoacid_mass (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    mod_aminoacid_mass (const mod_aminoacid_mass& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual mod_aminoacid_mass*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mod_aminoacid_mass&
    operator= (const mod_aminoacid_mass& x);

    virtual 
    ~mod_aminoacid_mass ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< position_type > position_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    source_optional source_;
  };

  class analysis_summary: public ::xml_schema::type
  {
    public:
    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_type&
    time () const;

    time_type&
    time ();

    void
    time (const time_type& x);

    void
    time (::std::unique_ptr< time_type > p);

    // analysis
    //
    typedef ::xml_schema::string analysis_type;
    typedef ::xsd::cxx::tree::traits< analysis_type, char > analysis_traits;

    const analysis_type&
    analysis () const;

    analysis_type&
    analysis ();

    void
    analysis (const analysis_type& x);

    void
    analysis (::std::unique_ptr< analysis_type > p);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::optional< version_type > version_optional;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_optional&
    version () const;

    version_optional&
    version ();

    void
    version (const version_type& x);

    void
    version (const version_optional& x);

    void
    version (::std::unique_ptr< version_type > p);

    // Constructors.
    //
    analysis_summary ();

    analysis_summary (const time_type&,
                      const analysis_type&);

    analysis_summary (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    analysis_summary (const analysis_summary& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual analysis_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    analysis_summary&
    operator= (const analysis_summary& x);

    virtual 
    ~analysis_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    parameter_sequence parameter_;
    ::xsd::cxx::tree::one< time_type > time_;
    ::xsd::cxx::tree::one< analysis_type > analysis_;
    version_optional version_;
  };

  class dataset_derivation: public ::xml_schema::type
  {
    public:
    // data_filter
    //
    typedef ::pepXML::data_filter data_filter_type;
    typedef ::xsd::cxx::tree::sequence< data_filter_type > data_filter_sequence;
    typedef data_filter_sequence::iterator data_filter_iterator;
    typedef data_filter_sequence::const_iterator data_filter_const_iterator;
    typedef ::xsd::cxx::tree::traits< data_filter_type, char > data_filter_traits;

    const data_filter_sequence&
    data_filter () const;

    data_filter_sequence&
    data_filter ();

    void
    data_filter (const data_filter_sequence& s);

    // generation_no
    //
    typedef ::xml_schema::non_negative_integer generation_no_type;
    typedef ::xsd::cxx::tree::traits< generation_no_type, char > generation_no_traits;

    const generation_no_type&
    generation_no () const;

    generation_no_type&
    generation_no ();

    void
    generation_no (const generation_no_type& x);

    // Constructors.
    //
    dataset_derivation ();

    dataset_derivation (const generation_no_type&);

    dataset_derivation (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    dataset_derivation (const dataset_derivation& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual dataset_derivation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dataset_derivation&
    operator= (const dataset_derivation& x);

    virtual 
    ~dataset_derivation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    data_filter_sequence data_filter_;
    ::xsd::cxx::tree::one< generation_no_type > generation_no_;
  };

  class msms_run_summary: public ::xml_schema::type
  {
    public:
    // sample_enzyme
    //
    typedef ::pepXML::sample_enzyme sample_enzyme_type;
    typedef ::xsd::cxx::tree::optional< sample_enzyme_type > sample_enzyme_optional;
    typedef ::xsd::cxx::tree::traits< sample_enzyme_type, char > sample_enzyme_traits;

    const sample_enzyme_optional&
    sample_enzyme () const;

    sample_enzyme_optional&
    sample_enzyme ();

    void
    sample_enzyme (const sample_enzyme_type& x);

    void
    sample_enzyme (const sample_enzyme_optional& x);

    void
    sample_enzyme (::std::unique_ptr< sample_enzyme_type > p);

    // cross_linker
    //
    typedef ::pepXML::cross_linker cross_linker_type;
    typedef ::xsd::cxx::tree::optional< cross_linker_type > cross_linker_optional;
    typedef ::xsd::cxx::tree::traits< cross_linker_type, char > cross_linker_traits;

    const cross_linker_optional&
    cross_linker () const;

    cross_linker_optional&
    cross_linker ();

    void
    cross_linker (const cross_linker_type& x);

    void
    cross_linker (const cross_linker_optional& x);

    void
    cross_linker (::std::unique_ptr< cross_linker_type > p);

    // search_summary
    //
    typedef ::pepXML::search_summary search_summary_type;
    typedef ::xsd::cxx::tree::sequence< search_summary_type > search_summary_sequence;
    typedef search_summary_sequence::iterator search_summary_iterator;
    typedef search_summary_sequence::const_iterator search_summary_const_iterator;
    typedef ::xsd::cxx::tree::traits< search_summary_type, char > search_summary_traits;

    const search_summary_sequence&
    search_summary () const;

    search_summary_sequence&
    search_summary ();

    void
    search_summary (const search_summary_sequence& s);

    // analysis_timestamp
    //
    typedef ::pepXML::analysis_timestamp analysis_timestamp_type;
    typedef ::xsd::cxx::tree::sequence< analysis_timestamp_type > analysis_timestamp_sequence;
    typedef analysis_timestamp_sequence::iterator analysis_timestamp_iterator;
    typedef analysis_timestamp_sequence::const_iterator analysis_timestamp_const_iterator;
    typedef ::xsd::cxx::tree::traits< analysis_timestamp_type, char > analysis_timestamp_traits;

    const analysis_timestamp_sequence&
    analysis_timestamp () const;

    analysis_timestamp_sequence&
    analysis_timestamp ();

    void
    analysis_timestamp (const analysis_timestamp_sequence& s);

    // spectrum_query
    //
    typedef ::pepXML::spectrum_query spectrum_query_type;
    typedef ::xsd::cxx::tree::sequence< spectrum_query_type > spectrum_query_sequence;
    typedef spectrum_query_sequence::iterator spectrum_query_iterator;
    typedef spectrum_query_sequence::const_iterator spectrum_query_const_iterator;
    typedef ::xsd::cxx::tree::traits< spectrum_query_type, char > spectrum_query_traits;

    const spectrum_query_sequence&
    spectrum_query () const;

    spectrum_query_sequence&
    spectrum_query ();

    void
    spectrum_query (const spectrum_query_sequence& s);

    // base_name
    //
    typedef ::xml_schema::string base_name_type;
    typedef ::xsd::cxx::tree::traits< base_name_type, char > base_name_traits;

    const base_name_type&
    base_name () const;

    base_name_type&
    base_name ();

    void
    base_name (const base_name_type& x);

    void
    base_name (::std::unique_ptr< base_name_type > p);

    // raw_data_type
    //
    typedef ::xml_schema::string raw_data_type_type;
    typedef ::xsd::cxx::tree::traits< raw_data_type_type, char > raw_data_type_traits;

    const raw_data_type_type&
    raw_data_type () const;

    raw_data_type_type&
    raw_data_type ();

    void
    raw_data_type (const raw_data_type_type& x);

    void
    raw_data_type (::std::unique_ptr< raw_data_type_type > p);

    // raw_data
    //
    typedef ::xml_schema::string raw_data_type1;
    typedef ::xsd::cxx::tree::traits< raw_data_type1, char > raw_data_traits;

    const raw_data_type1&
    raw_data () const;

    raw_data_type1&
    raw_data ();

    void
    raw_data (const raw_data_type1& x);

    void
    raw_data (::std::unique_ptr< raw_data_type1 > p);

    // msManufacturer
    //
    typedef ::xml_schema::string msManufacturer_type;
    typedef ::xsd::cxx::tree::optional< msManufacturer_type > msManufacturer_optional;
    typedef ::xsd::cxx::tree::traits< msManufacturer_type, char > msManufacturer_traits;

    const msManufacturer_optional&
    msManufacturer () const;

    msManufacturer_optional&
    msManufacturer ();

    void
    msManufacturer (const msManufacturer_type& x);

    void
    msManufacturer (const msManufacturer_optional& x);

    void
    msManufacturer (::std::unique_ptr< msManufacturer_type > p);

    // msModel
    //
    typedef ::xml_schema::string msModel_type;
    typedef ::xsd::cxx::tree::optional< msModel_type > msModel_optional;
    typedef ::xsd::cxx::tree::traits< msModel_type, char > msModel_traits;

    const msModel_optional&
    msModel () const;

    msModel_optional&
    msModel ();

    void
    msModel (const msModel_type& x);

    void
    msModel (const msModel_optional& x);

    void
    msModel (::std::unique_ptr< msModel_type > p);

    // msIonization
    //
    typedef ::xml_schema::string msIonization_type;
    typedef ::xsd::cxx::tree::optional< msIonization_type > msIonization_optional;
    typedef ::xsd::cxx::tree::traits< msIonization_type, char > msIonization_traits;

    const msIonization_optional&
    msIonization () const;

    msIonization_optional&
    msIonization ();

    void
    msIonization (const msIonization_type& x);

    void
    msIonization (const msIonization_optional& x);

    void
    msIonization (::std::unique_ptr< msIonization_type > p);

    // msMassAnalyzer
    //
    typedef ::xml_schema::string msMassAnalyzer_type;
    typedef ::xsd::cxx::tree::optional< msMassAnalyzer_type > msMassAnalyzer_optional;
    typedef ::xsd::cxx::tree::traits< msMassAnalyzer_type, char > msMassAnalyzer_traits;

    const msMassAnalyzer_optional&
    msMassAnalyzer () const;

    msMassAnalyzer_optional&
    msMassAnalyzer ();

    void
    msMassAnalyzer (const msMassAnalyzer_type& x);

    void
    msMassAnalyzer (const msMassAnalyzer_optional& x);

    void
    msMassAnalyzer (::std::unique_ptr< msMassAnalyzer_type > p);

    // msDetector
    //
    typedef ::xml_schema::string msDetector_type;
    typedef ::xsd::cxx::tree::optional< msDetector_type > msDetector_optional;
    typedef ::xsd::cxx::tree::traits< msDetector_type, char > msDetector_traits;

    const msDetector_optional&
    msDetector () const;

    msDetector_optional&
    msDetector ();

    void
    msDetector (const msDetector_type& x);

    void
    msDetector (const msDetector_optional& x);

    void
    msDetector (::std::unique_ptr< msDetector_type > p);

    // Constructors.
    //
    msms_run_summary ();

    msms_run_summary (const base_name_type&,
                      const raw_data_type_type&,
                      const raw_data_type1&);

    msms_run_summary (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    msms_run_summary (const msms_run_summary& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual msms_run_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    msms_run_summary&
    operator= (const msms_run_summary& x);

    virtual 
    ~msms_run_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sample_enzyme_optional sample_enzyme_;
    cross_linker_optional cross_linker_;
    search_summary_sequence search_summary_;
    analysis_timestamp_sequence analysis_timestamp_;
    spectrum_query_sequence spectrum_query_;
    ::xsd::cxx::tree::one< base_name_type > base_name_;
    ::xsd::cxx::tree::one< raw_data_type_type > raw_data_type_;
    ::xsd::cxx::tree::one< raw_data_type1 > raw_data_;
    msManufacturer_optional msManufacturer_;
    msModel_optional msModel_;
    msIonization_optional msIonization_;
    msMassAnalyzer_optional msMassAnalyzer_;
    msDetector_optional msDetector_;
  };

  class distribution_point: public ::xml_schema::type
  {
    public:
    // fvalue
    //
    typedef ::xml_schema::double_ fvalue_type;
    typedef ::xsd::cxx::tree::traits< fvalue_type, char, ::xsd::cxx::tree::schema_type::double_ > fvalue_traits;

    const fvalue_type&
    fvalue () const;

    fvalue_type&
    fvalue ();

    void
    fvalue (const fvalue_type& x);

    // obs_1_distr
    //
    typedef ::xml_schema::non_negative_integer obs_1_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_1_distr_type, char > obs_1_distr_traits;

    const obs_1_distr_type&
    obs_1_distr () const;

    obs_1_distr_type&
    obs_1_distr ();

    void
    obs_1_distr (const obs_1_distr_type& x);

    // model_1_pos_distr
    //
    typedef ::xml_schema::double_ model_1_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_1_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_1_pos_distr_traits;

    const model_1_pos_distr_type&
    model_1_pos_distr () const;

    model_1_pos_distr_type&
    model_1_pos_distr ();

    void
    model_1_pos_distr (const model_1_pos_distr_type& x);

    // model_1_neg_distr
    //
    typedef ::xml_schema::double_ model_1_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_1_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_1_neg_distr_traits;

    const model_1_neg_distr_type&
    model_1_neg_distr () const;

    model_1_neg_distr_type&
    model_1_neg_distr ();

    void
    model_1_neg_distr (const model_1_neg_distr_type& x);

    // obs_2_distr
    //
    typedef ::xml_schema::non_negative_integer obs_2_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_2_distr_type, char > obs_2_distr_traits;

    const obs_2_distr_type&
    obs_2_distr () const;

    obs_2_distr_type&
    obs_2_distr ();

    void
    obs_2_distr (const obs_2_distr_type& x);

    // model_2_pos_distr
    //
    typedef ::xml_schema::double_ model_2_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_2_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_2_pos_distr_traits;

    const model_2_pos_distr_type&
    model_2_pos_distr () const;

    model_2_pos_distr_type&
    model_2_pos_distr ();

    void
    model_2_pos_distr (const model_2_pos_distr_type& x);

    // model_2_neg_distr
    //
    typedef ::xml_schema::double_ model_2_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_2_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_2_neg_distr_traits;

    const model_2_neg_distr_type&
    model_2_neg_distr () const;

    model_2_neg_distr_type&
    model_2_neg_distr ();

    void
    model_2_neg_distr (const model_2_neg_distr_type& x);

    // obs_3_distr
    //
    typedef ::xml_schema::non_negative_integer obs_3_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_3_distr_type, char > obs_3_distr_traits;

    const obs_3_distr_type&
    obs_3_distr () const;

    obs_3_distr_type&
    obs_3_distr ();

    void
    obs_3_distr (const obs_3_distr_type& x);

    // model_3_pos_distr
    //
    typedef ::xml_schema::double_ model_3_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_3_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_3_pos_distr_traits;

    const model_3_pos_distr_type&
    model_3_pos_distr () const;

    model_3_pos_distr_type&
    model_3_pos_distr ();

    void
    model_3_pos_distr (const model_3_pos_distr_type& x);

    // model_3_neg_distr
    //
    typedef ::xml_schema::double_ model_3_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_3_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_3_neg_distr_traits;

    const model_3_neg_distr_type&
    model_3_neg_distr () const;

    model_3_neg_distr_type&
    model_3_neg_distr ();

    void
    model_3_neg_distr (const model_3_neg_distr_type& x);

    // obs_4_distr
    //
    typedef ::xml_schema::non_negative_integer obs_4_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_4_distr_type, char > obs_4_distr_traits;

    const obs_4_distr_type&
    obs_4_distr () const;

    obs_4_distr_type&
    obs_4_distr ();

    void
    obs_4_distr (const obs_4_distr_type& x);

    // model_4_pos_distr
    //
    typedef ::xml_schema::double_ model_4_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_4_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_4_pos_distr_traits;

    const model_4_pos_distr_type&
    model_4_pos_distr () const;

    model_4_pos_distr_type&
    model_4_pos_distr ();

    void
    model_4_pos_distr (const model_4_pos_distr_type& x);

    // model_4_neg_distr
    //
    typedef ::xml_schema::double_ model_4_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_4_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_4_neg_distr_traits;

    const model_4_neg_distr_type&
    model_4_neg_distr () const;

    model_4_neg_distr_type&
    model_4_neg_distr ();

    void
    model_4_neg_distr (const model_4_neg_distr_type& x);

    // obs_5_distr
    //
    typedef ::xml_schema::non_negative_integer obs_5_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_5_distr_type, char > obs_5_distr_traits;

    const obs_5_distr_type&
    obs_5_distr () const;

    obs_5_distr_type&
    obs_5_distr ();

    void
    obs_5_distr (const obs_5_distr_type& x);

    // model_5_pos_distr
    //
    typedef ::xml_schema::double_ model_5_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_5_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_5_pos_distr_traits;

    const model_5_pos_distr_type&
    model_5_pos_distr () const;

    model_5_pos_distr_type&
    model_5_pos_distr ();

    void
    model_5_pos_distr (const model_5_pos_distr_type& x);

    // model_5_neg_distr
    //
    typedef ::xml_schema::double_ model_5_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_5_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_5_neg_distr_traits;

    const model_5_neg_distr_type&
    model_5_neg_distr () const;

    model_5_neg_distr_type&
    model_5_neg_distr ();

    void
    model_5_neg_distr (const model_5_neg_distr_type& x);

    // obs_6_distr
    //
    typedef ::xml_schema::non_negative_integer obs_6_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_6_distr_type, char > obs_6_distr_traits;

    const obs_6_distr_type&
    obs_6_distr () const;

    obs_6_distr_type&
    obs_6_distr ();

    void
    obs_6_distr (const obs_6_distr_type& x);

    // model_6_pos_distr
    //
    typedef ::xml_schema::double_ model_6_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_6_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_6_pos_distr_traits;

    const model_6_pos_distr_type&
    model_6_pos_distr () const;

    model_6_pos_distr_type&
    model_6_pos_distr ();

    void
    model_6_pos_distr (const model_6_pos_distr_type& x);

    // model_6_neg_distr
    //
    typedef ::xml_schema::double_ model_6_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_6_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_6_neg_distr_traits;

    const model_6_neg_distr_type&
    model_6_neg_distr () const;

    model_6_neg_distr_type&
    model_6_neg_distr ();

    void
    model_6_neg_distr (const model_6_neg_distr_type& x);

    // obs_7_distr
    //
    typedef ::xml_schema::non_negative_integer obs_7_distr_type;
    typedef ::xsd::cxx::tree::traits< obs_7_distr_type, char > obs_7_distr_traits;

    const obs_7_distr_type&
    obs_7_distr () const;

    obs_7_distr_type&
    obs_7_distr ();

    void
    obs_7_distr (const obs_7_distr_type& x);

    // model_7_pos_distr
    //
    typedef ::xml_schema::double_ model_7_pos_distr_type;
    typedef ::xsd::cxx::tree::traits< model_7_pos_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_7_pos_distr_traits;

    const model_7_pos_distr_type&
    model_7_pos_distr () const;

    model_7_pos_distr_type&
    model_7_pos_distr ();

    void
    model_7_pos_distr (const model_7_pos_distr_type& x);

    // model_7_neg_distr
    //
    typedef ::xml_schema::double_ model_7_neg_distr_type;
    typedef ::xsd::cxx::tree::traits< model_7_neg_distr_type, char, ::xsd::cxx::tree::schema_type::double_ > model_7_neg_distr_traits;

    const model_7_neg_distr_type&
    model_7_neg_distr () const;

    model_7_neg_distr_type&
    model_7_neg_distr ();

    void
    model_7_neg_distr (const model_7_neg_distr_type& x);

    // Constructors.
    //
    distribution_point ();

    distribution_point (const fvalue_type&,
                        const obs_1_distr_type&,
                        const model_1_pos_distr_type&,
                        const model_1_neg_distr_type&,
                        const obs_2_distr_type&,
                        const model_2_pos_distr_type&,
                        const model_2_neg_distr_type&,
                        const obs_3_distr_type&,
                        const model_3_pos_distr_type&,
                        const model_3_neg_distr_type&,
                        const obs_4_distr_type&,
                        const model_4_pos_distr_type&,
                        const model_4_neg_distr_type&,
                        const obs_5_distr_type&,
                        const model_5_pos_distr_type&,
                        const model_5_neg_distr_type&,
                        const obs_6_distr_type&,
                        const model_6_pos_distr_type&,
                        const model_6_neg_distr_type&,
                        const obs_7_distr_type&,
                        const model_7_pos_distr_type&,
                        const model_7_neg_distr_type&);

    distribution_point (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    distribution_point (const distribution_point& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual distribution_point*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    distribution_point&
    operator= (const distribution_point& x);

    virtual 
    ~distribution_point ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< fvalue_type > fvalue_;
    ::xsd::cxx::tree::one< obs_1_distr_type > obs_1_distr_;
    ::xsd::cxx::tree::one< model_1_pos_distr_type > model_1_pos_distr_;
    ::xsd::cxx::tree::one< model_1_neg_distr_type > model_1_neg_distr_;
    ::xsd::cxx::tree::one< obs_2_distr_type > obs_2_distr_;
    ::xsd::cxx::tree::one< model_2_pos_distr_type > model_2_pos_distr_;
    ::xsd::cxx::tree::one< model_2_neg_distr_type > model_2_neg_distr_;
    ::xsd::cxx::tree::one< obs_3_distr_type > obs_3_distr_;
    ::xsd::cxx::tree::one< model_3_pos_distr_type > model_3_pos_distr_;
    ::xsd::cxx::tree::one< model_3_neg_distr_type > model_3_neg_distr_;
    ::xsd::cxx::tree::one< obs_4_distr_type > obs_4_distr_;
    ::xsd::cxx::tree::one< model_4_pos_distr_type > model_4_pos_distr_;
    ::xsd::cxx::tree::one< model_4_neg_distr_type > model_4_neg_distr_;
    ::xsd::cxx::tree::one< obs_5_distr_type > obs_5_distr_;
    ::xsd::cxx::tree::one< model_5_pos_distr_type > model_5_pos_distr_;
    ::xsd::cxx::tree::one< model_5_neg_distr_type > model_5_neg_distr_;
    ::xsd::cxx::tree::one< obs_6_distr_type > obs_6_distr_;
    ::xsd::cxx::tree::one< model_6_pos_distr_type > model_6_pos_distr_;
    ::xsd::cxx::tree::one< model_6_neg_distr_type > model_6_neg_distr_;
    ::xsd::cxx::tree::one< obs_7_distr_type > obs_7_distr_;
    ::xsd::cxx::tree::one< model_7_pos_distr_type > model_7_pos_distr_;
    ::xsd::cxx::tree::one< model_7_neg_distr_type > model_7_neg_distr_;
  };

  class mixture_model: public ::xml_schema::type
  {
    public:
    // mixturemodel_distribution
    //
    typedef ::pepXML::mixturemodel_distribution mixturemodel_distribution_type;
    typedef ::xsd::cxx::tree::sequence< mixturemodel_distribution_type > mixturemodel_distribution_sequence;
    typedef mixturemodel_distribution_sequence::iterator mixturemodel_distribution_iterator;
    typedef mixturemodel_distribution_sequence::const_iterator mixturemodel_distribution_const_iterator;
    typedef ::xsd::cxx::tree::traits< mixturemodel_distribution_type, char > mixturemodel_distribution_traits;

    const mixturemodel_distribution_sequence&
    mixturemodel_distribution () const;

    mixturemodel_distribution_sequence&
    mixturemodel_distribution ();

    void
    mixturemodel_distribution (const mixturemodel_distribution_sequence& s);

    // mixturemodel
    //
    typedef ::pepXML::mixturemodel mixturemodel_type;
    typedef ::xsd::cxx::tree::sequence< mixturemodel_type > mixturemodel_sequence;
    typedef mixturemodel_sequence::iterator mixturemodel_iterator;
    typedef mixturemodel_sequence::const_iterator mixturemodel_const_iterator;
    typedef ::xsd::cxx::tree::traits< mixturemodel_type, char > mixturemodel_traits;

    const mixturemodel_sequence&
    mixturemodel () const;

    mixturemodel_sequence&
    mixturemodel ();

    void
    mixturemodel (const mixturemodel_sequence& s);

    // precursor_ion_charge
    //
    typedef ::xml_schema::non_negative_integer precursor_ion_charge_type;
    typedef ::xsd::cxx::tree::traits< precursor_ion_charge_type, char > precursor_ion_charge_traits;

    const precursor_ion_charge_type&
    precursor_ion_charge () const;

    precursor_ion_charge_type&
    precursor_ion_charge ();

    void
    precursor_ion_charge (const precursor_ion_charge_type& x);

    // comments
    //
    typedef ::xml_schema::string comments_type;
    typedef ::xsd::cxx::tree::traits< comments_type, char > comments_traits;

    const comments_type&
    comments () const;

    comments_type&
    comments ();

    void
    comments (const comments_type& x);

    void
    comments (::std::unique_ptr< comments_type > p);

    // prior_probability
    //
    typedef ::xml_schema::double_ prior_probability_type;
    typedef ::xsd::cxx::tree::traits< prior_probability_type, char, ::xsd::cxx::tree::schema_type::double_ > prior_probability_traits;

    const prior_probability_type&
    prior_probability () const;

    prior_probability_type&
    prior_probability ();

    void
    prior_probability (const prior_probability_type& x);

    // est_tot_correct
    //
    typedef ::xml_schema::double_ est_tot_correct_type;
    typedef ::xsd::cxx::tree::traits< est_tot_correct_type, char, ::xsd::cxx::tree::schema_type::double_ > est_tot_correct_traits;

    const est_tot_correct_type&
    est_tot_correct () const;

    est_tot_correct_type&
    est_tot_correct ();

    void
    est_tot_correct (const est_tot_correct_type& x);

    // tot_num_spectra
    //
    typedef ::xml_schema::non_negative_integer tot_num_spectra_type;
    typedef ::xsd::cxx::tree::traits< tot_num_spectra_type, char > tot_num_spectra_traits;

    const tot_num_spectra_type&
    tot_num_spectra () const;

    tot_num_spectra_type&
    tot_num_spectra ();

    void
    tot_num_spectra (const tot_num_spectra_type& x);

    // num_iterations
    //
    typedef ::xml_schema::non_negative_integer num_iterations_type;
    typedef ::xsd::cxx::tree::traits< num_iterations_type, char > num_iterations_traits;

    const num_iterations_type&
    num_iterations () const;

    num_iterations_type&
    num_iterations ();

    void
    num_iterations (const num_iterations_type& x);

    // Constructors.
    //
    mixture_model ();

    mixture_model (const precursor_ion_charge_type&,
                   const comments_type&,
                   const prior_probability_type&,
                   const est_tot_correct_type&,
                   const tot_num_spectra_type&,
                   const num_iterations_type&);

    mixture_model (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    mixture_model (const mixture_model& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual mixture_model*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mixture_model&
    operator= (const mixture_model& x);

    virtual 
    ~mixture_model ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    mixturemodel_distribution_sequence mixturemodel_distribution_;
    mixturemodel_sequence mixturemodel_;
    ::xsd::cxx::tree::one< precursor_ion_charge_type > precursor_ion_charge_;
    ::xsd::cxx::tree::one< comments_type > comments_;
    ::xsd::cxx::tree::one< prior_probability_type > prior_probability_;
    ::xsd::cxx::tree::one< est_tot_correct_type > est_tot_correct_;
    ::xsd::cxx::tree::one< tot_num_spectra_type > tot_num_spectra_;
    ::xsd::cxx::tree::one< num_iterations_type > num_iterations_;
  };

  class mod_aminoacid_probability: public ::xml_schema::type
  {
    public:
    // position
    //
    typedef ::xml_schema::integer position_type;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_type&
    position () const;

    position_type&
    position ();

    void
    position (const position_type& x);

    // probability
    //
    typedef ::xml_schema::double_ probability_type;
    typedef ::xsd::cxx::tree::traits< probability_type, char, ::xsd::cxx::tree::schema_type::double_ > probability_traits;

    const probability_type&
    probability () const;

    probability_type&
    probability ();

    void
    probability (const probability_type& x);

    // Constructors.
    //
    mod_aminoacid_probability ();

    mod_aminoacid_probability (const position_type&,
                               const probability_type&);

    mod_aminoacid_probability (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    mod_aminoacid_probability (const mod_aminoacid_probability& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual mod_aminoacid_probability*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mod_aminoacid_probability&
    operator= (const mod_aminoacid_probability& x);

    virtual 
    ~mod_aminoacid_probability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< position_type > position_;
    ::xsd::cxx::tree::one< probability_type > probability_;
  };

  class search_score_summary: public ::xml_schema::type
  {
    public:
    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // Constructors.
    //
    search_score_summary ();

    search_score_summary (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    search_score_summary (const search_score_summary& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual search_score_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    search_score_summary&
    operator= (const search_score_summary& x);

    virtual 
    ~search_score_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    parameter_sequence parameter_;
  };

  class intensity: public ::xml_schema::type
  {
    public:
    // channel
    //
    typedef ::pepXML::positiveInt channel_type;
    typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

    const channel_type&
    channel () const;

    channel_type&
    channel ();

    void
    channel (const channel_type& x);

    void
    channel (::std::unique_ptr< channel_type > p);

    // target_mass
    //
    typedef ::xml_schema::double_ target_mass_type;
    typedef ::xsd::cxx::tree::traits< target_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > target_mass_traits;

    const target_mass_type&
    target_mass () const;

    target_mass_type&
    target_mass ();

    void
    target_mass (const target_mass_type& x);

    // absolute
    //
    typedef ::xml_schema::double_ absolute_type;
    typedef ::xsd::cxx::tree::traits< absolute_type, char, ::xsd::cxx::tree::schema_type::double_ > absolute_traits;

    const absolute_type&
    absolute () const;

    absolute_type&
    absolute ();

    void
    absolute (const absolute_type& x);

    // normalized
    //
    typedef ::xml_schema::double_ normalized_type;
    typedef ::xsd::cxx::tree::traits< normalized_type, char, ::xsd::cxx::tree::schema_type::double_ > normalized_traits;

    const normalized_type&
    normalized () const;

    normalized_type&
    normalized ();

    void
    normalized (const normalized_type& x);

    // reject
    //
    typedef ::xml_schema::boolean reject_type;
    typedef ::xsd::cxx::tree::traits< reject_type, char > reject_traits;

    const reject_type&
    reject () const;

    reject_type&
    reject ();

    void
    reject (const reject_type& x);

    static reject_type
    reject_default_value ();

    // Constructors.
    //
    intensity ();

    intensity (const channel_type&,
               const target_mass_type&,
               const absolute_type&,
               const normalized_type&);

    intensity (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    intensity (const intensity& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual intensity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    intensity&
    operator= (const intensity& x);

    virtual 
    ~intensity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< channel_type > channel_;
    ::xsd::cxx::tree::one< target_mass_type > target_mass_;
    ::xsd::cxx::tree::one< absolute_type > absolute_;
    ::xsd::cxx::tree::one< normalized_type > normalized_;
    ::xsd::cxx::tree::one< reject_type > reject_;
  };

  class fragment_masses: public ::xml_schema::type
  {
    public:
    // channel
    //
    typedef ::pepXML::positiveInt channel_type;
    typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

    const channel_type&
    channel () const;

    channel_type&
    channel ();

    void
    channel (const channel_type& x);

    void
    channel (::std::unique_ptr< channel_type > p);

    // mz
    //
    typedef ::xml_schema::double_ mz_type;
    typedef ::xsd::cxx::tree::traits< mz_type, char, ::xsd::cxx::tree::schema_type::double_ > mz_traits;

    const mz_type&
    mz () const;

    mz_type&
    mz ();

    void
    mz (const mz_type& x);

    // offset
    //
    typedef ::xml_schema::double_ offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char, ::xsd::cxx::tree::schema_type::double_ > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    // Constructors.
    //
    fragment_masses ();

    fragment_masses (const channel_type&,
                     const mz_type&);

    fragment_masses (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    fragment_masses (const fragment_masses& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual fragment_masses*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fragment_masses&
    operator= (const fragment_masses& x);

    virtual 
    ~fragment_masses ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< channel_type > channel_;
    ::xsd::cxx::tree::one< mz_type > mz_;
    offset_optional offset_;
  };

  class isotopic_contributions: public ::xml_schema::type
  {
    public:
    // contributing_channel
    //
    typedef ::pepXML::contributing_channel contributing_channel_type;
    typedef ::xsd::cxx::tree::sequence< contributing_channel_type > contributing_channel_sequence;
    typedef contributing_channel_sequence::iterator contributing_channel_iterator;
    typedef contributing_channel_sequence::const_iterator contributing_channel_const_iterator;
    typedef ::xsd::cxx::tree::traits< contributing_channel_type, char > contributing_channel_traits;

    const contributing_channel_sequence&
    contributing_channel () const;

    contributing_channel_sequence&
    contributing_channel ();

    void
    contributing_channel (const contributing_channel_sequence& s);

    // Constructors.
    //
    isotopic_contributions ();

    isotopic_contributions (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    isotopic_contributions (const isotopic_contributions& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual isotopic_contributions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    isotopic_contributions&
    operator= (const isotopic_contributions& x);

    virtual 
    ~isotopic_contributions ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    contributing_channel_sequence contributing_channel_;
  };

  class data_filter: public ::xml_schema::type
  {
    public:
    // number
    //
    typedef ::xml_schema::non_negative_integer number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    // parent_file
    //
    typedef ::xml_schema::string parent_file_type;
    typedef ::xsd::cxx::tree::traits< parent_file_type, char > parent_file_traits;

    const parent_file_type&
    parent_file () const;

    parent_file_type&
    parent_file ();

    void
    parent_file (const parent_file_type& x);

    void
    parent_file (::std::unique_ptr< parent_file_type > p);

    // windows_parent
    //
    typedef ::xml_schema::string windows_parent_type;
    typedef ::xsd::cxx::tree::optional< windows_parent_type > windows_parent_optional;
    typedef ::xsd::cxx::tree::traits< windows_parent_type, char > windows_parent_traits;

    const windows_parent_optional&
    windows_parent () const;

    windows_parent_optional&
    windows_parent ();

    void
    windows_parent (const windows_parent_type& x);

    void
    windows_parent (const windows_parent_optional& x);

    void
    windows_parent (::std::unique_ptr< windows_parent_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::unique_ptr< description_type > p);

    // Constructors.
    //
    data_filter ();

    data_filter (const number_type&,
                 const parent_file_type&,
                 const description_type&);

    data_filter (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    data_filter (const data_filter& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual data_filter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    data_filter&
    operator= (const data_filter& x);

    virtual 
    ~data_filter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
    ::xsd::cxx::tree::one< parent_file_type > parent_file_;
    windows_parent_optional windows_parent_;
    ::xsd::cxx::tree::one< description_type > description_;
  };

  class sample_enzyme: public ::xml_schema::type
  {
    public:
    // specificity
    //
    typedef ::pepXML::specificity specificity_type;
    typedef ::xsd::cxx::tree::sequence< specificity_type > specificity_sequence;
    typedef specificity_sequence::iterator specificity_iterator;
    typedef specificity_sequence::const_iterator specificity_const_iterator;
    typedef ::xsd::cxx::tree::traits< specificity_type, char > specificity_traits;

    const specificity_sequence&
    specificity () const;

    specificity_sequence&
    specificity ();

    void
    specificity (const specificity_sequence& s);

    // name
    //
    typedef ::pepXML::name name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::unique_ptr< description_type > p);

    // fidelity
    //
    typedef ::pepXML::fidelity fidelity_type;
    typedef ::xsd::cxx::tree::traits< fidelity_type, char > fidelity_traits;

    const fidelity_type&
    fidelity () const;

    fidelity_type&
    fidelity ();

    void
    fidelity (const fidelity_type& x);

    void
    fidelity (::std::unique_ptr< fidelity_type > p);

    static const fidelity_type&
    fidelity_default_value ();

    // independent
    //
    typedef ::xml_schema::boolean independent_type;
    typedef ::xsd::cxx::tree::traits< independent_type, char > independent_traits;

    const independent_type&
    independent () const;

    independent_type&
    independent ();

    void
    independent (const independent_type& x);

    static independent_type
    independent_default_value ();

    // Constructors.
    //
    sample_enzyme ();

    sample_enzyme (const name_type&);

    sample_enzyme (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    sample_enzyme (const sample_enzyme& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual sample_enzyme*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sample_enzyme&
    operator= (const sample_enzyme& x);

    virtual 
    ~sample_enzyme ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    specificity_sequence specificity_;
    ::xsd::cxx::tree::one< name_type > name_;
    description_optional description_;
    ::xsd::cxx::tree::one< fidelity_type > fidelity_;
    static const fidelity_type fidelity_default_value_;
    ::xsd::cxx::tree::one< independent_type > independent_;
  };

  class cross_linker: public ::xml_schema::type
  {
    public:
    // cross_linker_info
    //
    typedef ::pepXML::nameValueType cross_linker_info_type;
    typedef ::xsd::cxx::tree::sequence< cross_linker_info_type > cross_linker_info_sequence;
    typedef cross_linker_info_sequence::iterator cross_linker_info_iterator;
    typedef cross_linker_info_sequence::const_iterator cross_linker_info_const_iterator;
    typedef ::xsd::cxx::tree::traits< cross_linker_info_type, char > cross_linker_info_traits;

    const cross_linker_info_sequence&
    cross_linker_info () const;

    cross_linker_info_sequence&
    cross_linker_info ();

    void
    cross_linker_info (const cross_linker_info_sequence& s);

    // identifier
    //
    typedef ::xml_schema::string identifier_type;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_type&
    identifier () const;

    identifier_type&
    identifier ();

    void
    identifier (const identifier_type& x);

    void
    identifier (::std::unique_ptr< identifier_type > p);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // link_sites
    //
    typedef ::xml_schema::string link_sites_type;
    typedef ::xsd::cxx::tree::traits< link_sites_type, char > link_sites_traits;

    const link_sites_type&
    link_sites () const;

    link_sites_type&
    link_sites ();

    void
    link_sites (const link_sites_type& x);

    void
    link_sites (::std::unique_ptr< link_sites_type > p);

    // isotope_labeled
    //
    typedef ::pepXML::isotope_labeled isotope_labeled_type;
    typedef ::xsd::cxx::tree::traits< isotope_labeled_type, char > isotope_labeled_traits;

    const isotope_labeled_type&
    isotope_labeled () const;

    isotope_labeled_type&
    isotope_labeled ();

    void
    isotope_labeled (const isotope_labeled_type& x);

    void
    isotope_labeled (::std::unique_ptr< isotope_labeled_type > p);

    // Constructors.
    //
    cross_linker ();

    cross_linker (const identifier_type&,
                  const mass_type&,
                  const link_sites_type&,
                  const isotope_labeled_type&);

    cross_linker (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    cross_linker (const cross_linker& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual cross_linker*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    cross_linker&
    operator= (const cross_linker& x);

    virtual 
    ~cross_linker ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    cross_linker_info_sequence cross_linker_info_;
    ::xsd::cxx::tree::one< identifier_type > identifier_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< link_sites_type > link_sites_;
    ::xsd::cxx::tree::one< isotope_labeled_type > isotope_labeled_;
  };

  class search_summary: public ::xml_schema::type
  {
    public:
    // search_database
    //
    typedef ::pepXML::search_database search_database_type;
    typedef ::xsd::cxx::tree::optional< search_database_type > search_database_optional;
    typedef ::xsd::cxx::tree::traits< search_database_type, char > search_database_traits;

    const search_database_optional&
    search_database () const;

    search_database_optional&
    search_database ();

    void
    search_database (const search_database_type& x);

    void
    search_database (const search_database_optional& x);

    void
    search_database (::std::unique_ptr< search_database_type > p);

    // enzymatic_search_constraint
    //
    typedef ::pepXML::enzymatic_search_constraint enzymatic_search_constraint_type;
    typedef ::xsd::cxx::tree::optional< enzymatic_search_constraint_type > enzymatic_search_constraint_optional;
    typedef ::xsd::cxx::tree::traits< enzymatic_search_constraint_type, char > enzymatic_search_constraint_traits;

    const enzymatic_search_constraint_optional&
    enzymatic_search_constraint () const;

    enzymatic_search_constraint_optional&
    enzymatic_search_constraint ();

    void
    enzymatic_search_constraint (const enzymatic_search_constraint_type& x);

    void
    enzymatic_search_constraint (const enzymatic_search_constraint_optional& x);

    void
    enzymatic_search_constraint (::std::unique_ptr< enzymatic_search_constraint_type > p);

    // sequence_search_constraint
    //
    typedef ::pepXML::sequence_search_constraint sequence_search_constraint_type;
    typedef ::xsd::cxx::tree::sequence< sequence_search_constraint_type > sequence_search_constraint_sequence;
    typedef sequence_search_constraint_sequence::iterator sequence_search_constraint_iterator;
    typedef sequence_search_constraint_sequence::const_iterator sequence_search_constraint_const_iterator;
    typedef ::xsd::cxx::tree::traits< sequence_search_constraint_type, char > sequence_search_constraint_traits;

    const sequence_search_constraint_sequence&
    sequence_search_constraint () const;

    sequence_search_constraint_sequence&
    sequence_search_constraint ();

    void
    sequence_search_constraint (const sequence_search_constraint_sequence& s);

    // aminoacid_modification
    //
    typedef ::pepXML::aminoacid_modification aminoacid_modification_type;
    typedef ::xsd::cxx::tree::sequence< aminoacid_modification_type > aminoacid_modification_sequence;
    typedef aminoacid_modification_sequence::iterator aminoacid_modification_iterator;
    typedef aminoacid_modification_sequence::const_iterator aminoacid_modification_const_iterator;
    typedef ::xsd::cxx::tree::traits< aminoacid_modification_type, char > aminoacid_modification_traits;

    const aminoacid_modification_sequence&
    aminoacid_modification () const;

    aminoacid_modification_sequence&
    aminoacid_modification ();

    void
    aminoacid_modification (const aminoacid_modification_sequence& s);

    // terminal_modification
    //
    typedef ::pepXML::terminal_modification terminal_modification_type;
    typedef ::xsd::cxx::tree::sequence< terminal_modification_type > terminal_modification_sequence;
    typedef terminal_modification_sequence::iterator terminal_modification_iterator;
    typedef terminal_modification_sequence::const_iterator terminal_modification_const_iterator;
    typedef ::xsd::cxx::tree::traits< terminal_modification_type, char > terminal_modification_traits;

    const terminal_modification_sequence&
    terminal_modification () const;

    terminal_modification_sequence&
    terminal_modification ();

    void
    terminal_modification (const terminal_modification_sequence& s);

    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // base_name
    //
    typedef ::xml_schema::string base_name_type;
    typedef ::xsd::cxx::tree::traits< base_name_type, char > base_name_traits;

    const base_name_type&
    base_name () const;

    base_name_type&
    base_name ();

    void
    base_name (const base_name_type& x);

    void
    base_name (::std::unique_ptr< base_name_type > p);

    // search_engine
    //
    typedef ::pepXML::engineType search_engine_type;
    typedef ::xsd::cxx::tree::traits< search_engine_type, char > search_engine_traits;

    const search_engine_type&
    search_engine () const;

    search_engine_type&
    search_engine ();

    void
    search_engine (const search_engine_type& x);

    void
    search_engine (::std::unique_ptr< search_engine_type > p);

    // search_engine_version
    //
    typedef ::xml_schema::string search_engine_version_type;
    typedef ::xsd::cxx::tree::optional< search_engine_version_type > search_engine_version_optional;
    typedef ::xsd::cxx::tree::traits< search_engine_version_type, char > search_engine_version_traits;

    const search_engine_version_optional&
    search_engine_version () const;

    search_engine_version_optional&
    search_engine_version ();

    void
    search_engine_version (const search_engine_version_type& x);

    void
    search_engine_version (const search_engine_version_optional& x);

    void
    search_engine_version (::std::unique_ptr< search_engine_version_type > p);

    // precursor_mass_type
    //
    typedef ::pepXML::massType precursor_mass_type_type;
    typedef ::xsd::cxx::tree::traits< precursor_mass_type_type, char > precursor_mass_type_traits;

    const precursor_mass_type_type&
    precursor_mass_type () const;

    precursor_mass_type_type&
    precursor_mass_type ();

    void
    precursor_mass_type (const precursor_mass_type_type& x);

    void
    precursor_mass_type (::std::unique_ptr< precursor_mass_type_type > p);

    // fragment_mass_type
    //
    typedef ::pepXML::massType fragment_mass_type_type;
    typedef ::xsd::cxx::tree::traits< fragment_mass_type_type, char > fragment_mass_type_traits;

    const fragment_mass_type_type&
    fragment_mass_type () const;

    fragment_mass_type_type&
    fragment_mass_type ();

    void
    fragment_mass_type (const fragment_mass_type_type& x);

    void
    fragment_mass_type (::std::unique_ptr< fragment_mass_type_type > p);

    // out_data_type
    //
    typedef ::xml_schema::string out_data_type_type;
    typedef ::xsd::cxx::tree::optional< out_data_type_type > out_data_type_optional;
    typedef ::xsd::cxx::tree::traits< out_data_type_type, char > out_data_type_traits;

    const out_data_type_optional&
    out_data_type () const;

    out_data_type_optional&
    out_data_type ();

    void
    out_data_type (const out_data_type_type& x);

    void
    out_data_type (const out_data_type_optional& x);

    void
    out_data_type (::std::unique_ptr< out_data_type_type > p);

    // out_data
    //
    typedef ::xml_schema::string out_data_type1;
    typedef ::xsd::cxx::tree::optional< out_data_type1 > out_data_optional;
    typedef ::xsd::cxx::tree::traits< out_data_type1, char > out_data_traits;

    const out_data_optional&
    out_data () const;

    out_data_optional&
    out_data ();

    void
    out_data (const out_data_type1& x);

    void
    out_data (const out_data_optional& x);

    void
    out_data (::std::unique_ptr< out_data_type1 > p);

    // search_id
    //
    typedef ::pepXML::positiveInt search_id_type;
    typedef ::xsd::cxx::tree::traits< search_id_type, char > search_id_traits;

    const search_id_type&
    search_id () const;

    search_id_type&
    search_id ();

    void
    search_id (const search_id_type& x);

    void
    search_id (::std::unique_ptr< search_id_type > p);

    // Constructors.
    //
    search_summary ();

    search_summary (const base_name_type&,
                    const search_engine_type&,
                    const precursor_mass_type_type&,
                    const fragment_mass_type_type&,
                    const search_id_type&);

    search_summary (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    search_summary (const search_summary& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual search_summary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    search_summary&
    operator= (const search_summary& x);

    virtual 
    ~search_summary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    search_database_optional search_database_;
    enzymatic_search_constraint_optional enzymatic_search_constraint_;
    sequence_search_constraint_sequence sequence_search_constraint_;
    aminoacid_modification_sequence aminoacid_modification_;
    terminal_modification_sequence terminal_modification_;
    parameter_sequence parameter_;
    ::xsd::cxx::tree::one< base_name_type > base_name_;
    ::xsd::cxx::tree::one< search_engine_type > search_engine_;
    search_engine_version_optional search_engine_version_;
    ::xsd::cxx::tree::one< precursor_mass_type_type > precursor_mass_type_;
    ::xsd::cxx::tree::one< fragment_mass_type_type > fragment_mass_type_;
    out_data_type_optional out_data_type_;
    out_data_optional out_data_;
    ::xsd::cxx::tree::one< search_id_type > search_id_;
  };

  class analysis_timestamp: public ::xml_schema::type
  {
    public:
    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_type&
    time () const;

    time_type&
    time ();

    void
    time (const time_type& x);

    void
    time (::std::unique_ptr< time_type > p);

    // analysis
    //
    typedef ::xml_schema::string analysis_type;
    typedef ::xsd::cxx::tree::traits< analysis_type, char > analysis_traits;

    const analysis_type&
    analysis () const;

    analysis_type&
    analysis ();

    void
    analysis (const analysis_type& x);

    void
    analysis (::std::unique_ptr< analysis_type > p);

    // id
    //
    typedef ::pepXML::positiveInt id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    analysis_timestamp ();

    analysis_timestamp (const time_type&,
                        const analysis_type&,
                        const id_type&);

    analysis_timestamp (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    analysis_timestamp (const analysis_timestamp& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual analysis_timestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    analysis_timestamp&
    operator= (const analysis_timestamp& x);

    virtual 
    ~analysis_timestamp ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< time_type > time_;
    ::xsd::cxx::tree::one< analysis_type > analysis_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class spectrum_query: public ::xml_schema::type
  {
    public:
    // search_result
    //
    typedef ::pepXML::search_result search_result_type;
    typedef ::xsd::cxx::tree::sequence< search_result_type > search_result_sequence;
    typedef search_result_sequence::iterator search_result_iterator;
    typedef search_result_sequence::const_iterator search_result_const_iterator;
    typedef ::xsd::cxx::tree::traits< search_result_type, char > search_result_traits;

    const search_result_sequence&
    search_result () const;

    search_result_sequence&
    search_result ();

    void
    search_result (const search_result_sequence& s);

    // spectrum
    //
    typedef ::xml_schema::string spectrum_type;
    typedef ::xsd::cxx::tree::traits< spectrum_type, char > spectrum_traits;

    const spectrum_type&
    spectrum () const;

    spectrum_type&
    spectrum ();

    void
    spectrum (const spectrum_type& x);

    void
    spectrum (::std::unique_ptr< spectrum_type > p);

    // spectrumNativeID
    //
    typedef ::xml_schema::string spectrumNativeID_type;
    typedef ::xsd::cxx::tree::optional< spectrumNativeID_type > spectrumNativeID_optional;
    typedef ::xsd::cxx::tree::traits< spectrumNativeID_type, char > spectrumNativeID_traits;

    const spectrumNativeID_optional&
    spectrumNativeID () const;

    spectrumNativeID_optional&
    spectrumNativeID ();

    void
    spectrumNativeID (const spectrumNativeID_type& x);

    void
    spectrumNativeID (const spectrumNativeID_optional& x);

    void
    spectrumNativeID (::std::unique_ptr< spectrumNativeID_type > p);

    // start_scan
    //
    typedef ::xml_schema::unsigned_int start_scan_type;
    typedef ::xsd::cxx::tree::traits< start_scan_type, char > start_scan_traits;

    const start_scan_type&
    start_scan () const;

    start_scan_type&
    start_scan ();

    void
    start_scan (const start_scan_type& x);

    // end_scan
    //
    typedef ::xml_schema::unsigned_int end_scan_type;
    typedef ::xsd::cxx::tree::traits< end_scan_type, char > end_scan_traits;

    const end_scan_type&
    end_scan () const;

    end_scan_type&
    end_scan ();

    void
    end_scan (const end_scan_type& x);

    // retention_time_sec
    //
    typedef ::xml_schema::double_ retention_time_sec_type;
    typedef ::xsd::cxx::tree::optional< retention_time_sec_type > retention_time_sec_optional;
    typedef ::xsd::cxx::tree::traits< retention_time_sec_type, char, ::xsd::cxx::tree::schema_type::double_ > retention_time_sec_traits;

    const retention_time_sec_optional&
    retention_time_sec () const;

    retention_time_sec_optional&
    retention_time_sec ();

    void
    retention_time_sec (const retention_time_sec_type& x);

    void
    retention_time_sec (const retention_time_sec_optional& x);

    // collision_energy
    //
    typedef ::xml_schema::double_ collision_energy_type;
    typedef ::xsd::cxx::tree::optional< collision_energy_type > collision_energy_optional;
    typedef ::xsd::cxx::tree::traits< collision_energy_type, char, ::xsd::cxx::tree::schema_type::double_ > collision_energy_traits;

    const collision_energy_optional&
    collision_energy () const;

    collision_energy_optional&
    collision_energy ();

    void
    collision_energy (const collision_energy_type& x);

    void
    collision_energy (const collision_energy_optional& x);

    // compensation_voltage
    //
    typedef ::xml_schema::double_ compensation_voltage_type;
    typedef ::xsd::cxx::tree::optional< compensation_voltage_type > compensation_voltage_optional;
    typedef ::xsd::cxx::tree::traits< compensation_voltage_type, char, ::xsd::cxx::tree::schema_type::double_ > compensation_voltage_traits;

    const compensation_voltage_optional&
    compensation_voltage () const;

    compensation_voltage_optional&
    compensation_voltage ();

    void
    compensation_voltage (const compensation_voltage_type& x);

    void
    compensation_voltage (const compensation_voltage_optional& x);

    // precursor_intensity
    //
    typedef ::xml_schema::double_ precursor_intensity_type;
    typedef ::xsd::cxx::tree::optional< precursor_intensity_type > precursor_intensity_optional;
    typedef ::xsd::cxx::tree::traits< precursor_intensity_type, char, ::xsd::cxx::tree::schema_type::double_ > precursor_intensity_traits;

    const precursor_intensity_optional&
    precursor_intensity () const;

    precursor_intensity_optional&
    precursor_intensity ();

    void
    precursor_intensity (const precursor_intensity_type& x);

    void
    precursor_intensity (const precursor_intensity_optional& x);

    // activation_method
    //
    typedef ::pepXML::activationMethodType activation_method_type;
    typedef ::xsd::cxx::tree::optional< activation_method_type > activation_method_optional;
    typedef ::xsd::cxx::tree::traits< activation_method_type, char > activation_method_traits;

    const activation_method_optional&
    activation_method () const;

    activation_method_optional&
    activation_method ();

    void
    activation_method (const activation_method_type& x);

    void
    activation_method (const activation_method_optional& x);

    void
    activation_method (::std::unique_ptr< activation_method_type > p);

    // precursor_neutral_mass
    //
    typedef ::xml_schema::double_ precursor_neutral_mass_type;
    typedef ::xsd::cxx::tree::traits< precursor_neutral_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > precursor_neutral_mass_traits;

    const precursor_neutral_mass_type&
    precursor_neutral_mass () const;

    precursor_neutral_mass_type&
    precursor_neutral_mass ();

    void
    precursor_neutral_mass (const precursor_neutral_mass_type& x);

    // assumed_charge
    //
    typedef ::xml_schema::non_negative_integer assumed_charge_type;
    typedef ::xsd::cxx::tree::traits< assumed_charge_type, char > assumed_charge_traits;

    const assumed_charge_type&
    assumed_charge () const;

    assumed_charge_type&
    assumed_charge ();

    void
    assumed_charge (const assumed_charge_type& x);

    // search_specification
    //
    typedef ::xml_schema::string search_specification_type;
    typedef ::xsd::cxx::tree::optional< search_specification_type > search_specification_optional;
    typedef ::xsd::cxx::tree::traits< search_specification_type, char > search_specification_traits;

    const search_specification_optional&
    search_specification () const;

    search_specification_optional&
    search_specification ();

    void
    search_specification (const search_specification_type& x);

    void
    search_specification (const search_specification_optional& x);

    void
    search_specification (::std::unique_ptr< search_specification_type > p);

    // index
    //
    typedef ::pepXML::positiveInt index_type;
    typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

    const index_type&
    index () const;

    index_type&
    index ();

    void
    index (const index_type& x);

    void
    index (::std::unique_ptr< index_type > p);

    // Constructors.
    //
    spectrum_query ();

    spectrum_query (const spectrum_type&,
                    const start_scan_type&,
                    const end_scan_type&,
                    const precursor_neutral_mass_type&,
                    const assumed_charge_type&,
                    const index_type&);

    spectrum_query (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    spectrum_query (const spectrum_query& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual spectrum_query*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    spectrum_query&
    operator= (const spectrum_query& x);

    virtual 
    ~spectrum_query ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    search_result_sequence search_result_;
    ::xsd::cxx::tree::one< spectrum_type > spectrum_;
    spectrumNativeID_optional spectrumNativeID_;
    ::xsd::cxx::tree::one< start_scan_type > start_scan_;
    ::xsd::cxx::tree::one< end_scan_type > end_scan_;
    retention_time_sec_optional retention_time_sec_;
    collision_energy_optional collision_energy_;
    compensation_voltage_optional compensation_voltage_;
    precursor_intensity_optional precursor_intensity_;
    activation_method_optional activation_method_;
    ::xsd::cxx::tree::one< precursor_neutral_mass_type > precursor_neutral_mass_;
    ::xsd::cxx::tree::one< assumed_charge_type > assumed_charge_;
    search_specification_optional search_specification_;
    ::xsd::cxx::tree::one< index_type > index_;
  };

  class mixturemodel_distribution: public ::xml_schema::type
  {
    public:
    // posmodel_distribution
    //
    typedef ::pepXML::posmodel_distribution posmodel_distribution_type;
    typedef ::xsd::cxx::tree::traits< posmodel_distribution_type, char > posmodel_distribution_traits;

    const posmodel_distribution_type&
    posmodel_distribution () const;

    posmodel_distribution_type&
    posmodel_distribution ();

    void
    posmodel_distribution (const posmodel_distribution_type& x);

    void
    posmodel_distribution (::std::unique_ptr< posmodel_distribution_type > p);

    // negmodel_distribution
    //
    typedef ::pepXML::negmodel_distribution negmodel_distribution_type;
    typedef ::xsd::cxx::tree::traits< negmodel_distribution_type, char > negmodel_distribution_traits;

    const negmodel_distribution_type&
    negmodel_distribution () const;

    negmodel_distribution_type&
    negmodel_distribution ();

    void
    negmodel_distribution (const negmodel_distribution_type& x);

    void
    negmodel_distribution (::std::unique_ptr< negmodel_distribution_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    mixturemodel_distribution ();

    mixturemodel_distribution (const posmodel_distribution_type&,
                               const negmodel_distribution_type&,
                               const name_type&);

    mixturemodel_distribution (::std::unique_ptr< posmodel_distribution_type >,
                               ::std::unique_ptr< negmodel_distribution_type >,
                               const name_type&);

    mixturemodel_distribution (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    mixturemodel_distribution (const mixturemodel_distribution& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual mixturemodel_distribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mixturemodel_distribution&
    operator= (const mixturemodel_distribution& x);

    virtual 
    ~mixturemodel_distribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< posmodel_distribution_type > posmodel_distribution_;
    ::xsd::cxx::tree::one< negmodel_distribution_type > negmodel_distribution_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class mixturemodel: public ::xml_schema::type
  {
    public:
    // point
    //
    typedef ::pepXML::point1 point_type;
    typedef ::xsd::cxx::tree::sequence< point_type > point_sequence;
    typedef point_sequence::iterator point_iterator;
    typedef point_sequence::const_iterator point_const_iterator;
    typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

    const point_sequence&
    point () const;

    point_sequence&
    point ();

    void
    point (const point_sequence& s);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // pos_bandwidth
    //
    typedef ::xml_schema::double_ pos_bandwidth_type;
    typedef ::xsd::cxx::tree::traits< pos_bandwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_bandwidth_traits;

    const pos_bandwidth_type&
    pos_bandwidth () const;

    pos_bandwidth_type&
    pos_bandwidth ();

    void
    pos_bandwidth (const pos_bandwidth_type& x);

    // neg_bandwidth
    //
    typedef ::xml_schema::double_ neg_bandwidth_type;
    typedef ::xsd::cxx::tree::traits< neg_bandwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > neg_bandwidth_traits;

    const neg_bandwidth_type&
    neg_bandwidth () const;

    neg_bandwidth_type&
    neg_bandwidth ();

    void
    neg_bandwidth (const neg_bandwidth_type& x);

    // Constructors.
    //
    mixturemodel ();

    mixturemodel (const name_type&,
                  const pos_bandwidth_type&,
                  const neg_bandwidth_type&);

    mixturemodel (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    mixturemodel (const mixturemodel& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual mixturemodel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mixturemodel&
    operator= (const mixturemodel& x);

    virtual 
    ~mixturemodel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    point_sequence point_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< pos_bandwidth_type > pos_bandwidth_;
    ::xsd::cxx::tree::one< neg_bandwidth_type > neg_bandwidth_;
  };

  class contributing_channel: public ::xml_schema::type
  {
    public:
    // affected_channel
    //
    typedef ::pepXML::affected_channel affected_channel_type;
    typedef ::xsd::cxx::tree::sequence< affected_channel_type > affected_channel_sequence;
    typedef affected_channel_sequence::iterator affected_channel_iterator;
    typedef affected_channel_sequence::const_iterator affected_channel_const_iterator;
    typedef ::xsd::cxx::tree::traits< affected_channel_type, char > affected_channel_traits;

    const affected_channel_sequence&
    affected_channel () const;

    affected_channel_sequence&
    affected_channel ();

    void
    affected_channel (const affected_channel_sequence& s);

    // channel
    //
    typedef ::pepXML::positiveInt channel_type;
    typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

    const channel_type&
    channel () const;

    channel_type&
    channel ();

    void
    channel (const channel_type& x);

    void
    channel (::std::unique_ptr< channel_type > p);

    // Constructors.
    //
    contributing_channel ();

    contributing_channel (const channel_type&);

    contributing_channel (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    contributing_channel (const contributing_channel& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual contributing_channel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    contributing_channel&
    operator= (const contributing_channel& x);

    virtual 
    ~contributing_channel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    affected_channel_sequence affected_channel_;
    ::xsd::cxx::tree::one< channel_type > channel_;
  };

  class specificity: public ::xml_schema::type
  {
    public:
    // sense
    //
    typedef ::pepXML::sense sense_type;
    typedef ::xsd::cxx::tree::traits< sense_type, char > sense_traits;

    const sense_type&
    sense () const;

    sense_type&
    sense ();

    void
    sense (const sense_type& x);

    void
    sense (::std::unique_ptr< sense_type > p);

    // min_spacing
    //
    typedef ::xml_schema::non_negative_integer min_spacing_type;
    typedef ::xsd::cxx::tree::traits< min_spacing_type, char > min_spacing_traits;

    const min_spacing_type&
    min_spacing () const;

    min_spacing_type&
    min_spacing ();

    void
    min_spacing (const min_spacing_type& x);

    static min_spacing_type
    min_spacing_default_value ();

    // cut
    //
    typedef ::pepXML::cut cut_type;
    typedef ::xsd::cxx::tree::traits< cut_type, char > cut_traits;

    const cut_type&
    cut () const;

    cut_type&
    cut ();

    void
    cut (const cut_type& x);

    void
    cut (::std::unique_ptr< cut_type > p);

    // no_cut
    //
    typedef ::pepXML::no_cut no_cut_type;
    typedef ::xsd::cxx::tree::optional< no_cut_type > no_cut_optional;
    typedef ::xsd::cxx::tree::traits< no_cut_type, char > no_cut_traits;

    const no_cut_optional&
    no_cut () const;

    no_cut_optional&
    no_cut ();

    void
    no_cut (const no_cut_type& x);

    void
    no_cut (const no_cut_optional& x);

    void
    no_cut (::std::unique_ptr< no_cut_type > p);

    // Constructors.
    //
    specificity ();

    specificity (const sense_type&,
                 const cut_type&);

    specificity (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    specificity (const specificity& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual specificity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    specificity&
    operator= (const specificity& x);

    virtual 
    ~specificity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sense_type > sense_;
    ::xsd::cxx::tree::one< min_spacing_type > min_spacing_;
    ::xsd::cxx::tree::one< cut_type > cut_;
    no_cut_optional no_cut_;
  };

  class name: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    name ();

    name (const char*);

    name (const ::std::string&);

    name (const ::xml_schema::string&);

    name (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    name (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    name (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    name (const name& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~name ();
  };

  class fidelity: public ::xml_schema::string
  {
    public:
    enum value
    {
      specific,
      semispecific,
      nonspecific
    };

    fidelity ();

    fidelity (value v);

    fidelity (const char* v);

    fidelity (const ::std::string& v);

    fidelity (const ::xml_schema::string& v);

    fidelity (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    fidelity (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    fidelity (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    fidelity (const fidelity& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual fidelity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fidelity&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_fidelity_convert ();
    }

    protected:
    value
    _xsd_fidelity_convert () const;

    public:
    static const char* const _xsd_fidelity_literals_[3];
    static const value _xsd_fidelity_indexes_[3];
  };

  class isotope_labeled: public ::xml_schema::string
  {
    public:
    enum value
    {
      Y,
      N
    };

    isotope_labeled ();

    isotope_labeled (value v);

    isotope_labeled (const char* v);

    isotope_labeled (const ::std::string& v);

    isotope_labeled (const ::xml_schema::string& v);

    isotope_labeled (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    isotope_labeled (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    isotope_labeled (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    isotope_labeled (const isotope_labeled& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual isotope_labeled*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    isotope_labeled&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_isotope_labeled_convert ();
    }

    protected:
    value
    _xsd_isotope_labeled_convert () const;

    public:
    static const char* const _xsd_isotope_labeled_literals_[2];
    static const value _xsd_isotope_labeled_indexes_[2];
  };

  class search_database: public ::xml_schema::type
  {
    public:
    // local_path
    //
    typedef ::xml_schema::string local_path_type;
    typedef ::xsd::cxx::tree::traits< local_path_type, char > local_path_traits;

    const local_path_type&
    local_path () const;

    local_path_type&
    local_path ();

    void
    local_path (const local_path_type& x);

    void
    local_path (::std::unique_ptr< local_path_type > p);

    // URL
    //
    typedef ::xml_schema::string URL_type;
    typedef ::xsd::cxx::tree::optional< URL_type > URL_optional;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_optional&
    URL () const;

    URL_optional&
    URL ();

    void
    URL (const URL_type& x);

    void
    URL (const URL_optional& x);

    void
    URL (::std::unique_ptr< URL_type > p);

    // database_name
    //
    typedef ::xml_schema::string database_name_type;
    typedef ::xsd::cxx::tree::optional< database_name_type > database_name_optional;
    typedef ::xsd::cxx::tree::traits< database_name_type, char > database_name_traits;

    const database_name_optional&
    database_name () const;

    database_name_optional&
    database_name ();

    void
    database_name (const database_name_type& x);

    void
    database_name (const database_name_optional& x);

    void
    database_name (::std::unique_ptr< database_name_type > p);

    // orig_database_url
    //
    typedef ::xml_schema::string orig_database_url_type;
    typedef ::xsd::cxx::tree::optional< orig_database_url_type > orig_database_url_optional;
    typedef ::xsd::cxx::tree::traits< orig_database_url_type, char > orig_database_url_traits;

    const orig_database_url_optional&
    orig_database_url () const;

    orig_database_url_optional&
    orig_database_url ();

    void
    orig_database_url (const orig_database_url_type& x);

    void
    orig_database_url (const orig_database_url_optional& x);

    void
    orig_database_url (::std::unique_ptr< orig_database_url_type > p);

    // database_release_date
    //
    typedef ::xml_schema::date_time database_release_date_type;
    typedef ::xsd::cxx::tree::optional< database_release_date_type > database_release_date_optional;
    typedef ::xsd::cxx::tree::traits< database_release_date_type, char > database_release_date_traits;

    const database_release_date_optional&
    database_release_date () const;

    database_release_date_optional&
    database_release_date ();

    void
    database_release_date (const database_release_date_type& x);

    void
    database_release_date (const database_release_date_optional& x);

    void
    database_release_date (::std::unique_ptr< database_release_date_type > p);

    // database_release_identifier
    //
    typedef ::xml_schema::string database_release_identifier_type;
    typedef ::xsd::cxx::tree::optional< database_release_identifier_type > database_release_identifier_optional;
    typedef ::xsd::cxx::tree::traits< database_release_identifier_type, char > database_release_identifier_traits;

    const database_release_identifier_optional&
    database_release_identifier () const;

    database_release_identifier_optional&
    database_release_identifier ();

    void
    database_release_identifier (const database_release_identifier_type& x);

    void
    database_release_identifier (const database_release_identifier_optional& x);

    void
    database_release_identifier (::std::unique_ptr< database_release_identifier_type > p);

    // size_in_db_entries
    //
    typedef ::xml_schema::non_negative_integer size_in_db_entries_type;
    typedef ::xsd::cxx::tree::optional< size_in_db_entries_type > size_in_db_entries_optional;
    typedef ::xsd::cxx::tree::traits< size_in_db_entries_type, char > size_in_db_entries_traits;

    const size_in_db_entries_optional&
    size_in_db_entries () const;

    size_in_db_entries_optional&
    size_in_db_entries ();

    void
    size_in_db_entries (const size_in_db_entries_type& x);

    void
    size_in_db_entries (const size_in_db_entries_optional& x);

    // size_of_residues
    //
    typedef ::xml_schema::non_negative_integer size_of_residues_type;
    typedef ::xsd::cxx::tree::optional< size_of_residues_type > size_of_residues_optional;
    typedef ::xsd::cxx::tree::traits< size_of_residues_type, char > size_of_residues_traits;

    const size_of_residues_optional&
    size_of_residues () const;

    size_of_residues_optional&
    size_of_residues ();

    void
    size_of_residues (const size_of_residues_type& x);

    void
    size_of_residues (const size_of_residues_optional& x);

    // type
    //
    typedef ::pepXML::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    search_database ();

    search_database (const local_path_type&,
                     const type_type&);

    search_database (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    search_database (const search_database& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual search_database*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    search_database&
    operator= (const search_database& x);

    virtual 
    ~search_database ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< local_path_type > local_path_;
    URL_optional URL_;
    database_name_optional database_name_;
    orig_database_url_optional orig_database_url_;
    database_release_date_optional database_release_date_;
    database_release_identifier_optional database_release_identifier_;
    size_in_db_entries_optional size_in_db_entries_;
    size_of_residues_optional size_of_residues_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class enzymatic_search_constraint: public ::xml_schema::type
  {
    public:
    // enzyme
    //
    typedef ::xml_schema::string enzyme_type;
    typedef ::xsd::cxx::tree::traits< enzyme_type, char > enzyme_traits;

    const enzyme_type&
    enzyme () const;

    enzyme_type&
    enzyme ();

    void
    enzyme (const enzyme_type& x);

    void
    enzyme (::std::unique_ptr< enzyme_type > p);

    // max_num_internal_cleavages
    //
    typedef ::xml_schema::non_negative_integer max_num_internal_cleavages_type;
    typedef ::xsd::cxx::tree::traits< max_num_internal_cleavages_type, char > max_num_internal_cleavages_traits;

    const max_num_internal_cleavages_type&
    max_num_internal_cleavages () const;

    max_num_internal_cleavages_type&
    max_num_internal_cleavages ();

    void
    max_num_internal_cleavages (const max_num_internal_cleavages_type& x);

    // min_number_termini
    //
    typedef ::xml_schema::non_negative_integer min_number_termini_type;
    typedef ::xsd::cxx::tree::traits< min_number_termini_type, char > min_number_termini_traits;

    const min_number_termini_type&
    min_number_termini () const;

    min_number_termini_type&
    min_number_termini ();

    void
    min_number_termini (const min_number_termini_type& x);

    // Constructors.
    //
    enzymatic_search_constraint ();

    enzymatic_search_constraint (const enzyme_type&,
                                 const max_num_internal_cleavages_type&,
                                 const min_number_termini_type&);

    enzymatic_search_constraint (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    enzymatic_search_constraint (const enzymatic_search_constraint& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual enzymatic_search_constraint*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enzymatic_search_constraint&
    operator= (const enzymatic_search_constraint& x);

    virtual 
    ~enzymatic_search_constraint ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< enzyme_type > enzyme_;
    ::xsd::cxx::tree::one< max_num_internal_cleavages_type > max_num_internal_cleavages_;
    ::xsd::cxx::tree::one< min_number_termini_type > min_number_termini_;
  };

  class sequence_search_constraint: public ::xml_schema::type
  {
    public:
    // sequence
    //
    typedef ::xml_schema::string sequence_type;
    typedef ::xsd::cxx::tree::traits< sequence_type, char > sequence_traits;

    const sequence_type&
    sequence () const;

    sequence_type&
    sequence ();

    void
    sequence (const sequence_type& x);

    void
    sequence (::std::unique_ptr< sequence_type > p);

    // Constructors.
    //
    sequence_search_constraint ();

    sequence_search_constraint (const sequence_type&);

    sequence_search_constraint (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    sequence_search_constraint (const sequence_search_constraint& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual sequence_search_constraint*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sequence_search_constraint&
    operator= (const sequence_search_constraint& x);

    virtual 
    ~sequence_search_constraint ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sequence_type > sequence_;
  };

  class aminoacid_modification: public ::xml_schema::type
  {
    public:
    // aminoacid
    //
    typedef ::xml_schema::string aminoacid_type;
    typedef ::xsd::cxx::tree::traits< aminoacid_type, char > aminoacid_traits;

    const aminoacid_type&
    aminoacid () const;

    aminoacid_type&
    aminoacid ();

    void
    aminoacid (const aminoacid_type& x);

    void
    aminoacid (::std::unique_ptr< aminoacid_type > p);

    // massdiff
    //
    typedef ::xml_schema::double_ massdiff_type;
    typedef ::xsd::cxx::tree::traits< massdiff_type, char, ::xsd::cxx::tree::schema_type::double_ > massdiff_traits;

    const massdiff_type&
    massdiff () const;

    massdiff_type&
    massdiff ();

    void
    massdiff (const massdiff_type& x);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // variable
    //
    typedef ::xml_schema::string variable_type;
    typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

    const variable_type&
    variable () const;

    variable_type&
    variable ();

    void
    variable (const variable_type& x);

    void
    variable (::std::unique_ptr< variable_type > p);

    // peptide_terminus
    //
    typedef ::xml_schema::string peptide_terminus_type;
    typedef ::xsd::cxx::tree::optional< peptide_terminus_type > peptide_terminus_optional;
    typedef ::xsd::cxx::tree::traits< peptide_terminus_type, char > peptide_terminus_traits;

    const peptide_terminus_optional&
    peptide_terminus () const;

    peptide_terminus_optional&
    peptide_terminus ();

    void
    peptide_terminus (const peptide_terminus_type& x);

    void
    peptide_terminus (const peptide_terminus_optional& x);

    void
    peptide_terminus (::std::unique_ptr< peptide_terminus_type > p);

    // protein_terminus
    //
    typedef ::xml_schema::string protein_terminus_type;
    typedef ::xsd::cxx::tree::optional< protein_terminus_type > protein_terminus_optional;
    typedef ::xsd::cxx::tree::traits< protein_terminus_type, char > protein_terminus_traits;

    const protein_terminus_optional&
    protein_terminus () const;

    protein_terminus_optional&
    protein_terminus ();

    void
    protein_terminus (const protein_terminus_type& x);

    void
    protein_terminus (const protein_terminus_optional& x);

    void
    protein_terminus (::std::unique_ptr< protein_terminus_type > p);

    // symbol
    //
    typedef ::pepXML::aa_symbolType symbol_type;
    typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_optional&
    symbol () const;

    symbol_optional&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (const symbol_optional& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // binary
    //
    typedef ::xml_schema::string binary_type;
    typedef ::xsd::cxx::tree::optional< binary_type > binary_optional;
    typedef ::xsd::cxx::tree::traits< binary_type, char > binary_traits;

    const binary_optional&
    binary () const;

    binary_optional&
    binary ();

    void
    binary (const binary_type& x);

    void
    binary (const binary_optional& x);

    void
    binary (::std::unique_ptr< binary_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::unique_ptr< description_type > p);

    // Constructors.
    //
    aminoacid_modification ();

    aminoacid_modification (const aminoacid_type&,
                            const massdiff_type&,
                            const mass_type&,
                            const variable_type&);

    aminoacid_modification (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    aminoacid_modification (const aminoacid_modification& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual aminoacid_modification*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    aminoacid_modification&
    operator= (const aminoacid_modification& x);

    virtual 
    ~aminoacid_modification ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< aminoacid_type > aminoacid_;
    ::xsd::cxx::tree::one< massdiff_type > massdiff_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< variable_type > variable_;
    peptide_terminus_optional peptide_terminus_;
    protein_terminus_optional protein_terminus_;
    symbol_optional symbol_;
    binary_optional binary_;
    description_optional description_;
  };

  class terminal_modification: public ::xml_schema::type
  {
    public:
    // terminus
    //
    typedef ::xml_schema::string terminus_type;
    typedef ::xsd::cxx::tree::traits< terminus_type, char > terminus_traits;

    const terminus_type&
    terminus () const;

    terminus_type&
    terminus ();

    void
    terminus (const terminus_type& x);

    void
    terminus (::std::unique_ptr< terminus_type > p);

    // massdiff
    //
    typedef ::xml_schema::double_ massdiff_type;
    typedef ::xsd::cxx::tree::traits< massdiff_type, char, ::xsd::cxx::tree::schema_type::double_ > massdiff_traits;

    const massdiff_type&
    massdiff () const;

    massdiff_type&
    massdiff ();

    void
    massdiff (const massdiff_type& x);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // variable
    //
    typedef ::xml_schema::string variable_type;
    typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

    const variable_type&
    variable () const;

    variable_type&
    variable ();

    void
    variable (const variable_type& x);

    void
    variable (::std::unique_ptr< variable_type > p);

    // symbol
    //
    typedef ::pepXML::term_symbolType symbol_type;
    typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_optional&
    symbol () const;

    symbol_optional&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (const symbol_optional& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // protein_terminus
    //
    typedef ::xml_schema::string protein_terminus_type;
    typedef ::xsd::cxx::tree::traits< protein_terminus_type, char > protein_terminus_traits;

    const protein_terminus_type&
    protein_terminus () const;

    protein_terminus_type&
    protein_terminus ();

    void
    protein_terminus (const protein_terminus_type& x);

    void
    protein_terminus (::std::unique_ptr< protein_terminus_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::unique_ptr< description_type > p);

    // Constructors.
    //
    terminal_modification ();

    terminal_modification (const terminus_type&,
                           const massdiff_type&,
                           const mass_type&,
                           const variable_type&,
                           const protein_terminus_type&);

    terminal_modification (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    terminal_modification (const terminal_modification& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual terminal_modification*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    terminal_modification&
    operator= (const terminal_modification& x);

    virtual 
    ~terminal_modification ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< terminus_type > terminus_;
    ::xsd::cxx::tree::one< massdiff_type > massdiff_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< variable_type > variable_;
    symbol_optional symbol_;
    ::xsd::cxx::tree::one< protein_terminus_type > protein_terminus_;
    description_optional description_;
  };

  class search_result: public ::xml_schema::type
  {
    public:
    // search_hit
    //
    typedef ::pepXML::search_hit search_hit_type;
    typedef ::xsd::cxx::tree::sequence< search_hit_type > search_hit_sequence;
    typedef search_hit_sequence::iterator search_hit_iterator;
    typedef search_hit_sequence::const_iterator search_hit_const_iterator;
    typedef ::xsd::cxx::tree::traits< search_hit_type, char > search_hit_traits;

    const search_hit_sequence&
    search_hit () const;

    search_hit_sequence&
    search_hit ();

    void
    search_hit (const search_hit_sequence& s);

    // search_id
    //
    typedef ::pepXML::positiveInt search_id_type;
    typedef ::xsd::cxx::tree::traits< search_id_type, char > search_id_traits;

    const search_id_type&
    search_id () const;

    search_id_type&
    search_id ();

    void
    search_id (const search_id_type& x);

    void
    search_id (::std::unique_ptr< search_id_type > p);

    static search_id_type
    search_id_default_value ();

    // Constructors.
    //
    search_result ();

    search_result (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    search_result (const search_result& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual search_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    search_result&
    operator= (const search_result& x);

    virtual 
    ~search_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    search_hit_sequence search_hit_;
    ::xsd::cxx::tree::one< search_id_type > search_id_;
  };

  class posmodel_distribution: public ::xml_schema::type
  {
    public:
    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // type
    //
    typedef ::pepXML::model_dis_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    posmodel_distribution ();

    posmodel_distribution (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    posmodel_distribution (const posmodel_distribution& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual posmodel_distribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    posmodel_distribution&
    operator= (const posmodel_distribution& x);

    virtual 
    ~posmodel_distribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    parameter_sequence parameter_;
    type_optional type_;
  };

  class negmodel_distribution: public ::xml_schema::type
  {
    public:
    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // type
    //
    typedef ::pepXML::model_dis_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    negmodel_distribution ();

    negmodel_distribution (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    negmodel_distribution (const negmodel_distribution& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual negmodel_distribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    negmodel_distribution&
    operator= (const negmodel_distribution& x);

    virtual 
    ~negmodel_distribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    parameter_sequence parameter_;
    type_optional type_;
  };

  class point1: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    // pos_dens
    //
    typedef ::xml_schema::double_ pos_dens_type;
    typedef ::xsd::cxx::tree::optional< pos_dens_type > pos_dens_optional;
    typedef ::xsd::cxx::tree::traits< pos_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > pos_dens_traits;

    const pos_dens_optional&
    pos_dens () const;

    pos_dens_optional&
    pos_dens ();

    void
    pos_dens (const pos_dens_type& x);

    void
    pos_dens (const pos_dens_optional& x);

    // neg_dens
    //
    typedef ::xml_schema::double_ neg_dens_type;
    typedef ::xsd::cxx::tree::optional< neg_dens_type > neg_dens_optional;
    typedef ::xsd::cxx::tree::traits< neg_dens_type, char, ::xsd::cxx::tree::schema_type::double_ > neg_dens_traits;

    const neg_dens_optional&
    neg_dens () const;

    neg_dens_optional&
    neg_dens ();

    void
    neg_dens (const neg_dens_type& x);

    void
    neg_dens (const neg_dens_optional& x);

    // Constructors.
    //
    point1 ();

    point1 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    point1 (const point1& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual point1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    point1&
    operator= (const point1& x);

    virtual 
    ~point1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    value_optional value_;
    pos_dens_optional pos_dens_;
    neg_dens_optional neg_dens_;
  };

  class affected_channel: public ::xml_schema::type
  {
    public:
    // channel
    //
    typedef ::pepXML::positiveInt channel_type;
    typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

    const channel_type&
    channel () const;

    channel_type&
    channel ();

    void
    channel (const channel_type& x);

    void
    channel (::std::unique_ptr< channel_type > p);

    // correction
    //
    typedef ::xml_schema::double_ correction_type;
    typedef ::xsd::cxx::tree::traits< correction_type, char, ::xsd::cxx::tree::schema_type::double_ > correction_traits;

    const correction_type&
    correction () const;

    correction_type&
    correction ();

    void
    correction (const correction_type& x);

    // Constructors.
    //
    affected_channel ();

    affected_channel (const channel_type&,
                      const correction_type&);

    affected_channel (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    affected_channel (const affected_channel& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual affected_channel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    affected_channel&
    operator= (const affected_channel& x);

    virtual 
    ~affected_channel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< channel_type > channel_;
    ::xsd::cxx::tree::one< correction_type > correction_;
  };

  class sense: public ::xml_schema::string
  {
    public:
    enum value
    {
      C,
      N
    };

    sense ();

    sense (value v);

    sense (const char* v);

    sense (const ::std::string& v);

    sense (const ::xml_schema::string& v);

    sense (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    sense (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    sense (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    sense (const sense& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual sense*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sense&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_sense_convert ();
    }

    protected:
    value
    _xsd_sense_convert () const;

    public:
    static const char* const _xsd_sense_literals_[2];
    static const value _xsd_sense_indexes_[2];
  };

  class cut: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    cut ();

    cut (const char*);

    cut (const ::std::string&);

    cut (const ::xml_schema::string&);

    cut (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    cut (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    cut (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    cut (const cut& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual cut*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~cut ();
  };

  class no_cut: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    no_cut ();

    no_cut (const char*);

    no_cut (const ::std::string&);

    no_cut (const ::xml_schema::string&);

    no_cut (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    no_cut (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    no_cut (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    no_cut (const no_cut& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual no_cut*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~no_cut ();
  };

  class type: public ::xml_schema::string
  {
    public:
    enum value
    {
      AA,
      NA
    };

    type ();

    type (value v);

    type (const char* v);

    type (const ::std::string& v);

    type (const ::xml_schema::string& v);

    type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const type& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_type_convert ();
    }

    protected:
    value
    _xsd_type_convert () const;

    public:
    static const char* const _xsd_type_literals_[2];
    static const value _xsd_type_indexes_[2];
  };

  class search_hit: public ::xml_schema::type
  {
    public:
    // alternative_protein
    //
    typedef ::pepXML::altProteinDataType alternative_protein_type;
    typedef ::xsd::cxx::tree::sequence< alternative_protein_type > alternative_protein_sequence;
    typedef alternative_protein_sequence::iterator alternative_protein_iterator;
    typedef alternative_protein_sequence::const_iterator alternative_protein_const_iterator;
    typedef ::xsd::cxx::tree::traits< alternative_protein_type, char > alternative_protein_traits;

    const alternative_protein_sequence&
    alternative_protein () const;

    alternative_protein_sequence&
    alternative_protein ();

    void
    alternative_protein (const alternative_protein_sequence& s);

    // modification_info
    //
    typedef ::pepXML::modInfoDataType modification_info_type;
    typedef ::xsd::cxx::tree::optional< modification_info_type > modification_info_optional;
    typedef ::xsd::cxx::tree::traits< modification_info_type, char > modification_info_traits;

    const modification_info_optional&
    modification_info () const;

    modification_info_optional&
    modification_info ();

    void
    modification_info (const modification_info_type& x);

    void
    modification_info (const modification_info_optional& x);

    void
    modification_info (::std::unique_ptr< modification_info_type > p);

    // xlink
    //
    typedef ::pepXML::xlink xlink_type;
    typedef ::xsd::cxx::tree::optional< xlink_type > xlink_optional;
    typedef ::xsd::cxx::tree::traits< xlink_type, char > xlink_traits;

    const xlink_optional&
    xlink () const;

    xlink_optional&
    xlink ();

    void
    xlink (const xlink_type& x);

    void
    xlink (const xlink_optional& x);

    void
    xlink (::std::unique_ptr< xlink_type > p);

    // search_score
    //
    typedef ::pepXML::nameValueType search_score_type;
    typedef ::xsd::cxx::tree::sequence< search_score_type > search_score_sequence;
    typedef search_score_sequence::iterator search_score_iterator;
    typedef search_score_sequence::const_iterator search_score_const_iterator;
    typedef ::xsd::cxx::tree::traits< search_score_type, char > search_score_traits;

    const search_score_sequence&
    search_score () const;

    search_score_sequence&
    search_score ();

    void
    search_score (const search_score_sequence& s);

    // analysis_result
    //
    typedef ::pepXML::analysis_result analysis_result_type;
    typedef ::xsd::cxx::tree::sequence< analysis_result_type > analysis_result_sequence;
    typedef analysis_result_sequence::iterator analysis_result_iterator;
    typedef analysis_result_sequence::const_iterator analysis_result_const_iterator;
    typedef ::xsd::cxx::tree::traits< analysis_result_type, char > analysis_result_traits;

    const analysis_result_sequence&
    analysis_result () const;

    analysis_result_sequence&
    analysis_result ();

    void
    analysis_result (const analysis_result_sequence& s);

    // parameter
    //
    typedef ::pepXML::nameValueType parameter_type;
    typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
    typedef parameter_sequence::iterator parameter_iterator;
    typedef parameter_sequence::const_iterator parameter_const_iterator;
    typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

    const parameter_sequence&
    parameter () const;

    parameter_sequence&
    parameter ();

    void
    parameter (const parameter_sequence& s);

    // hit_rank
    //
    typedef ::pepXML::positiveInt hit_rank_type;
    typedef ::xsd::cxx::tree::traits< hit_rank_type, char > hit_rank_traits;

    const hit_rank_type&
    hit_rank () const;

    hit_rank_type&
    hit_rank ();

    void
    hit_rank (const hit_rank_type& x);

    void
    hit_rank (::std::unique_ptr< hit_rank_type > p);

    // peptide
    //
    typedef ::xml_schema::string peptide_type;
    typedef ::xsd::cxx::tree::traits< peptide_type, char > peptide_traits;

    const peptide_type&
    peptide () const;

    peptide_type&
    peptide ();

    void
    peptide (const peptide_type& x);

    void
    peptide (::std::unique_ptr< peptide_type > p);

    // peptide_prev_aa
    //
    typedef ::xml_schema::string peptide_prev_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_prev_aa_type > peptide_prev_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_prev_aa_type, char > peptide_prev_aa_traits;

    const peptide_prev_aa_optional&
    peptide_prev_aa () const;

    peptide_prev_aa_optional&
    peptide_prev_aa ();

    void
    peptide_prev_aa (const peptide_prev_aa_type& x);

    void
    peptide_prev_aa (const peptide_prev_aa_optional& x);

    void
    peptide_prev_aa (::std::unique_ptr< peptide_prev_aa_type > p);

    // peptide_next_aa
    //
    typedef ::xml_schema::string peptide_next_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_next_aa_type > peptide_next_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_next_aa_type, char > peptide_next_aa_traits;

    const peptide_next_aa_optional&
    peptide_next_aa () const;

    peptide_next_aa_optional&
    peptide_next_aa ();

    void
    peptide_next_aa (const peptide_next_aa_type& x);

    void
    peptide_next_aa (const peptide_next_aa_optional& x);

    void
    peptide_next_aa (::std::unique_ptr< peptide_next_aa_type > p);

    // protein
    //
    typedef ::xml_schema::string protein_type;
    typedef ::xsd::cxx::tree::traits< protein_type, char > protein_traits;

    const protein_type&
    protein () const;

    protein_type&
    protein ();

    void
    protein (const protein_type& x);

    void
    protein (::std::unique_ptr< protein_type > p);

    // num_tot_proteins
    //
    typedef ::xml_schema::unsigned_int num_tot_proteins_type;
    typedef ::xsd::cxx::tree::traits< num_tot_proteins_type, char > num_tot_proteins_traits;

    const num_tot_proteins_type&
    num_tot_proteins () const;

    num_tot_proteins_type&
    num_tot_proteins ();

    void
    num_tot_proteins (const num_tot_proteins_type& x);

    // num_matched_ions
    //
    typedef ::xml_schema::non_negative_integer num_matched_ions_type;
    typedef ::xsd::cxx::tree::optional< num_matched_ions_type > num_matched_ions_optional;
    typedef ::xsd::cxx::tree::traits< num_matched_ions_type, char > num_matched_ions_traits;

    const num_matched_ions_optional&
    num_matched_ions () const;

    num_matched_ions_optional&
    num_matched_ions ();

    void
    num_matched_ions (const num_matched_ions_type& x);

    void
    num_matched_ions (const num_matched_ions_optional& x);

    // tot_num_ions
    //
    typedef ::xml_schema::non_negative_integer tot_num_ions_type;
    typedef ::xsd::cxx::tree::optional< tot_num_ions_type > tot_num_ions_optional;
    typedef ::xsd::cxx::tree::traits< tot_num_ions_type, char > tot_num_ions_traits;

    const tot_num_ions_optional&
    tot_num_ions () const;

    tot_num_ions_optional&
    tot_num_ions ();

    void
    tot_num_ions (const tot_num_ions_type& x);

    void
    tot_num_ions (const tot_num_ions_optional& x);

    // calc_neutral_pep_mass
    //
    typedef ::xml_schema::double_ calc_neutral_pep_mass_type;
    typedef ::xsd::cxx::tree::traits< calc_neutral_pep_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > calc_neutral_pep_mass_traits;

    const calc_neutral_pep_mass_type&
    calc_neutral_pep_mass () const;

    calc_neutral_pep_mass_type&
    calc_neutral_pep_mass ();

    void
    calc_neutral_pep_mass (const calc_neutral_pep_mass_type& x);

    // massdiff
    //
    typedef ::xml_schema::double_ massdiff_type;
    typedef ::xsd::cxx::tree::traits< massdiff_type, char, ::xsd::cxx::tree::schema_type::double_ > massdiff_traits;

    const massdiff_type&
    massdiff () const;

    massdiff_type&
    massdiff ();

    void
    massdiff (const massdiff_type& x);

    // num_tol_term
    //
    typedef ::xml_schema::non_negative_integer num_tol_term_type;
    typedef ::xsd::cxx::tree::optional< num_tol_term_type > num_tol_term_optional;
    typedef ::xsd::cxx::tree::traits< num_tol_term_type, char > num_tol_term_traits;

    const num_tol_term_optional&
    num_tol_term () const;

    num_tol_term_optional&
    num_tol_term ();

    void
    num_tol_term (const num_tol_term_type& x);

    void
    num_tol_term (const num_tol_term_optional& x);

    // num_missed_cleavages
    //
    typedef ::xml_schema::integer num_missed_cleavages_type;
    typedef ::xsd::cxx::tree::optional< num_missed_cleavages_type > num_missed_cleavages_optional;
    typedef ::xsd::cxx::tree::traits< num_missed_cleavages_type, char > num_missed_cleavages_traits;

    const num_missed_cleavages_optional&
    num_missed_cleavages () const;

    num_missed_cleavages_optional&
    num_missed_cleavages ();

    void
    num_missed_cleavages (const num_missed_cleavages_type& x);

    void
    num_missed_cleavages (const num_missed_cleavages_optional& x);

    // num_matched_peptides
    //
    typedef ::xml_schema::integer num_matched_peptides_type;
    typedef ::xsd::cxx::tree::optional< num_matched_peptides_type > num_matched_peptides_optional;
    typedef ::xsd::cxx::tree::traits< num_matched_peptides_type, char > num_matched_peptides_traits;

    const num_matched_peptides_optional&
    num_matched_peptides () const;

    num_matched_peptides_optional&
    num_matched_peptides ();

    void
    num_matched_peptides (const num_matched_peptides_type& x);

    void
    num_matched_peptides (const num_matched_peptides_optional& x);

    // xlink_type
    //
    typedef ::pepXML::xlink_type xlink_type_type;
    typedef ::xsd::cxx::tree::optional< xlink_type_type > xlink_type_optional;
    typedef ::xsd::cxx::tree::traits< xlink_type_type, char > xlink_type_traits;

    const xlink_type_optional&
    xlink_type1 () const;

    xlink_type_optional&
    xlink_type1 ();

    void
    xlink_type1 (const xlink_type_type& x);

    void
    xlink_type1 (const xlink_type_optional& x);

    void
    xlink_type1 (::std::unique_ptr< xlink_type_type > p);

    // is_rejected
    //
    typedef ::pepXML::is_rejected is_rejected_type;
    typedef ::xsd::cxx::tree::traits< is_rejected_type, char > is_rejected_traits;

    const is_rejected_type&
    is_rejected () const;

    is_rejected_type&
    is_rejected ();

    void
    is_rejected (const is_rejected_type& x);

    void
    is_rejected (::std::unique_ptr< is_rejected_type > p);

    static is_rejected_type
    is_rejected_default_value ();

    // protein_descr
    //
    typedef ::xml_schema::string protein_descr_type;
    typedef ::xsd::cxx::tree::optional< protein_descr_type > protein_descr_optional;
    typedef ::xsd::cxx::tree::traits< protein_descr_type, char > protein_descr_traits;

    const protein_descr_optional&
    protein_descr () const;

    protein_descr_optional&
    protein_descr ();

    void
    protein_descr (const protein_descr_type& x);

    void
    protein_descr (const protein_descr_optional& x);

    void
    protein_descr (::std::unique_ptr< protein_descr_type > p);

    // calc_pI
    //
    typedef ::xml_schema::string calc_pI_type;
    typedef ::xsd::cxx::tree::optional< calc_pI_type > calc_pI_optional;
    typedef ::xsd::cxx::tree::traits< calc_pI_type, char > calc_pI_traits;

    const calc_pI_optional&
    calc_pI () const;

    calc_pI_optional&
    calc_pI ();

    void
    calc_pI (const calc_pI_type& x);

    void
    calc_pI (const calc_pI_optional& x);

    void
    calc_pI (::std::unique_ptr< calc_pI_type > p);

    // protein_mw
    //
    typedef ::xml_schema::double_ protein_mw_type;
    typedef ::xsd::cxx::tree::optional< protein_mw_type > protein_mw_optional;
    typedef ::xsd::cxx::tree::traits< protein_mw_type, char, ::xsd::cxx::tree::schema_type::double_ > protein_mw_traits;

    const protein_mw_optional&
    protein_mw () const;

    protein_mw_optional&
    protein_mw ();

    void
    protein_mw (const protein_mw_type& x);

    void
    protein_mw (const protein_mw_optional& x);

    // Constructors.
    //
    search_hit ();

    search_hit (const hit_rank_type&,
                const peptide_type&,
                const protein_type&,
                const num_tot_proteins_type&,
                const calc_neutral_pep_mass_type&,
                const massdiff_type&);

    search_hit (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    search_hit (const search_hit& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual search_hit*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    search_hit&
    operator= (const search_hit& x);

    virtual 
    ~search_hit ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    alternative_protein_sequence alternative_protein_;
    modification_info_optional modification_info_;
    xlink_optional xlink_;
    search_score_sequence search_score_;
    analysis_result_sequence analysis_result_;
    parameter_sequence parameter_;
    ::xsd::cxx::tree::one< hit_rank_type > hit_rank_;
    ::xsd::cxx::tree::one< peptide_type > peptide_;
    peptide_prev_aa_optional peptide_prev_aa_;
    peptide_next_aa_optional peptide_next_aa_;
    ::xsd::cxx::tree::one< protein_type > protein_;
    ::xsd::cxx::tree::one< num_tot_proteins_type > num_tot_proteins_;
    num_matched_ions_optional num_matched_ions_;
    tot_num_ions_optional tot_num_ions_;
    ::xsd::cxx::tree::one< calc_neutral_pep_mass_type > calc_neutral_pep_mass_;
    ::xsd::cxx::tree::one< massdiff_type > massdiff_;
    num_tol_term_optional num_tol_term_;
    num_missed_cleavages_optional num_missed_cleavages_;
    num_matched_peptides_optional num_matched_peptides_;
    xlink_type_optional xlink_type_;
    ::xsd::cxx::tree::one< is_rejected_type > is_rejected_;
    protein_descr_optional protein_descr_;
    calc_pI_optional calc_pI_;
    protein_mw_optional protein_mw_;
  };

  class xlink: public ::xml_schema::type
  {
    public:
    // linked_peptide
    //
    typedef ::pepXML::linked_peptide linked_peptide_type;
    typedef ::xsd::cxx::tree::sequence< linked_peptide_type > linked_peptide_sequence;
    typedef linked_peptide_sequence::iterator linked_peptide_iterator;
    typedef linked_peptide_sequence::const_iterator linked_peptide_const_iterator;
    typedef ::xsd::cxx::tree::traits< linked_peptide_type, char > linked_peptide_traits;

    const linked_peptide_sequence&
    linked_peptide () const;

    linked_peptide_sequence&
    linked_peptide ();

    void
    linked_peptide (const linked_peptide_sequence& s);

    // xlink_score
    //
    typedef ::pepXML::nameValueType xlink_score_type;
    typedef ::xsd::cxx::tree::sequence< xlink_score_type > xlink_score_sequence;
    typedef xlink_score_sequence::iterator xlink_score_iterator;
    typedef xlink_score_sequence::const_iterator xlink_score_const_iterator;
    typedef ::xsd::cxx::tree::traits< xlink_score_type, char > xlink_score_traits;

    const xlink_score_sequence&
    xlink_score () const;

    xlink_score_sequence&
    xlink_score ();

    void
    xlink_score (const xlink_score_sequence& s);

    // identifier
    //
    typedef ::xml_schema::string identifier_type;
    typedef ::xsd::cxx::tree::traits< identifier_type, char > identifier_traits;

    const identifier_type&
    identifier () const;

    identifier_type&
    identifier ();

    void
    identifier (const identifier_type& x);

    void
    identifier (::std::unique_ptr< identifier_type > p);

    // mass
    //
    typedef ::xml_schema::double_ mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    // Constructors.
    //
    xlink ();

    xlink (const identifier_type&,
           const mass_type&);

    xlink (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    xlink (const xlink& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual xlink*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    xlink&
    operator= (const xlink& x);

    virtual 
    ~xlink ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    linked_peptide_sequence linked_peptide_;
    xlink_score_sequence xlink_score_;
    ::xsd::cxx::tree::one< identifier_type > identifier_;
    ::xsd::cxx::tree::one< mass_type > mass_;
  };

  class analysis_result: public ::xml_schema::type
  {
    public:
    // analysis
    //
    typedef ::xml_schema::string analysis_type;
    typedef ::xsd::cxx::tree::traits< analysis_type, char > analysis_traits;

    const analysis_type&
    analysis () const;

    analysis_type&
    analysis ();

    void
    analysis (const analysis_type& x);

    void
    analysis (::std::unique_ptr< analysis_type > p);

    // id
    //
    typedef ::pepXML::positiveInt id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    static id_type
    id_default_value ();

    // Constructors.
    //
    analysis_result ();

    analysis_result (const analysis_type&);

    analysis_result (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    analysis_result (const analysis_result& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual analysis_result*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    analysis_result&
    operator= (const analysis_result& x);

    virtual 
    ~analysis_result ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< analysis_type > analysis_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class xlink_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      na,
      xl,
      loop
    };

    xlink_type ();

    xlink_type (value v);

    xlink_type (const char* v);

    xlink_type (const ::std::string& v);

    xlink_type (const ::xml_schema::string& v);

    xlink_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    xlink_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    xlink_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    xlink_type (const xlink_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual xlink_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    xlink_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_xlink_type_convert ();
    }

    protected:
    value
    _xsd_xlink_type_convert () const;

    public:
    static const char* const _xsd_xlink_type_literals_[3];
    static const value _xsd_xlink_type_indexes_[3];
  };

  class is_rejected: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    is_rejected ();

    is_rejected (::xml_schema::non_negative_integer v);

    is_rejected (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    is_rejected (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    is_rejected (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    is_rejected (const is_rejected& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual is_rejected*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class linked_peptide: public ::xml_schema::type
  {
    public:
    // alternative_protein
    //
    typedef ::pepXML::altProteinDataType alternative_protein_type;
    typedef ::xsd::cxx::tree::sequence< alternative_protein_type > alternative_protein_sequence;
    typedef alternative_protein_sequence::iterator alternative_protein_iterator;
    typedef alternative_protein_sequence::const_iterator alternative_protein_const_iterator;
    typedef ::xsd::cxx::tree::traits< alternative_protein_type, char > alternative_protein_traits;

    const alternative_protein_sequence&
    alternative_protein () const;

    alternative_protein_sequence&
    alternative_protein ();

    void
    alternative_protein (const alternative_protein_sequence& s);

    // modification_info
    //
    typedef ::pepXML::modInfoDataType modification_info_type;
    typedef ::xsd::cxx::tree::optional< modification_info_type > modification_info_optional;
    typedef ::xsd::cxx::tree::traits< modification_info_type, char > modification_info_traits;

    const modification_info_optional&
    modification_info () const;

    modification_info_optional&
    modification_info ();

    void
    modification_info (const modification_info_type& x);

    void
    modification_info (const modification_info_optional& x);

    void
    modification_info (::std::unique_ptr< modification_info_type > p);

    // xlink_score
    //
    typedef ::pepXML::nameValueType xlink_score_type;
    typedef ::xsd::cxx::tree::sequence< xlink_score_type > xlink_score_sequence;
    typedef xlink_score_sequence::iterator xlink_score_iterator;
    typedef xlink_score_sequence::const_iterator xlink_score_const_iterator;
    typedef ::xsd::cxx::tree::traits< xlink_score_type, char > xlink_score_traits;

    const xlink_score_sequence&
    xlink_score () const;

    xlink_score_sequence&
    xlink_score ();

    void
    xlink_score (const xlink_score_sequence& s);

    // peptide
    //
    typedef ::xml_schema::string peptide_type;
    typedef ::xsd::cxx::tree::traits< peptide_type, char > peptide_traits;

    const peptide_type&
    peptide () const;

    peptide_type&
    peptide ();

    void
    peptide (const peptide_type& x);

    void
    peptide (::std::unique_ptr< peptide_type > p);

    // peptide_prev_aa
    //
    typedef ::xml_schema::string peptide_prev_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_prev_aa_type > peptide_prev_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_prev_aa_type, char > peptide_prev_aa_traits;

    const peptide_prev_aa_optional&
    peptide_prev_aa () const;

    peptide_prev_aa_optional&
    peptide_prev_aa ();

    void
    peptide_prev_aa (const peptide_prev_aa_type& x);

    void
    peptide_prev_aa (const peptide_prev_aa_optional& x);

    void
    peptide_prev_aa (::std::unique_ptr< peptide_prev_aa_type > p);

    // peptide_next_aa
    //
    typedef ::xml_schema::string peptide_next_aa_type;
    typedef ::xsd::cxx::tree::optional< peptide_next_aa_type > peptide_next_aa_optional;
    typedef ::xsd::cxx::tree::traits< peptide_next_aa_type, char > peptide_next_aa_traits;

    const peptide_next_aa_optional&
    peptide_next_aa () const;

    peptide_next_aa_optional&
    peptide_next_aa ();

    void
    peptide_next_aa (const peptide_next_aa_type& x);

    void
    peptide_next_aa (const peptide_next_aa_optional& x);

    void
    peptide_next_aa (::std::unique_ptr< peptide_next_aa_type > p);

    // protein
    //
    typedef ::xml_schema::string protein_type;
    typedef ::xsd::cxx::tree::traits< protein_type, char > protein_traits;

    const protein_type&
    protein () const;

    protein_type&
    protein ();

    void
    protein (const protein_type& x);

    void
    protein (::std::unique_ptr< protein_type > p);

    // num_tot_proteins
    //
    typedef ::xml_schema::unsigned_int num_tot_proteins_type;
    typedef ::xsd::cxx::tree::traits< num_tot_proteins_type, char > num_tot_proteins_traits;

    const num_tot_proteins_type&
    num_tot_proteins () const;

    num_tot_proteins_type&
    num_tot_proteins ();

    void
    num_tot_proteins (const num_tot_proteins_type& x);

    // calc_neutral_pep_mass
    //
    typedef ::xml_schema::double_ calc_neutral_pep_mass_type;
    typedef ::xsd::cxx::tree::traits< calc_neutral_pep_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > calc_neutral_pep_mass_traits;

    const calc_neutral_pep_mass_type&
    calc_neutral_pep_mass () const;

    calc_neutral_pep_mass_type&
    calc_neutral_pep_mass ();

    void
    calc_neutral_pep_mass (const calc_neutral_pep_mass_type& x);

    // complement_mass
    //
    typedef ::xml_schema::double_ complement_mass_type;
    typedef ::xsd::cxx::tree::traits< complement_mass_type, char, ::xsd::cxx::tree::schema_type::double_ > complement_mass_traits;

    const complement_mass_type&
    complement_mass () const;

    complement_mass_type&
    complement_mass ();

    void
    complement_mass (const complement_mass_type& x);

    // designation
    //
    typedef ::xml_schema::string designation_type;
    typedef ::xsd::cxx::tree::optional< designation_type > designation_optional;
    typedef ::xsd::cxx::tree::traits< designation_type, char > designation_traits;

    const designation_optional&
    designation () const;

    designation_optional&
    designation ();

    void
    designation (const designation_type& x);

    void
    designation (const designation_optional& x);

    void
    designation (::std::unique_ptr< designation_type > p);

    // Constructors.
    //
    linked_peptide ();

    linked_peptide (const peptide_type&,
                    const protein_type&,
                    const num_tot_proteins_type&,
                    const calc_neutral_pep_mass_type&,
                    const complement_mass_type&);

    linked_peptide (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    linked_peptide (const linked_peptide& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual linked_peptide*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    linked_peptide&
    operator= (const linked_peptide& x);

    virtual 
    ~linked_peptide ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    alternative_protein_sequence alternative_protein_;
    modification_info_optional modification_info_;
    xlink_score_sequence xlink_score_;
    ::xsd::cxx::tree::one< peptide_type > peptide_;
    peptide_prev_aa_optional peptide_prev_aa_;
    peptide_next_aa_optional peptide_next_aa_;
    ::xsd::cxx::tree::one< protein_type > protein_;
    ::xsd::cxx::tree::one< num_tot_proteins_type > num_tot_proteins_;
    ::xsd::cxx::tree::one< calc_neutral_pep_mass_type > calc_neutral_pep_mass_;
    ::xsd::cxx::tree::one< complement_mass_type > complement_mass_;
    designation_optional designation_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace pepXML
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::msms_pipeline_analysis >
  msms_pipeline_analysis_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_summary >
  peptideprophet_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_summary >
  interprophet_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_summary >
  ptmprophet_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_summary >
  asapratio_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_summary >
  xpressratio_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::ptmprophet_result >
  ptmprophet_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::peptideprophet_result >
  peptideprophet_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interprophet_result >
  interprophet_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_result >
  asapratio_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_peptide_data >
  asapratio_peptide_data_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_contribution >
  asapratio_contribution_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_lightpeak >
  asapratio_lc_lightpeak_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_lc_heavypeak >
  asapratio_lc_heavypeak_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::database_refresh_timestamp >
  database_refresh_timestamp_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_timestamp >
  xpressratio_timestamp_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::asapratio_timestamp >
  asapratio_timestamp_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::xpressratio_result >
  xpressratio_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::interact_summary >
  interact_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_result >
  libra_result_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::pepXML::libra_summary >
  libra_summary_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace pepXML
{
  // Serialize to std::ostream.
  //

  void
  msms_pipeline_analysis_ (::std::ostream& os,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  msms_pipeline_analysis_ (::std::ostream& os,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  msms_pipeline_analysis_ (::std::ostream& os,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  msms_pipeline_analysis_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  msms_pipeline_analysis_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  msms_pipeline_analysis_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::msms_pipeline_analysis& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  msms_pipeline_analysis_ (::xercesc::DOMDocument& d,
                           const ::pepXML::msms_pipeline_analysis& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  msms_pipeline_analysis_ (const ::pepXML::msms_pipeline_analysis& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  peptideprophet_summary_ (::std::ostream& os,
                           const ::pepXML::peptideprophet_summary& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  peptideprophet_summary_ (::std::ostream& os,
                           const ::pepXML::peptideprophet_summary& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  peptideprophet_summary_ (::std::ostream& os,
                           const ::pepXML::peptideprophet_summary& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  peptideprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::peptideprophet_summary& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  peptideprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::peptideprophet_summary& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  peptideprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::peptideprophet_summary& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  peptideprophet_summary_ (::xercesc::DOMDocument& d,
                           const ::pepXML::peptideprophet_summary& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  peptideprophet_summary_ (const ::pepXML::peptideprophet_summary& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  interprophet_summary_ (::std::ostream& os,
                         const ::pepXML::interprophet_summary& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  void
  interprophet_summary_ (::std::ostream& os,
                         const ::pepXML::interprophet_summary& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  void
  interprophet_summary_ (::std::ostream& os,
                         const ::pepXML::interprophet_summary& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  interprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                         const ::pepXML::interprophet_summary& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  void
  interprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                         const ::pepXML::interprophet_summary& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  void
  interprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                         const ::pepXML::interprophet_summary& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  interprophet_summary_ (::xercesc::DOMDocument& d,
                         const ::pepXML::interprophet_summary& x,
                         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  interprophet_summary_ (const ::pepXML::interprophet_summary& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ptmprophet_summary_ (::std::ostream& os,
                       const ::pepXML::ptmprophet_summary& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  ptmprophet_summary_ (::std::ostream& os,
                       const ::pepXML::ptmprophet_summary& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  ptmprophet_summary_ (::std::ostream& os,
                       const ::pepXML::ptmprophet_summary& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ptmprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::ptmprophet_summary& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  ptmprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::ptmprophet_summary& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  ptmprophet_summary_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::ptmprophet_summary& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ptmprophet_summary_ (::xercesc::DOMDocument& d,
                       const ::pepXML::ptmprophet_summary& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ptmprophet_summary_ (const ::pepXML::ptmprophet_summary& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_summary_ (::std::ostream& os,
                      const ::pepXML::asapratio_summary& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  asapratio_summary_ (::std::ostream& os,
                      const ::pepXML::asapratio_summary& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  asapratio_summary_ (::std::ostream& os,
                      const ::pepXML::asapratio_summary& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_summary_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::asapratio_summary& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  asapratio_summary_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::asapratio_summary& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  asapratio_summary_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::asapratio_summary& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_summary_ (::xercesc::DOMDocument& d,
                      const ::pepXML::asapratio_summary& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_summary_ (const ::pepXML::asapratio_summary& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  xpressratio_summary_ (::std::ostream& os,
                        const ::pepXML::xpressratio_summary& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  xpressratio_summary_ (::std::ostream& os,
                        const ::pepXML::xpressratio_summary& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  xpressratio_summary_ (::std::ostream& os,
                        const ::pepXML::xpressratio_summary& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  xpressratio_summary_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::xpressratio_summary& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  xpressratio_summary_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::xpressratio_summary& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  xpressratio_summary_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::xpressratio_summary& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  xpressratio_summary_ (::xercesc::DOMDocument& d,
                        const ::pepXML::xpressratio_summary& x,
                        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  xpressratio_summary_ (const ::pepXML::xpressratio_summary& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ptmprophet_result_ (::std::ostream& os,
                      const ::pepXML::ptmprophet_result& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ptmprophet_result_ (::std::ostream& os,
                      const ::pepXML::ptmprophet_result& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ptmprophet_result_ (::std::ostream& os,
                      const ::pepXML::ptmprophet_result& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ptmprophet_result_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::ptmprophet_result& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ptmprophet_result_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::ptmprophet_result& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ptmprophet_result_ (::xercesc::XMLFormatTarget& ft,
                      const ::pepXML::ptmprophet_result& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ptmprophet_result_ (::xercesc::DOMDocument& d,
                      const ::pepXML::ptmprophet_result& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  ptmprophet_result_ (const ::pepXML::ptmprophet_result& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  peptideprophet_result_ (::std::ostream& os,
                          const ::pepXML::peptideprophet_result& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  peptideprophet_result_ (::std::ostream& os,
                          const ::pepXML::peptideprophet_result& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  peptideprophet_result_ (::std::ostream& os,
                          const ::pepXML::peptideprophet_result& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  peptideprophet_result_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::peptideprophet_result& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  peptideprophet_result_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::peptideprophet_result& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  peptideprophet_result_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::peptideprophet_result& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  peptideprophet_result_ (::xercesc::DOMDocument& d,
                          const ::pepXML::peptideprophet_result& x,
                          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  peptideprophet_result_ (const ::pepXML::peptideprophet_result& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  interprophet_result_ (::std::ostream& os,
                        const ::pepXML::interprophet_result& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  interprophet_result_ (::std::ostream& os,
                        const ::pepXML::interprophet_result& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  interprophet_result_ (::std::ostream& os,
                        const ::pepXML::interprophet_result& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  interprophet_result_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::interprophet_result& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  interprophet_result_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::interprophet_result& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  interprophet_result_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::interprophet_result& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  interprophet_result_ (::xercesc::DOMDocument& d,
                        const ::pepXML::interprophet_result& x,
                        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  interprophet_result_ (const ::pepXML::interprophet_result& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_result_ (::std::ostream& os,
                     const ::pepXML::asapratio_result& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  asapratio_result_ (::std::ostream& os,
                     const ::pepXML::asapratio_result& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  asapratio_result_ (::std::ostream& os,
                     const ::pepXML::asapratio_result& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_result_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::asapratio_result& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  asapratio_result_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::asapratio_result& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  asapratio_result_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::asapratio_result& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_result_ (::xercesc::DOMDocument& d,
                     const ::pepXML::asapratio_result& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_result_ (const ::pepXML::asapratio_result& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_peptide_data_ (::std::ostream& os,
                           const ::pepXML::asapratio_peptide_data& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_peptide_data_ (::std::ostream& os,
                           const ::pepXML::asapratio_peptide_data& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_peptide_data_ (::std::ostream& os,
                           const ::pepXML::asapratio_peptide_data& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_peptide_data_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_peptide_data& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_peptide_data_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_peptide_data& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_peptide_data_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_peptide_data& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_peptide_data_ (::xercesc::DOMDocument& d,
                           const ::pepXML::asapratio_peptide_data& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_peptide_data_ (const ::pepXML::asapratio_peptide_data& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_contribution_ (::std::ostream& os,
                           const ::pepXML::asapratio_contribution& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_contribution_ (::std::ostream& os,
                           const ::pepXML::asapratio_contribution& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_contribution_ (::std::ostream& os,
                           const ::pepXML::asapratio_contribution& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_contribution_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_contribution& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_contribution_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_contribution& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_contribution_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_contribution& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_contribution_ (::xercesc::DOMDocument& d,
                           const ::pepXML::asapratio_contribution& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_contribution_ (const ::pepXML::asapratio_contribution& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_lc_lightpeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_lightpeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_lightpeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_lc_lightpeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_lightpeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_lightpeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_lightpeak& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_lc_lightpeak_ (::xercesc::DOMDocument& d,
                           const ::pepXML::asapratio_lc_lightpeak& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_lc_lightpeak_ (const ::pepXML::asapratio_lc_lightpeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_lc_heavypeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_heavypeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_heavypeak_ (::std::ostream& os,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_lc_heavypeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_heavypeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  asapratio_lc_heavypeak_ (::xercesc::XMLFormatTarget& ft,
                           const ::pepXML::asapratio_lc_heavypeak& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_lc_heavypeak_ (::xercesc::DOMDocument& d,
                           const ::pepXML::asapratio_lc_heavypeak& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_lc_heavypeak_ (const ::pepXML::asapratio_lc_heavypeak& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  database_refresh_timestamp_ (::std::ostream& os,
                               const ::pepXML::database_refresh_timestamp& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  void
  database_refresh_timestamp_ (::std::ostream& os,
                               const ::pepXML::database_refresh_timestamp& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  void
  database_refresh_timestamp_ (::std::ostream& os,
                               const ::pepXML::database_refresh_timestamp& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  database_refresh_timestamp_ (::xercesc::XMLFormatTarget& ft,
                               const ::pepXML::database_refresh_timestamp& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  void
  database_refresh_timestamp_ (::xercesc::XMLFormatTarget& ft,
                               const ::pepXML::database_refresh_timestamp& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  void
  database_refresh_timestamp_ (::xercesc::XMLFormatTarget& ft,
                               const ::pepXML::database_refresh_timestamp& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  database_refresh_timestamp_ (::xercesc::DOMDocument& d,
                               const ::pepXML::database_refresh_timestamp& x,
                               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  database_refresh_timestamp_ (const ::pepXML::database_refresh_timestamp& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  xpressratio_timestamp_ (::std::ostream& os,
                          const ::pepXML::xpressratio_timestamp& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  xpressratio_timestamp_ (::std::ostream& os,
                          const ::pepXML::xpressratio_timestamp& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  xpressratio_timestamp_ (::std::ostream& os,
                          const ::pepXML::xpressratio_timestamp& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  xpressratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::xpressratio_timestamp& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  xpressratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::xpressratio_timestamp& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  xpressratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                          const ::pepXML::xpressratio_timestamp& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  xpressratio_timestamp_ (::xercesc::DOMDocument& d,
                          const ::pepXML::xpressratio_timestamp& x,
                          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  xpressratio_timestamp_ (const ::pepXML::xpressratio_timestamp& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  asapratio_timestamp_ (::std::ostream& os,
                        const ::pepXML::asapratio_timestamp& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  asapratio_timestamp_ (::std::ostream& os,
                        const ::pepXML::asapratio_timestamp& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  asapratio_timestamp_ (::std::ostream& os,
                        const ::pepXML::asapratio_timestamp& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  asapratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::asapratio_timestamp& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  asapratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::asapratio_timestamp& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  asapratio_timestamp_ (::xercesc::XMLFormatTarget& ft,
                        const ::pepXML::asapratio_timestamp& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  asapratio_timestamp_ (::xercesc::DOMDocument& d,
                        const ::pepXML::asapratio_timestamp& x,
                        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  asapratio_timestamp_ (const ::pepXML::asapratio_timestamp& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  xpressratio_result_ (::std::ostream& os,
                       const ::pepXML::xpressratio_result& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  xpressratio_result_ (::std::ostream& os,
                       const ::pepXML::xpressratio_result& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  xpressratio_result_ (::std::ostream& os,
                       const ::pepXML::xpressratio_result& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  xpressratio_result_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::xpressratio_result& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  xpressratio_result_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::xpressratio_result& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  xpressratio_result_ (::xercesc::XMLFormatTarget& ft,
                       const ::pepXML::xpressratio_result& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  xpressratio_result_ (::xercesc::DOMDocument& d,
                       const ::pepXML::xpressratio_result& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  xpressratio_result_ (const ::pepXML::xpressratio_result& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  interact_summary_ (::std::ostream& os,
                     const ::pepXML::interact_summary& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  interact_summary_ (::std::ostream& os,
                     const ::pepXML::interact_summary& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  interact_summary_ (::std::ostream& os,
                     const ::pepXML::interact_summary& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  interact_summary_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::interact_summary& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  interact_summary_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::interact_summary& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  interact_summary_ (::xercesc::XMLFormatTarget& ft,
                     const ::pepXML::interact_summary& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  interact_summary_ (::xercesc::DOMDocument& d,
                     const ::pepXML::interact_summary& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  interact_summary_ (const ::pepXML::interact_summary& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  libra_result_ (::std::ostream& os,
                 const ::pepXML::libra_result& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  libra_result_ (::std::ostream& os,
                 const ::pepXML::libra_result& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  libra_result_ (::std::ostream& os,
                 const ::pepXML::libra_result& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  libra_result_ (::xercesc::XMLFormatTarget& ft,
                 const ::pepXML::libra_result& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  libra_result_ (::xercesc::XMLFormatTarget& ft,
                 const ::pepXML::libra_result& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  libra_result_ (::xercesc::XMLFormatTarget& ft,
                 const ::pepXML::libra_result& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  libra_result_ (::xercesc::DOMDocument& d,
                 const ::pepXML::libra_result& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  libra_result_ (const ::pepXML::libra_result& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  libra_summary_ (::std::ostream& os,
                  const ::pepXML::libra_summary& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  libra_summary_ (::std::ostream& os,
                  const ::pepXML::libra_summary& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  libra_summary_ (::std::ostream& os,
                  const ::pepXML::libra_summary& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  libra_summary_ (::xercesc::XMLFormatTarget& ft,
                  const ::pepXML::libra_summary& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  libra_summary_ (::xercesc::XMLFormatTarget& ft,
                  const ::pepXML::libra_summary& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  libra_summary_ (::xercesc::XMLFormatTarget& ft,
                  const ::pepXML::libra_summary& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  libra_summary_ (::xercesc::DOMDocument& d,
                  const ::pepXML::libra_summary& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  libra_summary_ (const ::pepXML::libra_summary& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const engineType&);

  void
  operator<< (::xercesc::DOMAttr&, const engineType&);

  void
  operator<< (::xml_schema::list_stream&,
              const engineType&);

  void
  operator<< (::xercesc::DOMElement&, const activationMethodType&);

  void
  operator<< (::xercesc::DOMAttr&, const activationMethodType&);

  void
  operator<< (::xml_schema::list_stream&,
              const activationMethodType&);

  void
  operator<< (::xercesc::DOMElement&, const model_dis_type&);

  void
  operator<< (::xercesc::DOMAttr&, const model_dis_type&);

  void
  operator<< (::xml_schema::list_stream&,
              const model_dis_type&);

  void
  operator<< (::xercesc::DOMElement&, const massType&);

  void
  operator<< (::xercesc::DOMAttr&, const massType&);

  void
  operator<< (::xml_schema::list_stream&,
              const massType&);

  void
  operator<< (::xercesc::DOMElement&, const aa_symbolType&);

  void
  operator<< (::xercesc::DOMAttr&, const aa_symbolType&);

  void
  operator<< (::xml_schema::list_stream&,
              const aa_symbolType&);

  void
  operator<< (::xercesc::DOMElement&, const term_symbolType&);

  void
  operator<< (::xercesc::DOMAttr&, const term_symbolType&);

  void
  operator<< (::xml_schema::list_stream&,
              const term_symbolType&);

  void
  operator<< (::xercesc::DOMElement&, const positiveInt&);

  void
  operator<< (::xercesc::DOMAttr&, const positiveInt&);

  void
  operator<< (::xml_schema::list_stream&,
              const positiveInt&);

  void
  operator<< (::xercesc::DOMElement&, const nameValueType&);

  void
  operator<< (::xercesc::DOMElement&, const inputFileType&);

  void
  operator<< (::xercesc::DOMElement&, const rocErrorDataType&);

  void
  operator<< (::xercesc::DOMElement&, const mixtureModelType&);

  void
  operator<< (::xercesc::DOMElement&, const modInfoDataType&);

  void
  operator<< (::xercesc::DOMElement&, const subInfoDataType&);

  void
  operator<< (::xercesc::DOMElement&, const altProteinDataType&);

  void
  operator<< (::xercesc::DOMElement&, const msms_pipeline_analysis&);

  void
  operator<< (::xercesc::DOMElement&, const peptideprophet_summary&);

  void
  operator<< (::xercesc::DOMElement&, const interprophet_summary&);

  void
  operator<< (::xercesc::DOMElement&, const ptmprophet_summary&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_summary&);

  void
  operator<< (::xercesc::DOMElement&, const xpressratio_summary&);

  void
  operator<< (::xercesc::DOMElement&, const ptmprophet_result&);

  void
  operator<< (::xercesc::DOMElement&, const peptideprophet_result&);

  void
  operator<< (::xercesc::DOMElement&, const interprophet_result&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_result&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_peptide_data&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_contribution&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_lc_lightpeak&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_lc_heavypeak&);

  void
  operator<< (::xercesc::DOMElement&, const database_refresh_timestamp&);

  void
  operator<< (::xercesc::DOMElement&, const xpressratio_timestamp&);

  void
  operator<< (::xercesc::DOMElement&, const asapratio_timestamp&);

  void
  operator<< (::xercesc::DOMElement&, const xpressratio_result&);

  void
  operator<< (::xercesc::DOMElement&, const interact_summary&);

  void
  operator<< (::xercesc::DOMElement&, const libra_result&);

  void
  operator<< (::xercesc::DOMElement&, const libra_summary&);

  void
  operator<< (::xercesc::DOMElement&, const roc_data_point&);

  void
  operator<< (::xercesc::DOMElement&, const error_point&);

  void
  operator<< (::xercesc::DOMElement&, const point&);

  void
  operator<< (::xercesc::DOMElement&, const mod_aminoacid_mass&);

  void
  operator<< (::xercesc::DOMElement&, const analysis_summary&);

  void
  operator<< (::xercesc::DOMElement&, const dataset_derivation&);

  void
  operator<< (::xercesc::DOMElement&, const msms_run_summary&);

  void
  operator<< (::xercesc::DOMElement&, const distribution_point&);

  void
  operator<< (::xercesc::DOMElement&, const mixture_model&);

  void
  operator<< (::xercesc::DOMElement&, const mod_aminoacid_probability&);

  void
  operator<< (::xercesc::DOMElement&, const search_score_summary&);

  void
  operator<< (::xercesc::DOMElement&, const intensity&);

  void
  operator<< (::xercesc::DOMElement&, const fragment_masses&);

  void
  operator<< (::xercesc::DOMElement&, const isotopic_contributions&);

  void
  operator<< (::xercesc::DOMElement&, const data_filter&);

  void
  operator<< (::xercesc::DOMElement&, const sample_enzyme&);

  void
  operator<< (::xercesc::DOMElement&, const cross_linker&);

  void
  operator<< (::xercesc::DOMElement&, const search_summary&);

  void
  operator<< (::xercesc::DOMElement&, const analysis_timestamp&);

  void
  operator<< (::xercesc::DOMElement&, const spectrum_query&);

  void
  operator<< (::xercesc::DOMElement&, const mixturemodel_distribution&);

  void
  operator<< (::xercesc::DOMElement&, const mixturemodel&);

  void
  operator<< (::xercesc::DOMElement&, const contributing_channel&);

  void
  operator<< (::xercesc::DOMElement&, const specificity&);

  void
  operator<< (::xercesc::DOMElement&, const name&);

  void
  operator<< (::xercesc::DOMAttr&, const name&);

  void
  operator<< (::xml_schema::list_stream&,
              const name&);

  void
  operator<< (::xercesc::DOMElement&, const fidelity&);

  void
  operator<< (::xercesc::DOMAttr&, const fidelity&);

  void
  operator<< (::xml_schema::list_stream&,
              const fidelity&);

  void
  operator<< (::xercesc::DOMElement&, const isotope_labeled&);

  void
  operator<< (::xercesc::DOMAttr&, const isotope_labeled&);

  void
  operator<< (::xml_schema::list_stream&,
              const isotope_labeled&);

  void
  operator<< (::xercesc::DOMElement&, const search_database&);

  void
  operator<< (::xercesc::DOMElement&, const enzymatic_search_constraint&);

  void
  operator<< (::xercesc::DOMElement&, const sequence_search_constraint&);

  void
  operator<< (::xercesc::DOMElement&, const aminoacid_modification&);

  void
  operator<< (::xercesc::DOMElement&, const terminal_modification&);

  void
  operator<< (::xercesc::DOMElement&, const search_result&);

  void
  operator<< (::xercesc::DOMElement&, const posmodel_distribution&);

  void
  operator<< (::xercesc::DOMElement&, const negmodel_distribution&);

  void
  operator<< (::xercesc::DOMElement&, const point1&);

  void
  operator<< (::xercesc::DOMElement&, const affected_channel&);

  void
  operator<< (::xercesc::DOMElement&, const sense&);

  void
  operator<< (::xercesc::DOMAttr&, const sense&);

  void
  operator<< (::xml_schema::list_stream&,
              const sense&);

  void
  operator<< (::xercesc::DOMElement&, const cut&);

  void
  operator<< (::xercesc::DOMAttr&, const cut&);

  void
  operator<< (::xml_schema::list_stream&,
              const cut&);

  void
  operator<< (::xercesc::DOMElement&, const no_cut&);

  void
  operator<< (::xercesc::DOMAttr&, const no_cut&);

  void
  operator<< (::xml_schema::list_stream&,
              const no_cut&);

  void
  operator<< (::xercesc::DOMElement&, const type&);

  void
  operator<< (::xercesc::DOMAttr&, const type&);

  void
  operator<< (::xml_schema::list_stream&,
              const type&);

  void
  operator<< (::xercesc::DOMElement&, const search_hit&);

  void
  operator<< (::xercesc::DOMElement&, const xlink&);

  void
  operator<< (::xercesc::DOMElement&, const analysis_result&);

  void
  operator<< (::xercesc::DOMElement&, const xlink_type&);

  void
  operator<< (::xercesc::DOMAttr&, const xlink_type&);

  void
  operator<< (::xml_schema::list_stream&,
              const xlink_type&);

  void
  operator<< (::xercesc::DOMElement&, const is_rejected&);

  void
  operator<< (::xercesc::DOMAttr&, const is_rejected&);

  void
  operator<< (::xml_schema::list_stream&,
              const is_rejected&);

  void
  operator<< (::xercesc::DOMElement&, const linked_peptide&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PEP_XML_V120_FIXED_DOUBLE_H
