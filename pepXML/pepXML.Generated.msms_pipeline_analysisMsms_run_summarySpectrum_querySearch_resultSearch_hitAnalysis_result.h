#pragma once

#include <string>
#include <vector>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace pepXML
{
    namespace Generated
    {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://regis-web.systemsbiology.net/pepXML")] public partial class msms_pipeline_analysisMsms_run_summarySpectrum_querySearch_resultSearch_hitAnalysis_result
        class msms_pipeline_analysisMsms_run_summarySpectrum_querySearch_resultSearch_hitAnalysis_result
        {

        private:
            std::vector<System::Xml::XmlElement*> anyField;

            std::string analysisField;

            unsigned int idField = 0;

        public:
            msms_pipeline_analysisMsms_run_summarySpectrum_querySearch_resultSearch_hitAnalysis_result();

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAnyElementAttribute()] public System.Xml.XmlElement[] Any
            std::vector<System::Xml::XmlElement*> getAny() const;
            void setAny(const std::vector<System::Xml::XmlElement*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string analysis
            std::string getanalysis() const;
            void setanalysis(const std::string &value);

            /// <remarks/>
//C# TO C++ CONVERTER TODO TASK: There is no C++ equivalent to the C# 'typeof' operator:
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()][System.ComponentModel.DefaultValueAttribute(typeof(uint), "1")] public uint id
            unsigned int getid() const;
            void setid(unsigned int value);
        };
    }
}
