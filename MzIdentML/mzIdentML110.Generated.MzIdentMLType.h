#pragma once

#include "mzIdentML110.Generated.IdentifiableType.h"
#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML110 { namespace Generated { class cvType; } }
namespace mzIdentML110 { namespace Generated { class AnalysisSoftwareType; } }
namespace mzIdentML110 { namespace Generated { class ProviderType; } }
namespace mzIdentML110 { namespace Generated { class AbstractContactType; } }
namespace mzIdentML110 { namespace Generated { class SampleType; } }
namespace mzIdentML110 { namespace Generated { class SequenceCollectionType; } }
namespace mzIdentML110 { namespace Generated { class AnalysisCollectionType; } }
namespace mzIdentML110 { namespace Generated { class AnalysisProtocolCollectionType; } }
namespace mzIdentML110 { namespace Generated { class DataCollectionType; } }
namespace mzIdentML110 { namespace Generated { class BibliographicReferenceType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.7.2046.0.
// 

namespace mzIdentML110 {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1")][System.Xml.Serialization.XmlRootAttribute("MzIdentML", Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1", IsNullable = false)] public partial class MzIdentMLType: IdentifiableType
        class MzIdentMLType : public IdentifiableType {

        private:
            std::vector<cvType*> cvListField;

            std::vector<AnalysisSoftwareType*> analysisSoftwareListField;

            ProviderType *providerField;

            std::vector<AbstractContactType*> auditCollectionField;

            std::vector<SampleType*> analysisSampleCollectionField;

            SequenceCollectionType *sequenceCollectionField;

            AnalysisCollectionType *analysisCollectionField;

            AnalysisProtocolCollectionType *analysisProtocolCollectionField;

            DataCollectionType *dataCollectionField;

            std::vector<BibliographicReferenceType*> bibliographicReferenceField;

            DateTime creationDateField;

            bool creationDateFieldSpecified = false;

            std::wstring versionField;

            /// <remarks/>
        public:
            virtual ~MzIdentMLType() {
                delete providerField;
                delete sequenceCollectionField;
                delete analysisCollectionField;
                delete analysisProtocolCollectionField;
                delete dataCollectionField;
            }

//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("cv", IsNullable = false)] public cvType[] cvList
            std::vector<cvType*> getcvList() const;
            void setcvList(const std::vector<cvType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("AnalysisSoftware", IsNullable = false)] public AnalysisSoftwareType[] AnalysisSoftwareList
            std::vector<AnalysisSoftwareType*> getAnalysisSoftwareList() const;
            void setAnalysisSoftwareList(const std::vector<AnalysisSoftwareType*> &value);

            /// <remarks/>
            ProviderType *getProvider() const;
            void setProvider(ProviderType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("Organization", typeof(OrganizationType), IsNullable = false)][System.Xml.Serialization.XmlArrayItemAttribute("Person", typeof(PersonType), IsNullable = false)] public AbstractContactType[] AuditCollection
            std::vector<AbstractContactType*> getAuditCollection() const;
            void setAuditCollection(const std::vector<AbstractContactType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("Sample", IsNullable = false)] public SampleType[] AnalysisSampleCollection
            std::vector<SampleType*> getAnalysisSampleCollection() const;
            void setAnalysisSampleCollection(const std::vector<SampleType*> &value);

            /// <remarks/>
            SequenceCollectionType *getSequenceCollection() const;
            void setSequenceCollection(SequenceCollectionType *value);

            /// <remarks/>
            AnalysisCollectionType *getAnalysisCollection() const;
            void setAnalysisCollection(AnalysisCollectionType *value);

            /// <remarks/>
            AnalysisProtocolCollectionType *getAnalysisProtocolCollection() const;
            void setAnalysisProtocolCollection(AnalysisProtocolCollectionType *value);

            /// <remarks/>
            DataCollectionType *getDataCollection() const;
            void setDataCollection(DataCollectionType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("BibliographicReference")] public BibliographicReferenceType[] BibliographicReference
            std::vector<BibliographicReferenceType*> getBibliographicReference() const;
            void setBibliographicReference(const std::vector<BibliographicReferenceType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public System.DateTime creationDate
            DateTime getcreationDate() const;
            void setcreationDate(DateTime value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool creationDateSpecified
            bool getcreationDateSpecified() const;
            void setcreationDateSpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string version
            std::wstring getversion() const;
            void setversion(const std::wstring &value);
        };
    }
}
