#pragma once

#include "mzIdentML110.Generated.IdentifiableType.h"
#include <string>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML110 { namespace Generated { class ParamListType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.7.2046.0.
// 

namespace mzIdentML110 {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1")] public partial class EnzymeType: IdentifiableType
        class EnzymeType : public IdentifiableType {

        private:
            std::wstring siteRegexpField;

            ParamListType *enzymeNameField;

            std::wstring nTermGainField;

            std::wstring cTermGainField;

            bool semiSpecificField = false;

            bool semiSpecificFieldSpecified = false;

            int missedCleavagesField = 0;

            bool missedCleavagesFieldSpecified = false;

            int minDistanceField = 0;

            bool minDistanceFieldSpecified = false;

            /// <remarks/>
        public:
            virtual ~EnzymeType() {
                delete enzymeNameField;
            }

            std::wstring getSiteRegexp() const;
            void setSiteRegexp(const std::wstring &value);

            /// <remarks/>
            ParamListType *getEnzymeName() const;
            void setEnzymeName(ParamListType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string nTermGain
            std::wstring getnTermGain() const;
            void setnTermGain(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string cTermGain
            std::wstring getcTermGain() const;
            void setcTermGain(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public bool semiSpecific
            bool getsemiSpecific() const;
            void setsemiSpecific(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool semiSpecificSpecified
            bool getsemiSpecificSpecified() const;
            void setsemiSpecificSpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public int missedCleavages
            int getmissedCleavages() const;
            void setmissedCleavages(int value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool missedCleavagesSpecified
            bool getmissedCleavagesSpecified() const;
            void setmissedCleavagesSpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public int minDistance
            int getminDistance() const;
            void setminDistance(int value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool minDistanceSpecified
            bool getminDistanceSpecified() const;
            void setminDistanceSpecified(bool value);
        };
    }
}
