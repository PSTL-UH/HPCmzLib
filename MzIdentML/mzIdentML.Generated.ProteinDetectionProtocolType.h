#pragma once

#include "mzIdentML.Generated.IdentifiableType.h"
#include <string>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML { namespace Generated { class ParamListType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace mzIdentML {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1.1")] public partial class ProteinDetectionProtocolType: IdentifiableType
        class ProteinDetectionProtocolType : public IdentifiableType {

        private:
            ParamListType *analysisParamsField;

            ParamListType *thresholdField;

            std::wstring analysisSoftware_refField;

            /// <remarks/>
        public:
            virtual ~ProteinDetectionProtocolType() {
                delete analysisParamsField;
                delete thresholdField;
            }

            ParamListType *getAnalysisParams() const;
            void setAnalysisParams(ParamListType *value);

            /// <remarks/>
            ParamListType *getThreshold() const;
            void setThreshold(ParamListType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string analysisSoftware_ref
            std::wstring getanalysisSoftware_ref() const;
            void setanalysisSoftware_ref(const std::wstring &value);
        };
    }
}
