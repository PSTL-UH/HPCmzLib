#pragma once

#include "mzIdentML110.Generated.IdentifiableType.h"
#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML110 { namespace Generated { class ParamType; } }
namespace mzIdentML110 { namespace Generated { class ParamListType; } }
namespace mzIdentML110 { namespace Generated { class SearchModificationType; } }
namespace mzIdentML110 { namespace Generated { class EnzymesType; } }
namespace mzIdentML110 { namespace Generated { class MassTableType; } }
namespace mzIdentML110 { namespace Generated { class CVParamType; } }
namespace mzIdentML110 { namespace Generated { class FilterType; } }
namespace mzIdentML110 { namespace Generated { class DatabaseTranslationType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.7.2046.0.
// 

namespace mzIdentML110 {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1")] public partial class SpectrumIdentificationProtocolType: IdentifiableType
        class SpectrumIdentificationProtocolType : public IdentifiableType {

        private:
            ParamType *searchTypeField;

            ParamListType *additionalSearchParamsField;

            std::vector<SearchModificationType*> modificationParamsField;

            EnzymesType *enzymesField;

            std::vector<MassTableType*> massTableField;

            std::vector<CVParamType*> fragmentToleranceField;

            std::vector<CVParamType*> parentToleranceField;

            ParamListType *thresholdField;

            std::vector<FilterType*> databaseFiltersField;

            DatabaseTranslationType *databaseTranslationField;

            std::wstring analysisSoftware_refField;

            /// <remarks/>
        public:
            virtual ~SpectrumIdentificationProtocolType() {
                delete searchTypeField;
                delete additionalSearchParamsField;
                delete enzymesField;
                delete thresholdField;
                delete databaseTranslationField;
            }

            ParamType *getSearchType() const;
            void setSearchType(ParamType *value);

            /// <remarks/>
            ParamListType *getAdditionalSearchParams() const;
            void setAdditionalSearchParams(ParamListType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("SearchModification", IsNullable = false)] public SearchModificationType[] ModificationParams
            std::vector<SearchModificationType*> getModificationParams() const;
            void setModificationParams(const std::vector<SearchModificationType*> &value);

            /// <remarks/>
            EnzymesType *getEnzymes() const;
            void setEnzymes(EnzymesType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("MassTable")] public MassTableType[] MassTable
            std::vector<MassTableType*> getMassTable() const;
            void setMassTable(const std::vector<MassTableType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("cvParam", IsNullable = false)] public CVParamType[] FragmentTolerance
            std::vector<CVParamType*> getFragmentTolerance() const;
            void setFragmentTolerance(const std::vector<CVParamType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("cvParam", IsNullable = false)] public CVParamType[] ParentTolerance
            std::vector<CVParamType*> getParentTolerance() const;
            void setParentTolerance(const std::vector<CVParamType*> &value);

            /// <remarks/>
            ParamListType *getThreshold() const;
            void setThreshold(ParamListType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("Filter", IsNullable = false)] public FilterType[] DatabaseFilters
            std::vector<FilterType*> getDatabaseFilters() const;
            void setDatabaseFilters(const std::vector<FilterType*> &value);

            /// <remarks/>
            DatabaseTranslationType *getDatabaseTranslation() const;
            void setDatabaseTranslation(DatabaseTranslationType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string analysisSoftware_ref
            std::wstring getanalysisSoftware_ref() const;
            void setanalysisSoftware_ref(const std::wstring &value);
        };
    }
}
