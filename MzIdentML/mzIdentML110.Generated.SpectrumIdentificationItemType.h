#pragma once

#include "mzIdentML110.Generated.IdentifiableType.h"
#include <string>
#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML110 { namespace Generated { class PeptideEvidenceRefType; } }
namespace mzIdentML110 { namespace Generated { class IonTypeType; } }
namespace mzIdentML110 { namespace Generated { class CVParamType; } }
namespace mzIdentML110 { namespace Generated { class UserParamType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.7.2046.0.
// 

namespace mzIdentML110 {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1")] public partial class SpectrumIdentificationItemType: IdentifiableType
        class SpectrumIdentificationItemType : public IdentifiableType {

        private:
            std::vector<PeptideEvidenceRefType*> peptideEvidenceRefField;

            std::vector<IonTypeType*> fragmentationField;

            std::vector<CVParamType*> cvParamField;

            std::vector<UserParamType*> userParamField;

            int chargeStateField = 0;

            double experimentalMassToChargeField = 0;

            double calculatedMassToChargeField = 0;

            bool calculatedMassToChargeFieldSpecified = false;

            float calculatedPIField = 0;

            bool calculatedPIFieldSpecified = false;

            std::wstring peptide_refField;

            int rankField = 0;

            bool passThresholdField = false;

            std::wstring massTable_refField;

            std::wstring sample_refField;

            /// <remarks/>
        public:
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("PeptideEvidenceRef")] public PeptideEvidenceRefType[] PeptideEvidenceRef
            std::vector<PeptideEvidenceRefType*> getPeptideEvidenceRef() const;
            void setPeptideEvidenceRef(const std::vector<PeptideEvidenceRefType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlArrayItemAttribute("IonType", IsNullable = false)] public IonTypeType[] Fragmentation
            std::vector<IonTypeType*> getFragmentation() const;
            void setFragmentation(const std::vector<IonTypeType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("cvParam")] public CVParamType[] cvParam
            std::vector<CVParamType*> getcvParam() const;
            void setcvParam(const std::vector<CVParamType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("userParam")] public UserParamType[] userParam
            std::vector<UserParamType*> getuserParam() const;
            void setuserParam(const std::vector<UserParamType*> &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public int chargeState
            int getchargeState() const;
            void setchargeState(int value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public double experimentalMassToCharge
            double getexperimentalMassToCharge() const;
            void setexperimentalMassToCharge(double value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public double calculatedMassToCharge
            double getcalculatedMassToCharge() const;
            void setcalculatedMassToCharge(double value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool calculatedMassToChargeSpecified
            bool getcalculatedMassToChargeSpecified() const;
            void setcalculatedMassToChargeSpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public float calculatedPI
            float getcalculatedPI() const;
            void setcalculatedPI(float value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlIgnoreAttribute()] public bool calculatedPISpecified
            bool getcalculatedPISpecified() const;
            void setcalculatedPISpecified(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string peptide_ref
            std::wstring getpeptide_ref() const;
            void setpeptide_ref(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public int rank
            int getrank() const;
            void setrank(int value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public bool passThreshold
            bool getpassThreshold() const;
            void setpassThreshold(bool value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string massTable_ref
            std::wstring getmassTable_ref() const;
            void setmassTable_ref(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string sample_ref
            std::wstring getsample_ref() const;
            void setsample_ref(const std::wstring &value);
        };
    }
}
