#pragma once

#include <vector>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace mzIdentML { namespace Generated { class SpectrumIdentificationType; } }
namespace mzIdentML { namespace Generated { class ProteinDetectionType; } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace mzIdentML {
    namespace Generated {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2046.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://psidev.info/psi/pi/mzIdentML/1.1.1")] public partial class AnalysisCollectionType
        class AnalysisCollectionType {

        private:
            std::vector<SpectrumIdentificationType*> spectrumIdentificationField;

            ProteinDetectionType *proteinDetectionField;

            /// <remarks/>
        public:
            virtual ~AnalysisCollectionType() {
                delete proteinDetectionField;
            }

//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute("SpectrumIdentification")] public SpectrumIdentificationType[] SpectrumIdentification
            std::vector<SpectrumIdentificationType*> getSpectrumIdentification() const;
            void setSpectrumIdentification(const std::vector<SpectrumIdentificationType*> &value);

            /// <remarks/>
            ProteinDetectionType *getProteinDetection() const;
            void setProteinDetection(ProteinDetectionType *value);
        };
    }
}
