// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MZ_ML1_1_1_IDX_H
#define MZ_ML1_1_1_IDX_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace ms
{
  namespace mzml
  {
    class IndexListType;
    class IndexType;
    class OffsetType;
    class name;
    class indexedmzML;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "mzML1.1.0.h"

namespace ms
{
  namespace mzml
  {
    class IndexListType: public ::xml_schema::type
    {
      public:
      // index
      //
      typedef ::ms::mzml::IndexType index_type;
      typedef ::xsd::cxx::tree::sequence< index_type > index_sequence;
      typedef index_sequence::iterator index_iterator;
      typedef index_sequence::const_iterator index_const_iterator;
      typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

      const index_sequence&
      index () const;

      index_sequence&
      index ();

      void
      index (const index_sequence& s);

      // count
      //
      typedef ::xml_schema::non_negative_integer count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      IndexListType ();

      IndexListType (const count_type&);

      IndexListType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      IndexListType (const IndexListType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual IndexListType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      IndexListType&
      operator= (const IndexListType& x);

      virtual 
      ~IndexListType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      index_sequence index_;
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class IndexType: public ::xml_schema::type
    {
      public:
      // offset
      //
      typedef ::ms::mzml::OffsetType offset_type;
      typedef ::xsd::cxx::tree::sequence< offset_type > offset_sequence;
      typedef offset_sequence::iterator offset_iterator;
      typedef offset_sequence::const_iterator offset_const_iterator;
      typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

      const offset_sequence&
      offset () const;

      offset_sequence&
      offset ();

      void
      offset (const offset_sequence& s);

      // name
      //
      typedef ::ms::mzml::name name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::unique_ptr< name_type > p);

      // Constructors.
      //
      IndexType ();

      IndexType (const name_type&);

      IndexType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      IndexType (const IndexType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual IndexType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      IndexType&
      operator= (const IndexType& x);

      virtual 
      ~IndexType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      offset_sequence offset_;
      ::xsd::cxx::tree::one< name_type > name_;
    };

    class OffsetType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
    {
      public:
      // idRef
      //
      typedef ::xml_schema::string idRef_type;
      typedef ::xsd::cxx::tree::traits< idRef_type, char > idRef_traits;

      const idRef_type&
      idRef () const;

      idRef_type&
      idRef ();

      void
      idRef (const idRef_type& x);

      void
      idRef (::std::unique_ptr< idRef_type > p);

      // spotID
      //
      typedef ::xml_schema::string spotID_type;
      typedef ::xsd::cxx::tree::optional< spotID_type > spotID_optional;
      typedef ::xsd::cxx::tree::traits< spotID_type, char > spotID_traits;

      const spotID_optional&
      spotID () const;

      spotID_optional&
      spotID ();

      void
      spotID (const spotID_type& x);

      void
      spotID (const spotID_optional& x);

      void
      spotID (::std::unique_ptr< spotID_type > p);

      // scanTime
      //
      typedef ::xml_schema::double_ scanTime_type;
      typedef ::xsd::cxx::tree::optional< scanTime_type > scanTime_optional;
      typedef ::xsd::cxx::tree::traits< scanTime_type, char, ::xsd::cxx::tree::schema_type::double_ > scanTime_traits;

      const scanTime_optional&
      scanTime () const;

      scanTime_optional&
      scanTime ();

      void
      scanTime (const scanTime_type& x);

      void
      scanTime (const scanTime_optional& x);

      // Constructors.
      //
      OffsetType ();

      OffsetType (const ::xml_schema::long_&,
                  const idRef_type&);

      OffsetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      OffsetType (const OffsetType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual OffsetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OffsetType&
      operator= (const OffsetType& x);

      virtual 
      ~OffsetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< idRef_type > idRef_;
      spotID_optional spotID_;
      scanTime_optional scanTime_;
    };

    class name: public ::xml_schema::string
    {
      public:
      enum value
      {
        spectrum,
        chromatogram
      };

      name ();

      name (value v);

      name (const char* v);

      name (const ::std::string& v);

      name (const ::xml_schema::string& v);

      name (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      name (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      name (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      name (const name& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual name*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      name&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_name_convert ();
      }

      protected:
      value
      _xsd_name_convert () const;

      public:
      static const char* const _xsd_name_literals_[2];
      static const value _xsd_name_indexes_[2];
    };

    class indexedmzML: public ::xml_schema::type
    {
      public:
      // mzML
      //
      typedef ::ms::mzml::mzMLType mzML_type;
      typedef ::xsd::cxx::tree::traits< mzML_type, char > mzML_traits;

      const mzML_type&
      mzML () const;

      mzML_type&
      mzML ();

      void
      mzML (const mzML_type& x);

      void
      mzML (::std::unique_ptr< mzML_type > p);

      // indexList
      //
      typedef ::ms::mzml::IndexListType indexList_type;
      typedef ::xsd::cxx::tree::traits< indexList_type, char > indexList_traits;

      const indexList_type&
      indexList () const;

      indexList_type&
      indexList ();

      void
      indexList (const indexList_type& x);

      void
      indexList (::std::unique_ptr< indexList_type > p);

      // indexListOffset
      //
      typedef ::xml_schema::long_ indexListOffset_type;
      typedef ::xsd::cxx::tree::traits< indexListOffset_type, char > indexListOffset_traits;

      const indexListOffset_type&
      indexListOffset () const;

      indexListOffset_type&
      indexListOffset ();

      void
      indexListOffset (const indexListOffset_type& x);

      // fileChecksum
      //
      typedef ::xml_schema::string fileChecksum_type;
      typedef ::xsd::cxx::tree::traits< fileChecksum_type, char > fileChecksum_traits;

      const fileChecksum_type&
      fileChecksum () const;

      fileChecksum_type&
      fileChecksum ();

      void
      fileChecksum (const fileChecksum_type& x);

      void
      fileChecksum (::std::unique_ptr< fileChecksum_type > p);

      // Constructors.
      //
      indexedmzML ();

      indexedmzML (const mzML_type&,
                   const indexList_type&,
                   const indexListOffset_type&,
                   const fileChecksum_type&);

      indexedmzML (::std::unique_ptr< mzML_type >,
                   ::std::unique_ptr< indexList_type >,
                   const indexListOffset_type&,
                   const fileChecksum_type&);

      indexedmzML (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      indexedmzML (const indexedmzML& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual indexedmzML*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      indexedmzML&
      operator= (const indexedmzML& x);

      virtual 
      ~indexedmzML ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< mzML_type > mzML_;
      ::xsd::cxx::tree::one< indexList_type > indexList_;
      ::xsd::cxx::tree::one< indexListOffset_type > indexListOffset_;
      ::xsd::cxx::tree::one< fileChecksum_type > fileChecksum_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace ms
{
  namespace mzml
  {
    // Parse a URI or a local file.
    //

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace ms
{
  namespace mzml
  {
    void
    operator<< (::xercesc::DOMElement&, const IndexListType&);

    void
    operator<< (::xercesc::DOMElement&, const IndexType&);

    void
    operator<< (::xercesc::DOMElement&, const OffsetType&);

    // Serialize to std::ostream.
    //

    void
    indexedmzML_ (::std::ostream& os,
                  const ::ms::mzml::indexedmzML& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    indexedmzML_ (::std::ostream& os,
                  const ::ms::mzml::indexedmzML& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    indexedmzML_ (::std::ostream& os,
                  const ::ms::mzml::indexedmzML& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& ft,
                  const ::ms::mzml::indexedmzML& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& ft,
                  const ::ms::mzml::indexedmzML& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& ft,
                  const ::ms::mzml::indexedmzML& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    indexedmzML_ (::xercesc::DOMDocument& d,
                  const ::ms::mzml::indexedmzML& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    indexedmzML_ (const ::ms::mzml::indexedmzML& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const name&);

    void
    operator<< (::xercesc::DOMAttr&, const name&);

    void
    operator<< (::xml_schema::list_stream&,
                const name&);

    void
    operator<< (::xercesc::DOMElement&, const indexedmzML&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MZ_ML1_1_1_IDX_H
