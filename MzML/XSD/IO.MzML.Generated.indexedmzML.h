#pragma once

#include <string>
#include <optional>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace IO { namespace MzML { namespace Generated { class mzMLType; } } }
namespace IO { namespace MzML { namespace Generated { class IndexListType; } } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace IO
{
    namespace MzML
    {
        namespace Generated
        {
        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://psi.hupo.org/ms/mzml")][System.Xml.Serialization.XmlRootAttribute(Namespace="http://psi.hupo.org/ms/mzml", IsNullable=false)] public partial class indexedmzML
        class indexedmzML
        {

        private:
            mzMLType *mzMLField;

            IndexListType *indexListField;

            std::optional<long long> indexListOffsetField;

            std::string fileChecksumField;

            /// <remarks/>
        public:
            virtual ~indexedmzML()
            {
                delete mzMLField;
                delete indexListField;
            }

            mzMLType *getmzML() const;
            void setmzML(mzMLType *value);

            /// <remarks/>
            IndexListType *getindexList() const;
            void setindexList(IndexListType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] public System.Nullable<long> indexListOffset
            std::optional<long long> getindexListOffset() const;
            void setindexListOffset(const std::optional<long long> &value);

            /// <remarks/>
            std::string getfileChecksum() const;
            void setfileChecksum(const std::string &value);
        };
        }
    }
}
