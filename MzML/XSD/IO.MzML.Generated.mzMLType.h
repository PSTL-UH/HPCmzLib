#pragma once

#include <string>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace IO { namespace MzML { namespace Generated { class CVListType; } } }
namespace IO { namespace MzML { namespace Generated { class FileDescriptionType; } } }
namespace IO { namespace MzML { namespace Generated { class ReferenceableParamGroupListType; } } }
namespace IO { namespace MzML { namespace Generated { class SampleListType; } } }
namespace IO { namespace MzML { namespace Generated { class SoftwareListType; } } }
namespace IO { namespace MzML { namespace Generated { class ScanSettingsListType; } } }
namespace IO { namespace MzML { namespace Generated { class InstrumentConfigurationListType; } } }
namespace IO { namespace MzML { namespace Generated { class DataProcessingListType; } } }
namespace IO { namespace MzML { namespace Generated { class RunType; } } }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace IO {
    namespace MzML {
        namespace Generated {
        // 
        // This source code was auto-generated by xsd, Version=4.6.1055.0.
        // 


        /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")][System.SerializableAttribute()][System.Diagnostics.DebuggerStepThroughAttribute()][System.ComponentModel.DesignerCategoryAttribute("code")][System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")][System.Xml.Serialization.XmlRootAttribute("mzML", Namespace="http://psi.hupo.org/ms/mzml", IsNullable=false)] public partial class mzMLType
        class mzMLType {

        private:
            CVListType *cvListField;

            FileDescriptionType *fileDescriptionField;

            ReferenceableParamGroupListType *referenceableParamGroupListField;

            SampleListType *sampleListField;

            SoftwareListType *softwareListField;

            ScanSettingsListType *scanSettingsListField;

            InstrumentConfigurationListType *instrumentConfigurationListField;

            DataProcessingListType *dataProcessingListField;

            RunType *runField;

            std::wstring accessionField;

            std::wstring versionField;

            std::wstring idField;

            /// <remarks/>
        public:
            virtual ~mzMLType() {
                delete cvListField;
                delete fileDescriptionField;
                delete referenceableParamGroupListField;
                delete sampleListField;
                delete softwareListField;
                delete scanSettingsListField;
                delete instrumentConfigurationListField;
                delete dataProcessingListField;
                delete runField;
            }

            CVListType *getcvList() const;
            void setcvList(CVListType *value);

            /// <remarks/>
            FileDescriptionType *getfileDescription() const;
            void setfileDescription(FileDescriptionType *value);

            /// <remarks/>
            ReferenceableParamGroupListType *getreferenceableParamGroupList() const;
            void setreferenceableParamGroupList(ReferenceableParamGroupListType *value);

            /// <remarks/>
            SampleListType *getsampleList() const;
            void setsampleList(SampleListType *value);

            /// <remarks/>
            SoftwareListType *getsoftwareList() const;
            void setsoftwareList(SoftwareListType *value);

            /// <remarks/>
            ScanSettingsListType *getscanSettingsList() const;
            void setscanSettingsList(ScanSettingsListType *value);

            /// <remarks/>
            InstrumentConfigurationListType *getinstrumentConfigurationList() const;
            void setinstrumentConfigurationList(InstrumentConfigurationListType *value);

            /// <remarks/>
            DataProcessingListType *getdataProcessingList() const;
            void setdataProcessingList(DataProcessingListType *value);

            /// <remarks/>
            RunType *getrun() const;
            void setrun(RunType *value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string accession
            std::wstring getaccession() const;
            void setaccession(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string version
            std::wstring getversion() const;
            void setversion(const std::wstring &value);

            /// <remarks/>
//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in native C++:
//ORIGINAL LINE: [System.Xml.Serialization.XmlAttributeAttribute()] public string id
            std::wstring getid() const;
            void setid(const std::wstring &value);
        };
        }
    }
}
