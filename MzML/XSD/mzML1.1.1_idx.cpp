// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mzML1.1.1_idx.h"

namespace ms
{
  namespace mzml
  {
    // IndexListType
    // 

    const IndexListType::index_sequence& IndexListType::
    index () const
    {
      return this->index_;
    }

    IndexListType::index_sequence& IndexListType::
    index ()
    {
      return this->index_;
    }

    void IndexListType::
    index (const index_sequence& s)
    {
      this->index_ = s;
    }

    const IndexListType::count_type& IndexListType::
    count () const
    {
      return this->count_.get ();
    }

    IndexListType::count_type& IndexListType::
    count ()
    {
      return this->count_.get ();
    }

    void IndexListType::
    count (const count_type& x)
    {
      this->count_.set (x);
    }


    // IndexType
    // 

    const IndexType::offset_sequence& IndexType::
    offset () const
    {
      return this->offset_;
    }

    IndexType::offset_sequence& IndexType::
    offset ()
    {
      return this->offset_;
    }

    void IndexType::
    offset (const offset_sequence& s)
    {
      this->offset_ = s;
    }

    const IndexType::name_type& IndexType::
    name () const
    {
      return this->name_.get ();
    }

    IndexType::name_type& IndexType::
    name ()
    {
      return this->name_.get ();
    }

    void IndexType::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void IndexType::
    name (::std::unique_ptr< name_type > x)
    {
      this->name_.set (std::move (x));
    }


    // OffsetType
    // 

    const OffsetType::idRef_type& OffsetType::
    idRef () const
    {
      return this->idRef_.get ();
    }

    OffsetType::idRef_type& OffsetType::
    idRef ()
    {
      return this->idRef_.get ();
    }

    void OffsetType::
    idRef (const idRef_type& x)
    {
      this->idRef_.set (x);
    }

    void OffsetType::
    idRef (::std::unique_ptr< idRef_type > x)
    {
      this->idRef_.set (std::move (x));
    }

    const OffsetType::spotID_optional& OffsetType::
    spotID () const
    {
      return this->spotID_;
    }

    OffsetType::spotID_optional& OffsetType::
    spotID ()
    {
      return this->spotID_;
    }

    void OffsetType::
    spotID (const spotID_type& x)
    {
      this->spotID_.set (x);
    }

    void OffsetType::
    spotID (const spotID_optional& x)
    {
      this->spotID_ = x;
    }

    void OffsetType::
    spotID (::std::unique_ptr< spotID_type > x)
    {
      this->spotID_.set (std::move (x));
    }

    const OffsetType::scanTime_optional& OffsetType::
    scanTime () const
    {
      return this->scanTime_;
    }

    OffsetType::scanTime_optional& OffsetType::
    scanTime ()
    {
      return this->scanTime_;
    }

    void OffsetType::
    scanTime (const scanTime_type& x)
    {
      this->scanTime_.set (x);
    }

    void OffsetType::
    scanTime (const scanTime_optional& x)
    {
      this->scanTime_ = x;
    }


    // name
    // 

    name::
    name ()
    : ::xml_schema::string ()
    {
    }

    name::
    name (value v)
    : ::xml_schema::string (_xsd_name_literals_[v])
    {
    }

    name::
    name (const char* v)
    : ::xml_schema::string (v)
    {
    }

    name::
    name (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    name::
    name (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    name::
    name (const name& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    name& name::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_name_literals_[v]);

      return *this;
    }


    // indexedmzML
    // 

    const indexedmzML::mzML_type& indexedmzML::
    mzML () const
    {
      return this->mzML_.get ();
    }

    indexedmzML::mzML_type& indexedmzML::
    mzML ()
    {
      return this->mzML_.get ();
    }

    void indexedmzML::
    mzML (const mzML_type& x)
    {
      this->mzML_.set (x);
    }

    void indexedmzML::
    mzML (::std::unique_ptr< mzML_type > x)
    {
      this->mzML_.set (std::move (x));
    }

    const indexedmzML::indexList_type& indexedmzML::
    indexList () const
    {
      return this->indexList_.get ();
    }

    indexedmzML::indexList_type& indexedmzML::
    indexList ()
    {
      return this->indexList_.get ();
    }

    void indexedmzML::
    indexList (const indexList_type& x)
    {
      this->indexList_.set (x);
    }

    void indexedmzML::
    indexList (::std::unique_ptr< indexList_type > x)
    {
      this->indexList_.set (std::move (x));
    }

    const indexedmzML::indexListOffset_type& indexedmzML::
    indexListOffset () const
    {
      return this->indexListOffset_.get ();
    }

    indexedmzML::indexListOffset_type& indexedmzML::
    indexListOffset ()
    {
      return this->indexListOffset_.get ();
    }

    void indexedmzML::
    indexListOffset (const indexListOffset_type& x)
    {
      this->indexListOffset_.set (x);
    }

    const indexedmzML::fileChecksum_type& indexedmzML::
    fileChecksum () const
    {
      return this->fileChecksum_.get ();
    }

    indexedmzML::fileChecksum_type& indexedmzML::
    fileChecksum ()
    {
      return this->fileChecksum_.get ();
    }

    void indexedmzML::
    fileChecksum (const fileChecksum_type& x)
    {
      this->fileChecksum_.set (x);
    }

    void indexedmzML::
    fileChecksum (::std::unique_ptr< fileChecksum_type > x)
    {
      this->fileChecksum_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace ms
{
  namespace mzml
  {
    // IndexListType
    //

    IndexListType::
    IndexListType ()
    : ::xml_schema::type (),
      index_ (this),
      count_ (this)
    {
    }

    IndexListType::
    IndexListType (const count_type& count)
    : ::xml_schema::type (),
      index_ (this),
      count_ (count, this)
    {
    }

    IndexListType::
    IndexListType (const IndexListType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      index_ (x.index_, f, this),
      count_ (x.count_, f, this)
    {
    }

    IndexListType::
    IndexListType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      index_ (this),
      count_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void IndexListType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // index
        //
        if (n.name () == "index" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          ::std::unique_ptr< index_type > r (
            index_traits::create (i, f, this));

          this->index_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "count" && n.namespace_ ().empty ())
        {
          this->count_.set (count_traits::create (i, f, this));
          continue;
        }
      }

      if (!count_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "count",
          "");
      }
    }

    IndexListType* IndexListType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class IndexListType (*this, f, c);
    }

    IndexListType& IndexListType::
    operator= (const IndexListType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->index_ = x.index_;
        this->count_ = x.count_;
      }

      return *this;
    }

    IndexListType::
    ~IndexListType ()
    {
    }

    // IndexType
    //

    IndexType::
    IndexType ()
    : ::xml_schema::type (),
      offset_ (this),
      name_ (this)
    {
    }

    IndexType::
    IndexType (const name_type& name)
    : ::xml_schema::type (),
      offset_ (this),
      name_ (name, this)
    {
    }

    IndexType::
    IndexType (const IndexType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      offset_ (x.offset_, f, this),
      name_ (x.name_, f, this)
    {
    }

    IndexType::
    IndexType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      offset_ (this),
      name_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void IndexType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // offset
        //
        if (n.name () == "offset" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          ::std::unique_ptr< offset_type > r (
            offset_traits::create (i, f, this));

          this->offset_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          this->name_.set (name_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }
    }

    IndexType* IndexType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class IndexType (*this, f, c);
    }

    IndexType& IndexType::
    operator= (const IndexType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->offset_ = x.offset_;
        this->name_ = x.name_;
      }

      return *this;
    }

    IndexType::
    ~IndexType ()
    {
    }

    // OffsetType
    //

    OffsetType::
    OffsetType ()
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (),
      idRef_ (this),
      spotID_ (this),
      scanTime_ (this)
    {
    }

    OffsetType::
    OffsetType (const ::xml_schema::long_& _xsd_long__base,
                const idRef_type& idRef)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (_xsd_long__base),
      idRef_ (idRef, this),
      spotID_ (this),
      scanTime_ (this)
    {
    }

    OffsetType::
    OffsetType (const OffsetType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (x, f, c),
      idRef_ (x.idRef_, f, this),
      spotID_ (x.spotID_, f, this),
      scanTime_ (x.scanTime_, f, this)
    {
    }

    OffsetType::
    OffsetType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (e, f | ::xml_schema::flags::base, c),
      idRef_ (this),
      spotID_ (this),
      scanTime_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void OffsetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "idRef" && n.namespace_ ().empty ())
        {
          this->idRef_.set (idRef_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "spotID" && n.namespace_ ().empty ())
        {
          this->spotID_.set (spotID_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "scanTime" && n.namespace_ ().empty ())
        {
          this->scanTime_.set (scanTime_traits::create (i, f, this));
          continue;
        }
      }

      if (!idRef_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "idRef",
          "");
      }
    }

    OffsetType* OffsetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OffsetType (*this, f, c);
    }

    OffsetType& OffsetType::
    operator= (const OffsetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (*this) = x;
        this->idRef_ = x.idRef_;
        this->spotID_ = x.spotID_;
        this->scanTime_ = x.scanTime_;
      }

      return *this;
    }

    OffsetType::
    ~OffsetType ()
    {
    }

    // name
    //

    name::
    name (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_name_convert ();
    }

    name::
    name (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_name_convert ();
    }

    name::
    name (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_name_convert ();
    }

    name* name::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class name (*this, f, c);
    }

    name::value name::
    _xsd_name_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_name_literals_);
      const value* i (::std::lower_bound (
                        _xsd_name_indexes_,
                        _xsd_name_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_name_indexes_ + 2 || _xsd_name_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const name::
    _xsd_name_literals_[2] =
    {
      "spectrum",
      "chromatogram"
    };

    const name::value name::
    _xsd_name_indexes_[2] =
    {
      ::ms::mzml::name::chromatogram,
      ::ms::mzml::name::spectrum
    };

    // indexedmzML
    //

    indexedmzML::
    indexedmzML ()
    : ::xml_schema::type (),
      mzML_ (this),
      indexList_ (this),
      indexListOffset_ (this),
      fileChecksum_ (this)
    {
    }

    indexedmzML::
    indexedmzML (const mzML_type& mzML,
                 const indexList_type& indexList,
                 const indexListOffset_type& indexListOffset,
                 const fileChecksum_type& fileChecksum)
    : ::xml_schema::type (),
      mzML_ (mzML, this),
      indexList_ (indexList, this),
      indexListOffset_ (indexListOffset, this),
      fileChecksum_ (fileChecksum, this)
    {
    }

    indexedmzML::
    indexedmzML (::std::unique_ptr< mzML_type > mzML,
                 ::std::unique_ptr< indexList_type > indexList,
                 const indexListOffset_type& indexListOffset,
                 const fileChecksum_type& fileChecksum)
    : ::xml_schema::type (),
      mzML_ (std::move (mzML), this),
      indexList_ (std::move (indexList), this),
      indexListOffset_ (indexListOffset, this),
      fileChecksum_ (fileChecksum, this)
    {
    }

    indexedmzML::
    indexedmzML (const indexedmzML& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      mzML_ (x.mzML_, f, this),
      indexList_ (x.indexList_, f, this),
      indexListOffset_ (x.indexListOffset_, f, this),
      fileChecksum_ (x.fileChecksum_, f, this)
    {
    }

    indexedmzML::
    indexedmzML (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      mzML_ (this),
      indexList_ (this),
      indexListOffset_ (this),
      fileChecksum_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void indexedmzML::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // mzML
        //
        if (n.name () == "mzML" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          ::std::unique_ptr< mzML_type > r (
            mzML_traits::create (i, f, this));

          if (!mzML_.present ())
          {
            this->mzML_.set (::std::move (r));
            continue;
          }
        }

        // indexList
        //
        if (n.name () == "indexList" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          ::std::unique_ptr< indexList_type > r (
            indexList_traits::create (i, f, this));

          if (!indexList_.present ())
          {
            this->indexList_.set (::std::move (r));
            continue;
          }
        }

        // indexListOffset
        //
        if (n.name () == "indexListOffset" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          if (!indexListOffset_.present ())
          {
            this->indexListOffset_.set (indexListOffset_traits::create (i, f, this));
            continue;
          }
        }

        // fileChecksum
        //
        if (n.name () == "fileChecksum" && n.namespace_ () == "http://psi.hupo.org/ms/mzml")
        {
          ::std::unique_ptr< fileChecksum_type > r (
            fileChecksum_traits::create (i, f, this));

          if (!fileChecksum_.present ())
          {
            this->fileChecksum_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!mzML_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "mzML",
          "http://psi.hupo.org/ms/mzml");
      }

      if (!indexList_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "indexList",
          "http://psi.hupo.org/ms/mzml");
      }

      if (!indexListOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "indexListOffset",
          "http://psi.hupo.org/ms/mzml");
      }

      if (!fileChecksum_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileChecksum",
          "http://psi.hupo.org/ms/mzml");
      }
    }

    indexedmzML* indexedmzML::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class indexedmzML (*this, f, c);
    }

    indexedmzML& indexedmzML::
    operator= (const indexedmzML& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->mzML_ = x.mzML_;
        this->indexList_ = x.indexList_;
        this->indexListOffset_ = x.indexListOffset_;
        this->fileChecksum_ = x.fileChecksum_;
      }

      return *this;
    }

    indexedmzML::
    ~indexedmzML ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ms
{
  namespace mzml
  {
    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::ms::mzml::indexedmzML_ (isrc, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::ms::mzml::indexedmzML_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::ms::mzml::indexedmzML_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::ms::mzml::indexedmzML_ (isrc, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::ms::mzml::indexedmzML_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::ms::mzml::indexedmzML_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
        ::ms::mzml::indexedmzML_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::ms::mzml::indexedmzML > (
          ::ms::mzml::indexedmzML_ (
            std::move (d), f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "indexedmzML" &&
          n.namespace_ () == "http://psi.hupo.org/ms/mzml")
      {
        ::std::unique_ptr< ::ms::mzml::indexedmzML > r (
          ::xsd::cxx::tree::traits< ::ms::mzml::indexedmzML, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "indexedmzML",
        "http://psi.hupo.org/ms/mzml");
    }

    ::std::unique_ptr< ::ms::mzml::indexedmzML >
    indexedmzML_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "indexedmzML" &&
          n.namespace_ () == "http://psi.hupo.org/ms/mzml")
      {
        ::std::unique_ptr< ::ms::mzml::indexedmzML > r (
          ::xsd::cxx::tree::traits< ::ms::mzml::indexedmzML, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "indexedmzML",
        "http://psi.hupo.org/ms/mzml");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace ms
{
  namespace mzml
  {
    void
    operator<< (::xercesc::DOMElement& e, const IndexListType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // index
      //
      for (IndexListType::index_const_iterator
           b (i.index ().begin ()), n (i.index ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "index",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << *b;
      }

      // count
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "count",
            e));

        a << i.count ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const IndexType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // offset
      //
      for (IndexType::offset_const_iterator
           b (i.offset ().begin ()), n (i.offset ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "offset",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << *b;
      }

      // name
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "name",
            e));

        a << i.name ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const OffsetType& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);

      // idRef
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "idRef",
            e));

        a << i.idRef ();
      }

      // spotID
      //
      if (i.spotID ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "spotID",
            e));

        a << *i.spotID ();
      }

      // scanTime
      //
      if (i.scanTime ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "scanTime",
            e));

        a << ::xml_schema::as_double(*i.scanTime ());
      }
    }

    void
    indexedmzML_ (::std::ostream& o,
                  const ::ms::mzml::indexedmzML& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    indexedmzML_ (::std::ostream& o,
                  const ::ms::mzml::indexedmzML& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    indexedmzML_ (::std::ostream& o,
                  const ::ms::mzml::indexedmzML& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& t,
                  const ::ms::mzml::indexedmzML& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& t,
                  const ::ms::mzml::indexedmzML& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    indexedmzML_ (::xercesc::XMLFormatTarget& t,
                  const ::ms::mzml::indexedmzML& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::ms::mzml::indexedmzML_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    indexedmzML_ (::xercesc::DOMDocument& d,
                  const ::ms::mzml::indexedmzML& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "indexedmzML" &&
          n.namespace_ () == "http://psi.hupo.org/ms/mzml")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "indexedmzML",
          "http://psi.hupo.org/ms/mzml");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    indexedmzML_ (const ::ms::mzml::indexedmzML& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "indexedmzML",
          "http://psi.hupo.org/ms/mzml",
          m, f));

      ::ms::mzml::indexedmzML_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const name& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const name& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const name& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const indexedmzML& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // mzML
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "mzML",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << i.mzML ();
      }

      // indexList
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "indexList",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << i.indexList ();
      }

      // indexListOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "indexListOffset",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << i.indexListOffset ();
      }

      // fileChecksum
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "fileChecksum",
            "http://psi.hupo.org/ms/mzml",
            e));

        s << i.fileChecksum ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

